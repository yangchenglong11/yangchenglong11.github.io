<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>My New Hugo Site</title>
    <link>http://yangchenglong11.github.io/</link>
    <description>Recent content on My New Hugo Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 14 May 2017 13:58:41 +0800</lastBuildDate>
    
	<atom:link href="http://yangchenglong11.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>context</title>
      <link>http://yangchenglong11.github.io/post/context/</link>
      <pubDate>Sun, 14 May 2017 13:58:41 +0800</pubDate>
      
      <guid>http://yangchenglong11.github.io/post/context/</guid>
      <description>context  // Package context defines the Context type, which carries deadlines, // cancelation signals, and other request-scoped values across API boundaries // and between processes. // // Incoming requests to a server should create a Context, and outgoing // calls to servers should accept a Context. The chain of function // calls between them must propagate the Context, optionally replacing // it with a derived Context created using WithCancel, WithDeadline, // WithTimeout, or WithValue.</description>
    </item>
    
    <item>
      <title>go环境变量</title>
      <link>http://yangchenglong11.github.io/post/go%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/</link>
      <pubDate>Sun, 14 May 2017 13:48:24 +0800</pubDate>
      
      <guid>http://yangchenglong11.github.io/post/go%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/</guid>
      <description>Go 环境变量 Go 开发环境依赖于一些操作系统环境变量，你最好在安装 Go 之间就已经设置好他们。
 如果你使用的是 Windows 的话，你完全不用进行手动设置，Go 将被默认安装在目录 c:/go 下。这里列举几个最为重要的环境变量：
 $GOROOT 表示 Go 在你的电脑上的安装位置，它的值一般都是 $HOME/go，当然，你也可以安装在别的地方。 $GOARCH 表示目标机器的处理器架构，它的值可以是 386、amd64 或 arm。 $GOOS 表示目标机器的操作系统，它的值可以是 darwin、freebsd、linux 或 windows。 $GOBIN 表示编译器和链接器的安装位置，默认是 $GOROOT/bin，如果你使用的是 Go 1.0.3 及以后的版本，一般情况下你可以将它的值设置为空，Go 将会使用前面提到的默认值。  目标机器是指你打算运行你的 Go 应用程序的机器。
Go 编译器支持交叉编译，也就是说你可以在一台机器上构建运行在具有不同操作系统和处理器架构上运行的应用程序，也就是说编写源代码的机器可以和目标机器有完全不同的特性（操作系统与处理器架构）。
为了区分本地机器和目标机器，你可以使用 $GOHOSTOS 和 $GOHOSTARCH 设置目标机器的参数，这两个变量只有在进行交叉编译的时候才会用到，如果你不进行显示设置，他们的值会和本地机器（$GOOS 和 $GOARCH）一样。
 $GOPATH 默认采用和 $GOROOT 一样的值，但从 Go 1.1 版本开始，你必须修改为其它路径。它可以包含多个包含 Go 语言源码文件、包文件和可执行文件的路径，而这些路径下又必须分别包含三个规定的目录：src、pkg 和 bin，这三个目录分别用于存放源码文件、包文件和可执行文件。 $GOARM 专门针对基于 arm 架构的处理器，它的值可以是 5 或 6，默认为 6。 $GOMAXPROCS 用于设置应用程序可使用的处理器个数与核数  在接下来的章节中，我们将会讨论如何在 Linux、Mac OS X 和 Windows 上安装 Go 语言。在 FreeBSD 上的安装和 Linux 非常类似。开发团队正在尝试将 Go 语言移植到其它例如 OpenBSD、DragonFlyBSD、NetBSD、Plan 9、Haiku 和 Solaris 操作系统上，你可以在这个页面找到最近的动态：Go Porting Efforts。</description>
    </item>
    
    <item>
      <title>Docker基本命令</title>
      <link>http://yangchenglong11.github.io/post/docker%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/</link>
      <pubDate>Sun, 25 Oct 2015 08:36:54 -0700</pubDate>
      
      <guid>http://yangchenglong11.github.io/post/docker%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/</guid>
      <description>Docker基本命令 docker
创建mongo容器，并在其他端口启动
 docker run --name clmongo -p 6667:27017 -d mongo  创建mongo容器，将数据放在 /home/docker/clmongo_data目录下，在本机27017端口启动，在外部通过6667访问
 docker run --name clmongo -v /home/docker/clmongo_data:/data/db -d -p 6667:27017 mongo  获取镜像，通过制定tag可以下载特定标签的镜像。比如
 docker pull image_name:tag  未指定tag时，将会默认下载标签为latest标签的镜像
 sudo docker pull ubuntu:14.04  使用镜像
 sudo docker run -t -i ubuntu /bin  查看镜像信息
 docker imges  使用docker tag为本地镜像添加新的标签, 添加后可以发现多了一个所添加标签的镜像，但它们标签一致，即标签在这里起到了引用或快捷方式的作用。
 sudo docker tag name:tag new_name:new_tag  显示 Docker 系统信息，包括镜像和容器数。
 docker info  使用docker inspect查看该镜像的详细信息</description>
    </item>
    
  </channel>
</rss>