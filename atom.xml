<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>yangcl&#39;s</title>
  
  <subtitle>悟已往之不谏，知来者之可追。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://yangchenglong11.github.io/"/>
  <updated>2018-01-14T04:50:22.642Z</updated>
  <id>https://yangchenglong11.github.io/</id>
  
  <author>
    <name>Yang Chenglong</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Network学习笔记</title>
    <link href="https://yangchenglong11.github.io/2018/01/14/Network%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://yangchenglong11.github.io/2018/01/14/Network学习笔记/</id>
    <published>2018-01-14T04:42:40.000Z</published>
    <updated>2018-01-14T04:50:22.642Z</updated>
    
    <content type="html"><![CDATA[<p>整理了一些网络学习中易混淆的名词。<br><a id="more"></a></p><p>说到网络，不得不提的就是分层模型。</p><table><thead><tr><th>七层模型</th><th>五层模型</th><th>四层模型</th></tr></thead><tbody><tr><td>应用层</td><td></td><td></td><td></td></tr><tr><td>表示层</td><td>应用层</td><td>应用层</td></tr><tr><td>会话层</td><td></td><td></td><td></td></tr><tr><td>传输层</td><td>传输层</td><td>传输层</td></tr><tr><td>网络层</td><td>网络层</td><td>网络层</td></tr><tr><td>数据链路层</td><td>数据链路层</td><td>链接层/实体层</td></tr><tr><td>物理层</td><td>物理层</td></tr></tbody></table><p>七层模型的上三层归为应用层即为TCP/IP五层模型，五层模型的下两层归为链接层或者说实体层即为四层模型。</p><p>也就是说，所谓的五层或者四层，其实可以认为是方便理解而形成的潜规则，而具体的实施肯定还是得根据七层的标准来。毕竟每一层都有每一层各自的功能，而为了完成每一层的功能，就需要大家遵守相关的规则，也就是协议。</p><p><strong>IP</strong></p><p> IP协议（网际协议）对应于网络层，在网络通信中，网络组件的寻址对信息的路由选择和传输来说是相当关键的。相同网络中的两台机器间的消息传输有各自的技术协定。LAN 是通过提供6字节的唯一标识符（“MAC”地址）在机器间发送消息的。SNA 网络中的每台机器都有一个逻辑单元及与其相应的网络地址。</p><p><strong>TCP</strong> </p><p>TCP（Transmission Control Protocol，传输控制协议）是基于连接的协议，也就是说，在正式收发数据前，必须和对方建立可靠的连接。一个TCP连接必须要经过三次“对话”才能建立起来，握手过程中传送的包里不包含数据，三次握手完毕后，客户端与服务器才正式开始传送数据。</p><p>理想状态下，TCP连接一旦建立，在通信双方中的任何一方主动关闭连接之前，TCP 连接都将被一直保持下去。</p><p>断开连接时服务器和客户端均可以主动发起断开TCP连接的请求，断开过程需要经过“四次握手”(过程就不细写了，就是服务器和客户端交互，最终确定断开)</p><p>通过序列化应答和必要时重发数据包，TCP 为应用程序提供了可靠的传输流和虚拟连接服务，使一台计算机发出的字节流无差错地发往网络上的其他计算机，对可靠性要求高的数据通信系统往往使用TCP协议传输数据。TCP 还提供有效流控制，全双工操作和多路传输技术。</p><p>TCP是传输层协议，每一条TCP连接只能是点到点的，数据包在网络传输过程中，HTTP被封装在TCP包内。</p><p><strong>UDP</strong></p><p>UDP（User Data Protocol，用户数据报协议）是与TCP相对应的协议。它是面向非连接的协议，它不与对方建立连接，而是直接就把数据包发送过去！</p><p>UDP 适用于一次只传送少量数据、对可靠性要求不高的应用环境。比如，我们经常使用“ping”命令来测试两台主机之间TCP/IP通信是否正常，其实 “ping”命令的原理就是向对方主机发送UDP数据包，然后对方主机确认收到数据包，如果数据包是否到达的消息及时反馈回来，那么网络就是通的。例如， 在默认状态下，一次“ping”操作发送4个数据包。大家可以看到，发送的数据包数量是4包，收到的也是4包（因为对方主机收到后会发回一 个确认收到的数据包）。</p><p>这充分说明了UDP协议是面向非连接的协议，没有建立连接的过程。正因为UDP协议没有连接的过程，使得UDP的开销更小数据传输速率更高，因为不必进行收发数据的确认，所以UDP的实时性更好通信效果高。但也正因为如此，它的可靠性不如TCP协议高，可能会出现先发未必先至现象。QQ就使用UDP发消息，因此有时会出现收不到消息的情况。</p><p>UDP支持一对一，一对多，多对一和多对多的交互通信，可以实现广播。</p><p>知道了TCP和UDP的区别，就不难理解为何采用TCP传输协议的MSN比采用UDP的QQ传输文件慢了，但并不能说QQ的通信是不安全的，因为程序员可以手动对UDP的数据收发进行验证，比如发送方对每个数据包进行编号然后由接收方进行验证啊什么的，即使是这样，UDP因为在底层协议的封装上没有采用类似TCP的“三次握手”而实现了TCP所无法达到的传输效率。</p><p><strong>HTTP</strong></p><p>HTTP协议是Hyper Text Transfer Protocol（超文本传输协议）的缩写,是用于从万维网（WWW:World Wide Web ）服务器传输超文本到本地浏览器的传送协议。</p><p>HTTP是一个基于TCP/IP通信协议来传递数据（HTML 文件, 图片文件, 查询结果等）。</p><p>HTTP是一个属于应用层的面向对象的协议，由于其简捷、快速的方式，适用于分布式超媒体信息系统。</p><p>HTTP协议工作于客户端-服务端架构为上。浏览器作为HTTP客户端通过URL向HTTP服务端即WEB服务器发送所有请求。Web服务器根据接收到的请求后，向客户端发送响应信息。</p><p>HTTP协议定义Web客户端如何从Web服务器请求Web页面，以及服务器如何把Web页面传送给客户端。HTTP协议采用了请求/响应模型。客户端向服务器发送一个请求报文，请求报文包含请求的方法、URL、协议版本、请求头部和请求数据。服务器以一个状态行作为响应，响应的内容包括协议的版本、成功或者错误代码、服务器信息、响应头部和响应数据。</p><p>HTTP连接最显著的特点是客户端发送的每次请求都需要服务器回送响应，在请求结束后，会主动释放连接。从建立连接到关闭连接的过程称为“一次连接”。HTTP是无状态的短连接，就是经过一次一来一回的即断开连接。无法记录状态，所以引进session还有cookie弥补他无状态的缺陷。</p><p><strong>WebSocket</strong></p><p>WebSocket也是一种协议，并且也是基于TCP协议的。具体流程是WebSocket通过HTTP先发送一个标记了 Upgrade 的请求，服务端解析后开始建立TCP连接，省去了HTTP长连接每次请求都要上传header的冗余，可以理解为WebSocket是HTTP的优化，但WebSocket不仅仅在Web应用程序上得到支持。</p><p>WebSocket是在H5之后发布的，可以实现双向通信，也是基于TCP的应用层协议。 在他的握手请求中会比HTTP协议多出两行代码:</p><pre><code>Upgrade: websocketConnection: Upgrade</code></pre><p>他保证了服务器识别该协议为WebSocket协议。</p><p>总结一下，TCP/IP协议是传输层协议，主要解决数据如何在网络中传输，而HTTP是应用层协议，主要解决如何包装数据。</p><p>关于TCP/IP和HTTP协议的关系，网络有一段比较容易理解的介绍：“我们在传输数据时，可以只使用(传输层)TCP/IP协议，但是那样的话，如果没有应用层，便无法识别数据内容。如果想要使传输的数据有意义，则必须使用到应用层协议。应用层协议有很多，除 HTTP ，WebSocket外还有 FTP、TELNET 等，也可以自己定义应用层协议。WEB使用HTTP协议作应用层协议，以封装HTTP文本信息，然后使用TCP/IP做传输层协议将它发到网络上。”</p><p>HTTP通信过程属于“你推一下，我走一下”的方式，客户端不发请求则服务器永远无法发送数据给客户端。在HTTP上实现长连接以前可用AJAX轮询(就是隔一段时间发送ajax来保证数据，但这样会耗费大量资源)。而WebSocket则在进行第一次HTTP请求之后，其他全部采用TCP通道进行双向通讯。所以，HTTP和WebSocket虽都是基于TCP协议，但是两者属于完全不同的两种通讯方式。</p><p><strong>Socket</strong></p><p>Socket是对TCP/IP协议的封装，Socket本身并不是协议，而是一个调用接口(API)。通过Socket，我们才能使用TCP/IP协议。实际上，Socket跟TCP/IP协议没有必然的联系。</p><p>Socket编程接口在设计的时候，就希望也能适应其他的网络协议。所以说，Socket的出现只是使得程序员更方便地使用TCP/IP协议栈而已，是对TCP/IP协议的抽象，从而形成了我们知道的一些最基本的函数接口，比如create、listen、connect、accept、send、read和write等等。<br>建立Socket连接至少需要一对套接字，其中一个运行于客户端，称为ClientSocket ，另一个运行于服务器端，称为ServerSocket 。</p><p>套接字之间的连接过程分为三个步骤：服务器监听，客户端请求，连接确认。</p><p>1、服务器监听：服务器端套接字并不定位具体的客户端套接字，而是处于等待连接的状态，实时监控网络状态，等待客户端的连接请求。</p><p>2、客户端请求：指客户端的套接字提出连接请求，要连接的目标是服务器端的套接字。</p><p>为此，客户端的套接字必须首先描述它要连接的服务器的套接字，指出服务器端套接字的地址和端口号，然后就向服务器端套接字提出连接请求。</p><p>3、连接确认：当服务器端套接字监听到或者说接收到客户端套接字的连接请求时，就响应客户端套接字的请求，建立一个新的线程，把服务器端套接字的描述发给客户端，一旦客户端确认了此描述，双方就正式建立连接。</p><p>而服务器端套接字继续处于监听状态，继续接收其他客户端套接字的连接请求。</p><p>传输层的TCP是基于网络层的IP协议的，而应用层的HTTP协议又是基于传输层的TCP协议的，而Socket本身不算是协议，就像上面所说，它只是提供了一个针对TCP或者UDP编程的接口。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;整理了一些网络学习中易混淆的名词。&lt;br&gt;
    
    </summary>
    
      <category term="Network" scheme="https://yangchenglong11.github.io/categories/Network/"/>
    
    
      <category term="Network" scheme="https://yangchenglong11.github.io/tags/Network/"/>
    
  </entry>
  
  <entry>
    <title>iptables</title>
    <link href="https://yangchenglong11.github.io/2017/07/15/iptables/"/>
    <id>https://yangchenglong11.github.io/2017/07/15/iptables/</id>
    <published>2017-07-15T08:09:51.000Z</published>
    <updated>2018-03-15T08:13:00.805Z</updated>
    
    <content type="html"><![CDATA[<p>iptables利用的是数据包过滤机制</p><a id="more"></a><h2 id="Netfilter-与-iptables-的关系"><a href="#Netfilter-与-iptables-的关系" class="headerlink" title="Netfilter 与 iptables 的关系"></a>Netfilter 与 iptables 的关系</h2><p>Linux 系统在内核中提供了对报文数据包过滤和修改的官方项目名为 Netfilter，它指的是 Linux 内核中的一个框架，它可以用于在不同阶段将某些钩子函数（hook）作用域网络协议栈。Netfilter 本身并不对数据包进行过滤，它只是允许可以过滤数据包或修改数据包的函数挂接到内核网络协议栈中的适当位置。这些函数是可以自定义的。</p><p>iptables 是用户层的工具，它提供命令行接口，能够向 Netfilter 中添加规则策略，从而实现报文过滤，修改等功能。Linux 系统中并不止有 iptables 能够生成防火墙规则，其他的工具如 firewalld 等也能实现类似的功能。</p><h2 id="使用-iptables-进行包过滤"><a href="#使用-iptables-进行包过滤" class="headerlink" title="使用 iptables 进行包过滤"></a>使用 iptables 进行包过滤</h2><p>iptables利用的是数据包过滤机制，他会分析数据包的报头数据，根据报头数据与定义的规则来决定该数据包是否可以进入主机或者是被丢弃。也就是说，根据数据包的分析资料对比预先定义的规则内容，若数据包数据数据与规则内容相同则进行动作，否则就继续下一条规则的对比。重点是对比与分析的顺序。</p><p><img src="https://github.com/fengyfei/WikiImages/blob/master/iptables/iptables_01.png?raw=true" alt="tu"></p><p>  在上图中，当网络数据包开始Rule 1 的比对时，如果比对结果符合Rule 1，此时这个网络数据包就会进行Action 1 的动作，而不会理会后续的 Rule 2，Rule 3等规则了。如果一个一个规则对比下去，所有规则都不符合的话， 就会执行默认操作(Policy)，来决定这个数据包的去向。</p><h3 id="表"><a href="#表" class="headerlink" title="表"></a>表</h3><p>上图中列出的规则仅是iptables众多表格当中的一个链而已。iptables中有多个表格，每个表都定义自己的默认策略与规则。</p><p>iptables 根据功能分类，内建有多个表，如包过滤（filter）或者网络地址转换（NAT）。iptables 中共有 4 个表：filter，nat，mangle 和 raw。filter 表主要实现过滤功能，nat 表实现 NAT 功能，mangle 表用于修改分组数据，raw 用于配置数据包，raw中的数据包不会被系统跟踪。</p><h3 id="链"><a href="#链" class="headerlink" title="链"></a>链</h3><p>一个 iptables 链就是一个规则集，这些规则按序与包含某种特征的数据包进行比较匹配。</p><p>每个表都有一组内置链，用户还可以添加自定义的链。最重要的内置链是 filter 表中的 INPUT、OUTPUT 和 FORWARD 链。</p><ul><li>filter,用于路由网络数据包<ul><li>INPUT 发往本机的报文</li><li>OUTPUT 由本机发出的报文</li><li>FORWARD 经由本机转发的报文</li></ul></li><li>nat,用于NAT表。这个表主要用来进行来源与目的地的IP或port的转换，与linux本机无关，主要与linux主机后的局域网内计算机相关。<ul><li>PREROUTING 网络数据包到达服务器时可以被修改</li><li>POSTROUTING 网络数据包在即将从服务器发出时可以被修改</li><li>OUTPUT 网络数据包流出服务器</li></ul></li><li>mangle,用于修改网络数据包的表，如TOS(Type Of Service),TTL(Time To Live),等<ul><li>INPUT 发往本机的报文</li><li>OUTPUT 由本机发出的报文</li><li>FORWARD 经由本机转发的报文</li><li>PREROUTING 网络数据包到达服务器时可以被修改</li><li>POSTROUTING 网络数据包在即将从服务器发出时可以被修改</li></ul></li><li>raw, 用于决定数据包是否被跟踪机制处理<ul><li>OUTPUT 由本机发出的报文</li><li>PREROUTING 网络数据包到达服务器时可以被修改</li></ul></li></ul><p>3.数据包过滤匹配流程</p><p>​    1&gt;.规则表之间的优先顺序</p><p>​    依次应用：raw、mangle、nat、filter表</p><p>​    2&gt;.规则链之间的优先顺序</p><p>​        入站数据流向</p><p>​        转发数据流向</p><p>​        出站数据流向</p><p>​    3&gt;.规则链内部各条防火墙规则之间的优先顺序</p><p>所以如果liunx是作为服务器，就要让客户端可以访问你的服务，就得要处理 filter 的 INPUT 链； 而如果你的 Linux 是作为局域网络的路由器，那么就得要分析 nat 的各个链以及 filter 的 FORWARD 链才行。也就是说， 其实各个表格的链结之间是有关系的。</p><p><img src="https://github.com/fengyfei/WikiImages/blob/master/iptables/iptables_02.png?raw=true" alt="tu"></p><p> iptables 可以控制三种封包的流向：</p><ul><li>封包进入 Linux 主机使用资源 (路径 A)： 在路由判断后确定是向 Linux 主机要求数据的封包，主要就会透过 filter 的 INPUT 链来进行控管；</li><li>封包经由 Linux 主机的转递，没有使用主机资源，而是向后端主机流动 (路径 B)： 在路由判断之前进行封包表头的修订作业后，发现到封包主要是要透过防火墙而去后端，此时封包就会透过路径 B 来跑动。 也就是说，该封包的目标并非我们的 Linux 本机。主要经过的链是 filter 的 FORWARD 以及 nat 的 POSTROUTING, PREROUTING。</li><li>封包由 Linux 本机发送出去 (路径 C)： 例如响应客户端的要求，或者是 Linux 本机主动送出的封包，都是透过路径 C 来跑的。先是透过路由判断， 决定了输出的路径后，再透过 filter 的 OUTPUT 链来传送。当然，最终还是会经过 nat 的 POSTROUTING 链。</li></ul><p>iptables 至少有三个预设的 table (filter, nat, mangle)，较常用的是本机的 filter 表格， 也是默认表格。另一个则是后端主机的 nat 表格，至于 mangle 较少使用，所以这里我们并不会讨论 mangle。 由于不同的 table 他们的链不一样，导致使用的指令语法或多或少都有点差异。 这里，我们主要将针对 filter 这个默认表格的三条链来做介绍。</p><h4 id="显示当前规则"><a href="#显示当前规则" class="headerlink" title="显示当前规则"></a>显示当前规则</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">[root@www ~]# iptables [-t tables] [-L] [-nv]</div><div class="line">选项与参数：</div><div class="line">-t ：后面接 table ，例如 nat 或 filter ，若省略此项目，则使用默认的 filter</div><div class="line">-L ：列出目前的 table 的规则</div><div class="line">-n ：不进行 IP 与 HOSTNAME 的反查，显示讯息的速度会快很多</div><div class="line">-v ：列出更多的信息，包括通过该规则的封包总位数、相关的网络接口等</div><div class="line"></div><div class="line">范例：列出 filter table 三条链的规则</div><div class="line">[root@www ~]# iptables -L -n</div><div class="line">Chain INPUT (policy ACCEPT)                                       &lt;==INPUT 链，预设为可接受</div><div class="line">target  prot opt source     destination                           &lt;==说明栏</div><div class="line">ACCEPT  all  --  0.0.0.0/0  0.0.0.0/0   state RELATED,ESTABLISHED &lt;==第 1 条规则</div><div class="line">ACCEPT  icmp --  0.0.0.0/0  0.0.0.0/0                             &lt;==第 2 条规则</div><div class="line">ACCEPT  all  --  0.0.0.0/0  0.0.0.0/0                             &lt;==第 3 条规则</div><div class="line">ACCEPT  tcp  --  0.0.0.0/0  0.0.0.0/0   state NEW tcp dpt:22      &lt;==以下类推</div><div class="line">REJECT  all  --  0.0.0.0/0  0.0.0.0/0   reject-with icmp-host-prohibited</div><div class="line"></div><div class="line">Chain FORWARD (policy ACCEPT)  &lt;==针对 FORWARD 链，且预设政策为可接受</div><div class="line">target  prot opt source     destination</div><div class="line">REJECT  all  --  0.0.0.0/0  0.0.0.0/0   reject-with icmp-host-prohibited</div><div class="line"></div><div class="line">Chain OUTPUT (policy ACCEPT)  &lt;==针对 OUTPUT 链，且预设政策为可接受</div><div class="line">target  prot opt source     destination</div><div class="line"></div><div class="line">范例：列出 nat table 三条链的规则</div><div class="line">[root@www ~]# iptables -t nat -L -n</div><div class="line">Chain PREROUTING (policy ACCEPT)</div><div class="line">target     prot opt source               destination</div><div class="line"></div><div class="line">Chain POSTROUTING (policy ACCEPT)</div><div class="line">target     prot opt source               destination</div><div class="line"></div><div class="line">Chain OUTPUT (policy ACCEPT)</div><div class="line">target     prot opt source               destination</div></pre></td></tr></table></figure><p>在上表中，每一个 Chain 就是前面提到的每个链， Chain 那一行里面括号的 policy 就是预设的政策， 那底下的 target, prot 释义如下：</p><ul><li>target：代表进行的动作， ACCEPT 是放行，而 REJECT 则是拒绝，此外，也有 DROP (丢弃) 的项目；</li><li>prot：代表使用的封包协议，主要有 tcp, udp 及 icmp 三种封包格式；</li><li>opt：额外的选项说明；</li><li>source ：代表此规则是针对哪个“来源 IP”进行限制；</li><li>destination ：代表此规则是针对哪个“目标 IP”进行限制。</li></ul><p>在输出结果中，第一个范例因为没有加上 -t 的选项，所以默认就是 filter 这个表格内的 INPUT, OUTPUT, FORWARD 三条链的规则。若针对单机来说，INPUT 与 FORWARD 算是比较重要的管制防火墙链， 所以你可以发现最后一条规则的政策是 REJECT (拒绝) 。虽然 INPUT 与 FORWARD 的政策是放行 (ACCEPT)， 不过在最后一条规则就已经将全部的封包都拒绝了。</p><p>不过这个指令的观察只是作个格式化的查阅，要详细解释每个规则会比较不容易解析。举例来说， 我们将 INPUT 的 5 条规则依据输出结果来说明一下，结果会变成：</p><ol><li>只要是封包状态为 RELATED,ESTABLISHED 就予以接受</li><li>只要封包协议是 icmp 类型的，就予以放行</li><li>无论任何来源 (0.0.0.0/0) 且要去任何目标的封包，不论任何封包格式 (prot 为 all)，通通都接受</li><li>只要是传给 port 22 的主动式联机 tcp 封包就接受</li><li>全部的封包信息通通拒绝</li></ol><p>可以看下第 3 条规则，怎么会所有的封包信息都予以接受，如果都接受的话，那么后续的规则根本就不会有用了。 其实那条规则是仅针对每部主机都有的内部循环测试网络 (lo) 接口。如果没有列出接口，那么我们就很容易搞错。 所以，建议使用 iptables-save 这个指令来观察防火墙规则。因为 iptables-save 会列出完整的防火墙规则，只是并没有规格化输出而已。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">[root@www ~]# iptables-save [-t table]</div><div class="line">选项与参数：</div><div class="line">-t ：可以仅针对某些表格来输出，例如仅针对 nat 或 filter 等等</div><div class="line"></div><div class="line">[root@www ~]# iptables-save</div><div class="line"><span class="meta">#</span><span class="bash"> Generated by iptables-save v1.4.7 on Fri Jul 22 15:51:52 2011</span></div><div class="line">*filter                      &lt;==星号开头的指的是表格，这里为 filter</div><div class="line">:INPUT ACCEPT [0:0]          &lt;==冒号开头的指的是链，三条内建的链</div><div class="line">:FORWARD ACCEPT [0:0]        &lt;==三条内建链的政策都是 ACCEPT </div><div class="line">:OUTPUT ACCEPT [680:100461]</div><div class="line">-A INPUT -m state --state RELATED,ESTABLISHED -j ACCEPT &lt;==针对 INPUT 的规则</div><div class="line">-A INPUT -p icmp -j ACCEPT</div><div class="line">-A INPUT -i lo -j ACCEPT  &lt;==这条很重要，针对本机内部接口开放</div><div class="line">-A INPUT -p tcp -m state --state NEW -m tcp --dport 22 -j ACCEPT</div><div class="line">-A INPUT -j REJECT --reject-with icmp-host-prohibited</div><div class="line">-A FORWARD -j REJECT --reject-with icmp-host-prohibited &lt;==针对 FORWARD 的规则</div><div class="line">COMMIT</div><div class="line"><span class="meta">#</span><span class="bash"> Completed on Fri Jul 22 15:51:52 2011</span></div></pre></td></tr></table></figure><p>其中，每个表都包含链和规则，链的详细说明是:<chain-name> <chain-policy> [<packet-counter>:<byte-counter>]，即[<packet-counter>:<byte-counter>]表示该链已经匹配了多少个 [包，字节]</byte-counter></packet-counter></byte-counter></packet-counter></chain-policy></chain-name></p><p>由上面的输出来看，在内容含有 lo 的那条规则当中，” -i lo” 指的就是由 lo 适配卡进来的封包, 这样看就清楚多了。 不过，既然这个规则不是我们想要的，下面看下如何修改规则</p><h4 id="清除规则"><a href="#清除规则" class="headerlink" title="清除规则:"></a>清除规则:</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">[root@www ~]# iptables [-t tables] [-FXZ]</div><div class="line">选项与参数：</div><div class="line">-F ：清除所有的已订定的规则；</div><div class="line">-X ：杀掉所有使用者 "自定义" 的 chain ；</div><div class="line">-Z ：将所有的 chain 的计数与流量统计都归零</div><div class="line"></div><div class="line">范例：清除本机防火墙 (filter) 的所有规则</div><div class="line">[root@www ~]# iptables -F</div><div class="line">[root@www ~]# iptables -X</div><div class="line">[root@www ~]# iptables -Z</div></pre></td></tr></table></figure><p>这三个指令会将本机防火墙的所有规则都清除，但却不会改变预设政策(policy)</p><h4 id="定义预设-policy"><a href="#定义预设-policy" class="headerlink" title="定义预设   (policy)"></a>定义预设   (policy)</h4><p>预设规则指当您的数据包不在您设定的规则之内时，则该包的通过与否，以 Policy 的设定为准</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">[root@www ~]# iptables [-t nat] -P [INPUT,OUTPUT,FORWARD] [ACCEPT,DROP]</div><div class="line">选项与参数：</div><div class="line">-P ：定义政策( Policy )。注意，这个 P 为大写</div><div class="line">ACCEPT ：该封包可接受</div><div class="line">DROP   ：该封包直接丢弃，不会让 client 端知道为何被丢弃。</div><div class="line"></div><div class="line">范例：将本机的 INPUT 设定为 DROP ，其他设定为 ACCEPT</div><div class="line">[root@www ~]# iptables -P INPUT   DROP</div><div class="line">[root@www ~]# iptables -P OUTPUT  ACCEPT</div><div class="line">[root@www ~]# iptables -P FORWARD ACCEPT</div><div class="line">[root@www ~]# iptables-save</div><div class="line"><span class="meta">#</span><span class="bash"> Generated by iptables-save v1.4.7 on Fri Jul 22 15:56:34 2011</span></div><div class="line">*filter</div><div class="line">:INPUT DROP [0:0]</div><div class="line">:FORWARD ACCEPT [0:0]</div><div class="line">:OUTPUT ACCEPT [0:0]</div><div class="line">COMMIT</div><div class="line"><span class="meta">#</span><span class="bash"> Completed on Fri Jul 22 15:56:34 2011</span></div></pre></td></tr></table></figure><h4 id="数据包的基础比对：IP-网域及接口装置"><a href="#数据包的基础比对：IP-网域及接口装置" class="headerlink" title="数据包的基础比对：IP, 网域及接口装置"></a>数据包的基础比对：IP, 网域及接口装置</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">[root@www ~]# iptables [-AI 链名] [-io 网络接口] [-p 协议] \</div><div class="line"><span class="meta">&gt;</span><span class="bash"> [-s 来源IP/网域] [-d 目标IP/网域] -j [ACCEPT|DROP|REJECT|LOG]</span></div><div class="line">选项与参数：</div><div class="line">-AI 链名：针对某的链进行规则的 "插入" 或 "累加"</div><div class="line">    -A ：新增加一条规则，该规则增加在原本规则的最后面。例如原本已经有四条规则，</div><div class="line">         使用 -A 就可以加上第五条规则！</div><div class="line">    -I ：插入一条规则。如果没有指定此规则的顺序，默认是插入变成第一条规则。</div><div class="line">         例如原本有四条规则，使用 -I 则该规则变成第一条，而原本四条变成 2~5 号</div><div class="line">    链 ：有 INPUT, OUTPUT, FORWARD 等，此链名称又与 -io 有关，请看底下。</div><div class="line"></div><div class="line">-io 网络接口：设定封包进出的接口规范</div><div class="line">    -i ：封包所进入的那个网络接口，例如 eth0, lo 等接口。需与 INPUT 链配合；</div><div class="line">    -o ：封包所传出的那个网络接口，需与 OUTPUT 链配合；</div><div class="line"></div><div class="line">-p 协定：设定此规则适用于哪种封包格式</div><div class="line">   主要的封包格式有： tcp, udp, icmp 及 all 。</div><div class="line"></div><div class="line">-s 来源 IP/网域：设定此规则之封包的来源项目，可指定单纯的 IP 或包括网域，例如：</div><div class="line">   IP  ：192.168.0.100</div><div class="line">   网域：192.168.0.0/24, 192.168.0.0/255.255.255.0 均可。</div><div class="line">   若规范为"不许"时，则加上 ! 即可，例如：</div><div class="line">   -s ! 192.168.100.0/24 表示不许 192.168.100.0/24 的封包来源；</div><div class="line"></div><div class="line">-d 目标 IP/网域：同 -s ，只不过这里指的是目标的 IP 或网域。</div><div class="line"></div><div class="line">-j ：后面接动作，主要的动作有接受(ACCEPT)、丢弃(DROP)、拒绝(REJECT)及记录(LOG)</div></pre></td></tr></table></figure><p>iptables 的基本参数就如同上面所示的，仅只谈到 IP 、网域与接口装置等等的信息， 至于 TCP, UDP  包特有的端口与状态则在下小节才会谈到。 好，先让我们来看看最基本的几个规则，例如开放 lo 这个本机的接口以及某个 IP 来源。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">范例一:所有的来自 lo 这个接口的数据包，都予以接受</div><div class="line">[root@linux ~]# iptables -A INPUT -i lo -j ACCEPT</div><div class="line"><span class="meta">#</span><span class="bash"> 仔细看上面并没有列出 -s, -d 等等的规则，这表示:不论本包来自何处或去到哪里， </span></div><div class="line"><span class="meta">#</span><span class="bash"> 只要是来自 lo 这个接口，就予以接受。</span></div><div class="line"></div><div class="line">范例：只要是来自内网的 (192.168.100.0/24) 的封包通通接受</div><div class="line">[root@www ~]# iptables -A INPUT -i eth1 -s 192.168.100.0/24 -j ACCEPT</div><div class="line"></div><div class="line">范例：只要是来自 192.168.100.10 就接受，但 192.168.100.230 这个恶意来源就丢弃</div><div class="line">[root@www ~]# iptables -A INPUT -i eth1 -s 192.168.100.10 -j ACCEPT</div><div class="line">[root@www ~]# iptables -A INPUT -i eth1 -s 192.168.100.230 -j DROP</div><div class="line"></div><div class="line">[root@www ~]# iptables-save</div><div class="line"><span class="meta">#</span><span class="bash"> Generated by iptables-save v1.4.7 on Fri Jul 22 16:00:43 2011</span></div><div class="line">*filter</div><div class="line">:INPUT DROP [0:0]</div><div class="line">:FORWARD ACCEPT [0:0]</div><div class="line">:OUTPUT ACCEPT [17:1724]</div><div class="line">-A INPUT -i lo -j ACCEPT</div><div class="line">-A INPUT -s 192.168.100.0/24 -i eth1 -j ACCEPT</div><div class="line">-A INPUT -s 192.168.100.10/32 -i eth1 -j ACCEPT</div><div class="line">-A INPUT -s 192.168.100.230/32 -i eth1 -j DROP</div><div class="line">COMMIT</div><div class="line"><span class="meta">#</span><span class="bash"> Completed on Fri Jul 22 16:00:43 2011</span></div></pre></td></tr></table></figure><h4 id="记录某个规则的日志"><a href="#记录某个规则的日志" class="headerlink" title="记录某个规则的日志"></a>记录某个规则的日志</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[root@linux ~]# iptables -A INPUT -s 192.168.2.200 -j LOG</div><div class="line"> </div><div class="line">[root@linux ~]# iptables -L -n</div><div class="line">target prot opt source         destination</div><div class="line">LOG    all  --  192.168.2.200  0.0.0.0/0   LOG flags 0 level 4</div></pre></td></tr></table></figure><p>看到输出结果的最左边，会出现的是 LOG 。只要有 包来自 192.168.2.200 这个 IP 时， 那么该 包<br>的相关信息就会被写入到日志中，亦即是 /var/log/messages 这个文件当中。LOG 这个动作仅在进行记录而已，并不会影响到这个数据包的其它规则比对的。</p><h4 id="TCP-UDP-的规则比对"><a href="#TCP-UDP-的规则比对" class="headerlink" title="TCP, UDP 的规则比对"></a>TCP, UDP 的规则比对</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">[root@linux ~]#  iptables [-AI 链] [-io 网络接口] [-p tcp,udp] </div><div class="line"><span class="meta">&gt;</span><span class="bash"> [-s 来源IP/网域] [--sport 端口范围] </span></div><div class="line"><span class="meta">&gt;</span><span class="bash"> [-d 目标IP/网域] [--dport 端口范围] -j [ACCEPT|DROP|REJECT]</span></div><div class="line"></div><div class="line">参数:</div><div class="line">选项与参数：</div><div class="line">--sport 端口范围：限制来源的端口号码，端口号码可以是连续的，例如 1024:65535</div><div class="line">--dport 端口范围：限制目标的端口号码。</div></pre></td></tr></table></figure><p>事实上就是多了那个 –sport 及 –dport 这两个选项，重点在那个 port number， 仅有 tcp 与 udp 封包具有端口，因此你想要使用 –dport, –sport 时，得要加上 -p tcp 或 -p udp 的参数才会成功。底下让我们来进行几个小测试:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">范例一:想要联机进入本机 port 21 的数据包都丢掉:</div><div class="line">[root@linux ~]# iptables -A INPUT -i eth0 -p tcp --dport 21 -j DROP</div><div class="line">范例二:想连到我这部主机的(upd port 137,138 tcp port 139,445) 就放行 </div><div class="line">[root@linux ~]# iptables -A INPUT -i eth0 -p udp --dport 137:138 -j ACCEPT </div><div class="line">[root@linux ~]# iptables -A INPUT -i eth0 -p tcp --dport 139 -j ACCEPT </div><div class="line">[root@linux ~]# iptables -A INPUT -i eth0 -p tcp --dport 445 -j ACCEPT</div></pre></td></tr></table></figure><p>你可以利用 UDP 与 TCP 协议所拥有的端口号码来进行某些服务的开放或关闭。</p><p>例如:只要来自 192.168.1.0/24 的 1024:65535 端口的数据包，只要想要联机到本机的 ssh port 就予以抵挡，可以这样做:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[root@linux ~]# iptables -A INPUT -i eth0 -p tcp -s 192.168.1.0/24 \</div><div class="line">  --sport 1024:65534 --dport ssh -j DROP</div></pre></td></tr></table></figure><p>如果你有使用到 –sport 及 –dport 的参数时，忘了指定 -p tcp 或 -p udp，就会出现如下的错误:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[root@k8s ~]# iptables -A INPUT -i eth0 --dport 21 -j DROP</div><div class="line">iptables v1.4.21: unknown option "--dport"</div><div class="line">Try `iptables -h' or 'iptables --help' for more information.</div></pre></td></tr></table></figure><p>在 iptables里面还支持 –syn 的处理方式，我们以底下的例子来说明:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">范例:将来自任何地方来源 port 1:1023 的主动联机到本机端的 1:1023  联机丢弃 </div><div class="line">[root@linux ~]# iptables -A INPUT -i eth0 -p tcp --sport 1:1023  \</div><div class="line">  --dport 1:1023 --syn -j DROP</div></pre></td></tr></table></figure><h4 id="状态模块-MAC-与-STATE"><a href="#状态模块-MAC-与-STATE" class="headerlink" title="状态模块:MAC 与 STATE"></a>状态模块:MAC 与 STATE</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">[root@linux ~]# iptables -A INPUT [-m state] [--state 状态]</div><div class="line">选项与参数：</div><div class="line">-m ：一些 iptables 的外挂模块，主要常见的有：</div><div class="line">     state ：状态模块</div><div class="line">     mac   ：网络卡硬件地址 (hardware address)</div><div class="line">--state ：一些数据包的状态，主要有：</div><div class="line">     INVALID    ：无效的数据包，例如数据破损的数据包状态</div><div class="line">     ESTABLISHED：已经联机成功的联机状态；</div><div class="line">     NEW        ：想要新建立联机的数据包状态；</div><div class="line">     RELATED    ：这个最常用，表示这个数据包是与我们主机发送出去的数据包有关</div><div class="line"></div><div class="line">范例:只要已建立或相关数据包就予以通过，只要是不合法数据包就丢弃</div><div class="line">[root@linux ~]# iptables -A INPUT -m state \</div><div class="line">--state RELATED,ESTABLISHED -j ACCEPT</div><div class="line">[root@linux ~]# iptables -A INPUT -m state --state INVALID -j DROP</div></pre></td></tr></table></figure><p>所以说，如果你的 Linux 主机只想要作为 client 的用途，不许所有主动对你联机的来源， 那么你可以这样做即可:</p><ol><li>清除所有已经存在的规则 (iptables -F…)</li><li>设定预设  ，除了 INPUT 预设为 DROP 其它为预设 ACCEPT;</li><li>开放本机的 lo 可以自由放行;</li><li>设定有相关的数据包状态可以联机进入本机。</li></ol><p>你可以在某个 script 上面这样做即可:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></div><div class="line">PATH=/sbin:/bin:/usr/sbin:/usr/bin  export PATH</div><div class="line">iptables -F</div><div class="line">iptables -X</div><div class="line">iptables -Z </div><div class="line">iptables -P INPUT DROP</div><div class="line">iptables -P OUTPUT ACCEPT</div><div class="line">iptables -P FORWARD ACCEPT</div><div class="line">iptables -A INPUT -i lo -j ACCEPT</div><div class="line">iptables -A INPUT -i eth0 -m state --state RELATED,ESTABLISHED -j ACCEPT</div><div class="line"><span class="meta">#</span><span class="bash">iptables -A INPUT -i eth0 -s 192.168.1.0/24 -j ACCEPT</span></div></pre></td></tr></table></figure><p>那如果局域网络内有其它的主机时，再将上表最后一行的 # 取消，就可以接受来自本地 LAN 的其它主机的联机了。 如果你担心某些 LAN 内的恶意来源主机会主动的对你联机时，那你还可以针对信任的本地端主机的 MAC 进行过滤。这次的状态则是 MAC 的比对。举例来说:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">范例一:针对 域网络内的 aa:bb:cc:dd:ee:ff 主机开放其联机</div><div class="line">[root@linux ~]# iptables -A INPUT -m mac --mac-source aa:bb:cc:dd:ee:ff  \</div><div class="line">  -j ACCEPT</div><div class="line">参数:</div><div class="line">--mac-source :是来源主机的 MAC .</div></pre></td></tr></table></figure><h4 id="ICMP-包规则的比对"><a href="#ICMP-包规则的比对" class="headerlink" title="ICMP  包规则的比对"></a>ICMP  包规则的比对</h4><p>在网络基 的 ICMP 协议当中我们知道 ICMP 的格式相当的多，而且很多 ICMP  包的类型格式都是为了<br>要用来进行网络 测用的。所以最好不要将所有的 ICMP 数据包都丢弃。通常我们会把 ICMP type 8 (echo<br>request) 拿掉而已，让远程主机不知道我们是否存在，也不会接受 ping 的响应就是了。ICMP  包格式<br>的处理是这样的:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">[root@linux ~]# iptables -A INPUT [-p icmp] [--icmp-type 类型] -j ACCEPT</div><div class="line"></div><div class="line">选项与参数：</div><div class="line">--icmp-type ：后面必须要接 ICMP 的数据包类型，也可以使用代号，</div><div class="line">              例如 8  代表 echo request 的意思。</div><div class="line"><span class="meta">#</span><span class="bash">范例:让 0,3,4,11,12,14,16,18 的 ICMP <span class="built_in">type</span> 可以进入 机: </span></div><div class="line">[root@linux ~]# vi somefile</div><div class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></div><div class="line">icmp_type= 0 3 4 11 12 14 16 18 </div><div class="line">for typeicmp in  icmp_type</div><div class="line">do</div><div class="line">   iptables -A INPUT -i eth0 -p icmp --icmp-type  typeicmp -j ACCEPT</div><div class="line">done</div><div class="line">[root@linux ~]# sh  somefile</div></pre></td></tr></table></figure><p>这样就能够开放部分的 ICMP 数据包格式进入本机进行网络检测的工作了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;iptables利用的是数据包过滤机制&lt;/p&gt;
    
    </summary>
    
      <category term="Linux" scheme="https://yangchenglong11.github.io/categories/Linux/"/>
    
    
      <category term="Linux" scheme="https://yangchenglong11.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>flag</title>
    <link href="https://yangchenglong11.github.io/2017/07/12/flag/"/>
    <id>https://yangchenglong11.github.io/2017/07/12/flag/</id>
    <published>2017-07-12T08:14:32.000Z</published>
    <updated>2018-02-12T12:04:12.447Z</updated>
    
    <content type="html"><![CDATA[<p><strong>flag</strong> 是Go 标准库提供的解析命令行参数的包。flag跟以往的传统命令行解析不同,它将参数定义, 参数默认值, 命令帮助, 参数读取集成到一起,摆脱以前繁琐的命令判断流程.</p><a id="more"></a><p><strong>使用方式：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">flag.Type(name, defValue, usage)</div></pre></td></tr></table></figure><p>其中Type为String, Int, Bool等；并返回一个相应类型的指针。</p><figure class="highlight sqf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">flag</span>.TypeVar(&amp;flagvar, <span class="built_in">name</span>, defValue, usage)</div></pre></td></tr></table></figure><p>将flag绑定到一个变量上。</p><p>##返回指针<br>通过flag.String, flag.Int, flag.Bool等可以直接返回一个参数指针,因此后续使用的时候需要加*进行取值:<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">str = flag.String(<span class="string">"mystring"</span>, <span class="string">"default-value"</span>, <span class="string">"mystring is my test flag of String"</span>)</div><div class="line">i = flag.Int(<span class="string">"myint"</span>, <span class="number">123</span>, <span class="string">"test int flag"</span>)</div></pre></td></tr></table></figure></p><p>##序列化到变量<br>通过flag.StringVar, flag.IntVar, flag.BoolVar等,可以直接把值序列化到变量:<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">   flag.StringVar(&amp;vStr, <span class="string">"mystring2"</span>, <span class="string">"default-value2"</span>, <span class="string">"mystring2 is my test flag of String"</span>)</div><div class="line">flag.IntVar(&amp;vI, <span class="string">"myint2"</span>, <span class="number">123</span>, <span class="string">"test int flag"</span>)</div></pre></td></tr></table></figure></p><p><strong>自定义flag</strong></p><p>只要实现flag.Value接口即可：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">type Value<span class="built_in"> interface </span>&#123;</div><div class="line">  String() string</div><div class="line">  <span class="builtin-name">Set</span>(string) error</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>通过如下方式定义该flag：</p><figure class="highlight delphi"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">flag.<span class="keyword">Var</span>(&amp;flagvar, <span class="keyword">name</span>, usage)</div></pre></td></tr></table></figure><p>example：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"><span class="keyword">import</span>(</div><div class="line"><span class="string">"flag"</span></div><div class="line"><span class="string">"fmt"</span></div><div class="line"><span class="string">"strconv"</span></div><div class="line">) </div><div class="line"></div><div class="line"><span class="keyword">type</span> percentage <span class="keyword">float32</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *percentage)</span> <span class="title">Set</span><span class="params">(s <span class="keyword">string</span>)</span> <span class="title">error</span></span> &#123;</div><div class="line">v, err := strconv.ParseFloat(s, <span class="number">32</span>)</div><div class="line">*p = percentage(v)</div><div class="line"><span class="keyword">return</span> err</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *percentage)</span> <span class="title">String</span><span class="params">()</span> <span class="title">string</span></span> &#123;</div><div class="line"><span class="keyword">return</span> fmt.Sprintf(<span class="string">"%f"</span>, *p) </div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">namePtr := flag.String(<span class="string">"name"</span>, <span class="string">"yang"</span>, <span class="string">"user's name"</span>)</div><div class="line">agePtr := flag.Int(<span class="string">"age"</span>, <span class="number">20</span>, <span class="string">"user's age"</span>)</div><div class="line">vipPtr := flag.Bool(<span class="string">"vip"</span>, <span class="literal">true</span>, <span class="string">"is a vip user"</span>)</div><div class="line"></div><div class="line"><span class="keyword">var</span> email <span class="keyword">string</span></div><div class="line"></div><div class="line">flag.StringVar(&amp;email, <span class="string">"email"</span>, <span class="string">"xxxxxx@gmail.com"</span>, <span class="string">"user's email"</span>)</div><div class="line"></div><div class="line"><span class="keyword">var</span> pop percentage</div><div class="line"></div><div class="line">flag.Var(&amp;pop, <span class="string">"pop"</span>, <span class="string">"popularity"</span>)</div><div class="line"></div><div class="line">flag.Parse()</div><div class="line"></div><div class="line">others := flag.Args()</div><div class="line">fmt.Println(<span class="string">"name:"</span>, *namePtr)</div><div class="line">fmt.Println(<span class="string">"age:"</span>, *agePtr)</div><div class="line">fmt.Println(<span class="string">"vip:"</span>, *vipPtr)</div><div class="line">fmt.Println(<span class="string">"pop:"</span>, pop)</div><div class="line">fmt.Println(<span class="string">"email:"</span>, email)</div><div class="line">fmt.Println(<span class="string">"other:"</span>, others)</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>输出：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> go run test.go </span></div><div class="line">name: yang</div><div class="line">age: 20</div><div class="line">vip: true</div><div class="line">email: xxxxxx@gmail.com</div><div class="line">other: []</div></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> go run test.go -name golang -age 4 -vip=<span class="literal">true</span> -pop 99 简洁 高并发 等等</span></div><div class="line">name: golang</div><div class="line">age: 4</div><div class="line">vip: true</div><div class="line">pop: 99</div><div class="line">email: lyhopq@gmail.com</div><div class="line">other: [简洁 高并发 等等]</div></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> go run test.go -h</span></div><div class="line">Usage of go /var/folders/6y/z4y473d12fj8ss2gkr276dx80000gn/T/go-build217780999/command-line-arguments/_obj/exe/test :</div><div class="line"> -age=20: user's age</div><div class="line"> -email="xxxxxx@gmail.com": user's email</div><div class="line"> -name="yang": user's name</div><div class="line"> -pop=0.0: popularity</div><div class="line"> -vip=true: is a vip user</div></pre></td></tr></table></figure><h1 id="pflag"><a href="#pflag" class="headerlink" title="pflag"></a>pflag</h1><p>pflag是flag扩展,主要是加入了对短参数的支持.</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">go get github.com/ogier/pflag</div></pre></td></tr></table></figure><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">go <span class="built_in">test</span> github.com/ogier/pflag</div></pre></td></tr></table></figure><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>如果你之前已经import了flag包,那么直接把那行改为:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> flag <span class="string">"github.com/ogier/pflag"</span></div></pre></td></tr></table></figure><h2 id="短参数支持"><a href="#短参数支持" class="headerlink" title="短参数支持"></a>短参数支持</h2><p>在函数后面加上P即可:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">   pflag.StringVarP(&amp;p1, <span class="string">"stringflag"</span>, <span class="string">"s"</span>, <span class="string">"test-p-flag-string"</span>, <span class="string">"test pflag for string."</span>)</div><div class="line">pflag.IntVarP(&amp;p2, <span class="string">"intflag"</span>, <span class="string">"i"</span>, <span class="number">12345</span>, <span class="string">"test pflag for int."</span>)</div></pre></td></tr></table></figure><h2 id="程序运行结果"><a href="#程序运行结果" class="headerlink" title="程序运行结果"></a>程序运行结果</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ go run main.go</div><div class="line"></div><div class="line">Usage of /private/var/folders/98/pmb6b_8x5w5319m9ts6h6z6m0000gn/T/Build main.go and run1go:</div><div class="line">  -i, --intflag=12345: <span class="built_in">test</span> pflag <span class="keyword">for</span> int.</div><div class="line">  -s, --stringflag=<span class="string">"test-p-flag-string"</span>: <span class="built_in">test</span> pflag <span class="keyword">for</span> string.</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;flag&lt;/strong&gt; 是Go 标准库提供的解析命令行参数的包。flag跟以往的传统命令行解析不同,它将参数定义, 参数默认值, 命令帮助, 参数读取集成到一起,摆脱以前繁琐的命令判断流程.&lt;/p&gt;
    
    </summary>
    
      <category term="Golang" scheme="https://yangchenglong11.github.io/categories/Golang/"/>
    
    
      <category term="Golang" scheme="https://yangchenglong11.github.io/tags/Golang/"/>
    
  </entry>
  
  <entry>
    <title>channel示例之GoTocket</title>
    <link href="https://yangchenglong11.github.io/2017/05/26/channel%E7%A4%BA%E4%BE%8B%E4%B9%8BGoTocket/"/>
    <id>https://yangchenglong11.github.io/2017/05/26/channel示例之GoTocket/</id>
    <published>2017-05-26T03:54:34.000Z</published>
    <updated>2017-10-28T14:02:48.428Z</updated>
    
    <content type="html"><![CDATA[<p>该代码为批量处理人员信息，即将人员信息中的居住地进行统一处理。</p><a id="more"></a><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div><div class="line">284</div><div class="line">285</div><div class="line">286</div><div class="line">287</div><div class="line">288</div><div class="line">289</div><div class="line">290</div><div class="line">291</div><div class="line">292</div><div class="line">293</div><div class="line">294</div><div class="line">295</div><div class="line">296</div><div class="line">297</div><div class="line">298</div><div class="line">299</div><div class="line">300</div><div class="line">301</div><div class="line">302</div><div class="line">303</div><div class="line">304</div><div class="line">305</div><div class="line">306</div><div class="line">307</div><div class="line">308</div><div class="line">309</div><div class="line">310</div><div class="line">311</div><div class="line">312</div><div class="line">313</div><div class="line">314</div><div class="line">315</div><div class="line">316</div><div class="line">317</div><div class="line">318</div><div class="line">319</div><div class="line">320</div><div class="line">321</div><div class="line">322</div><div class="line">323</div><div class="line">324</div><div class="line">325</div><div class="line">326</div><div class="line">327</div><div class="line">328</div><div class="line">329</div><div class="line">330</div><div class="line">331</div><div class="line">332</div><div class="line">333</div><div class="line">334</div><div class="line">335</div><div class="line">336</div><div class="line">337</div><div class="line">338</div><div class="line">339</div><div class="line">340</div><div class="line">341</div><div class="line">342</div><div class="line">343</div><div class="line">344</div><div class="line">345</div><div class="line">346</div><div class="line">347</div><div class="line">348</div><div class="line">349</div><div class="line">350</div><div class="line">351</div><div class="line">352</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line"><span class="string">"fmt"</span></div><div class="line"><span class="string">"time"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="comment">//定义员工数据结构</span></div><div class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</div><div class="line">Name    <span class="keyword">string</span></div><div class="line">Age     <span class="keyword">uint8</span></div><div class="line">Address Addr</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//定义地址数据结构</span></div><div class="line"><span class="keyword">type</span> Addr <span class="keyword">struct</span> &#123;</div><div class="line">city     <span class="keyword">string</span></div><div class="line">district <span class="keyword">string</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//定义处理接口，方法Batch被声明为实现批量处理人员信息功能的方法，</span></div><div class="line"><span class="comment">//其方法声明中的两个通道分别对该方法和该方法的调用方使用它的方式进行了约束</span></div><div class="line"><span class="keyword">type</span> PersonHandler <span class="keyword">interface</span> &#123;</div><div class="line">Batch(origs &lt;-<span class="keyword">chan</span> Person) &lt;-<span class="keyword">chan</span> Person</div><div class="line">Handle(orig *Person)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//定义空结构体，为其添加方法，实现PersonHandler接口</span></div><div class="line"><span class="keyword">type</span> PersonHandlerImpl <span class="keyword">struct</span>&#123;&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(handler PersonHandlerImpl)</span> <span class="title">Batch</span><span class="params">(origs &lt;-<span class="keyword">chan</span> Person)</span> &lt;-<span class="title">chan</span> <span class="title">Person</span></span> &#123;</div><div class="line">dests := <span class="built_in">make</span>(<span class="keyword">chan</span> Person, <span class="number">100</span>)</div><div class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</div><div class="line"><span class="keyword">for</span> p := <span class="keyword">range</span> origs &#123;</div><div class="line">handler.Handle(&amp;p)</div><div class="line">dests &lt;- p</div><div class="line">&#125;</div><div class="line">fmt.Println(<span class="string">"All the information has been handled."</span>)</div><div class="line"><span class="comment">//在发送方关闭通道</span></div><div class="line"><span class="built_in">close</span>(dests)</div><div class="line">&#125;()</div><div class="line"><span class="keyword">return</span> dests</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(handler PersonHandlerImpl)</span> <span class="title">Handle</span><span class="params">(orig *Person)</span></span> &#123;</div><div class="line"><span class="keyword">if</span> orig.Address.district == <span class="string">"Haidian"</span> &#123;</div><div class="line">orig.Address.district = <span class="string">"Shijingshan"</span></div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//定义要被处理的数据并初始化</span></div><div class="line"><span class="keyword">var</span> personTotal = <span class="number">200</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> persons []Person = <span class="built_in">make</span>([]Person, personTotal)</div><div class="line"></div><div class="line"><span class="keyword">var</span> personCount <span class="keyword">int</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</div><div class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">200</span>; i++ &#123;</div><div class="line">name := fmt.Sprintf(<span class="string">"%s%d"</span>, <span class="string">"P"</span>, i)</div><div class="line">p := Person&#123;name, <span class="number">32</span>, Addr&#123;<span class="string">"Beijing"</span>, <span class="string">"Haidian"</span>&#125;&#125;</div><div class="line">persons[i] = p</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//main函数中首先获取handler，初始化origs通道，将人员信息通过origs通道传入</span></div><div class="line"><span class="comment">//Batch中处理，处理后的信息放入dests通道中，并将dests通道返回。</span></div><div class="line"><span class="comment">//通道初始化完成后，fecthPerson获取人员信息放入到origs中，savePerson从dests中接收处理过的信息进行保存</span></div><div class="line"><span class="comment">//其中sign通道作用为在批处理完全执行结束之前阻塞主Goroutine</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">handler := getPersonHandler()</div><div class="line">origs := <span class="built_in">make</span>(<span class="keyword">chan</span> Person, <span class="number">100</span>)</div><div class="line">dests := handler.Batch(origs)</div><div class="line">fecthPerson(origs)</div><div class="line">sign := savePerson(dests)</div><div class="line">&lt;-sign</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">getPersonHandler</span><span class="params">()</span> <span class="title">PersonHandler</span></span> &#123;</div><div class="line"><span class="keyword">return</span> PersonHandlerImpl&#123;&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">savePerson</span><span class="params">(dest &lt;-<span class="keyword">chan</span> Person)</span> &lt;-<span class="title">chan</span> <span class="title">byte</span></span> &#123;</div><div class="line">sign := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">byte</span>, <span class="number">1</span>)</div><div class="line"></div><div class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</div><div class="line">ok := <span class="literal">true</span></div><div class="line"><span class="keyword">var</span> p Person</div><div class="line"><span class="keyword">for</span> &#123;</div><div class="line"><span class="keyword">select</span> &#123;</div><div class="line"><span class="keyword">case</span> p, ok = &lt;-dest:</div><div class="line">&#123;</div><div class="line"><span class="keyword">if</span> !ok &#123;</div><div class="line">fmt.Println(<span class="string">"All the information has been saved."</span>)</div><div class="line">sign &lt;- <span class="number">0</span></div><div class="line"><span class="keyword">break</span></div><div class="line">&#125;</div><div class="line">savePerson1(p)</div><div class="line">&#125;</div><div class="line"><span class="keyword">case</span> ok = &lt;-<span class="function"><span class="keyword">func</span><span class="params">()</span> <span class="title">chan</span> <span class="title">bool</span></span> &#123;</div><div class="line">timeout := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">bool</span>, <span class="number">1</span>)</div><div class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</div><div class="line">time.Sleep(time.Millisecond)</div><div class="line">timeout &lt;- <span class="literal">false</span></div><div class="line">&#125;()</div><div class="line"><span class="keyword">return</span> timeout</div><div class="line">&#125;() :</div><div class="line">fmt.Println(<span class="string">"TimeOut!"</span>)</div><div class="line">sign &lt;- <span class="number">0</span></div><div class="line"><span class="keyword">break</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">if</span> !ok &#123;</div><div class="line"><span class="keyword">break</span></div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;()</div><div class="line"><span class="keyword">return</span> sign</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">fecthPerson</span><span class="params">(origs <span class="keyword">chan</span>&lt;- Person)</span></span> &#123;</div><div class="line"><span class="comment">//调用cap函数确定origs是否为缓冲通道</span></div><div class="line">origsCap := <span class="built_in">cap</span>(origs)</div><div class="line">buffered := origsCap &gt; <span class="number">0</span></div><div class="line"><span class="comment">//以origsCap的一半作为Goroutine票池的总数，创建票池</span></div><div class="line">goTicketTotal := origsCap / <span class="number">2</span></div><div class="line">goTicket := initGoTicket(goTicketTotal)</div><div class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</div><div class="line"><span class="keyword">for</span> &#123;</div><div class="line">p, ok := fecthPerson1()</div><div class="line"><span class="keyword">if</span> !ok &#123;</div><div class="line"><span class="keyword">for</span> &#123;</div><div class="line"><span class="comment">//如果为非缓冲通道或者所有goroutine已完成工作，跳出循环</span></div><div class="line"><span class="keyword">if</span> !buffered || <span class="built_in">len</span>(goTicket) == goTicketTotal &#123;</div><div class="line"><span class="keyword">break</span></div><div class="line">&#125;</div><div class="line">time.Sleep(time.Nanosecond)</div><div class="line">&#125;</div><div class="line">fmt.Println(<span class="string">"All the information has been fetched."</span>)</div><div class="line"><span class="comment">//在发送方关闭通道</span></div><div class="line"><span class="built_in">close</span>(origs)</div><div class="line"><span class="keyword">break</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//如果为缓冲通道，从goTicket接受一个值，表示有一个goroutine被占用</span></div><div class="line"><span class="comment">//当操作完成后，向其中发送一个值，表示接解除占用</span></div><div class="line"><span class="keyword">if</span> buffered &#123;</div><div class="line">&lt;-goTicket</div><div class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</div><div class="line">origs &lt;- p</div><div class="line">goTicket &lt;- <span class="number">1</span></div><div class="line">&#125;()</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">origs &lt;- p</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;()</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//goTicket是为了限制该程序启用的goroutine的数量而声明的一个缓冲通道</span></div><div class="line"><span class="comment">//根据传进来的total初始化通道，total即表示可以启用goroutine数量</span></div><div class="line"><span class="comment">//每当启用一个goroutine时从该通道中接受一个值表示可用goroutine少了一个</span></div><div class="line"><span class="comment">//即每个goroutine要想启动必须要有ticket。上述是在origs为缓冲条件下，即整个过程为异步完成情况下</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">initGoTicket</span><span class="params">(total <span class="keyword">int</span>)</span> <span class="title">chan</span> <span class="title">byte</span></span> &#123;</div><div class="line"><span class="keyword">var</span> goTicket <span class="keyword">chan</span> <span class="keyword">byte</span></div><div class="line"><span class="keyword">if</span> total == <span class="number">0</span> &#123;</div><div class="line"><span class="keyword">return</span> goTicket</div><div class="line">&#125;</div><div class="line">goTicket = <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">byte</span>, total)</div><div class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; total; i++ &#123;</div><div class="line">goTicket &lt;- <span class="number">1</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> goTicket</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">fecthPerson1</span><span class="params">()</span> <span class="params">(Person, <span class="keyword">bool</span>)</span></span> &#123;</div><div class="line"><span class="keyword">if</span> personCount &lt; personTotal &#123;</div><div class="line">p := persons[personCount]</div><div class="line">personCount++</div><div class="line"><span class="keyword">return</span> p, <span class="literal">true</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> Person&#123;&#125;, <span class="literal">false</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">savePerson1</span><span class="params">(p Person)</span> <span class="title">bool</span></span> &#123;</div><div class="line"><span class="keyword">return</span> <span class="literal">true</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line"><span class="string">"fmt"</span></div><div class="line"><span class="string">"time"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="comment">//定义员工数据结构</span></div><div class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</div><div class="line">Name    <span class="keyword">string</span></div><div class="line">Age     <span class="keyword">uint8</span></div><div class="line">Address Addr</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//定义地址数据结构</span></div><div class="line"><span class="keyword">type</span> Addr <span class="keyword">struct</span> &#123;</div><div class="line">city     <span class="keyword">string</span></div><div class="line">district <span class="keyword">string</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//定义处理接口，方法Batch被声明为实现批量处理人员信息功能的方法，</span></div><div class="line"><span class="comment">//其方法声明中的两个通道分别对该方法和该方法的调用方使用它的方式进行了约束</span></div><div class="line"><span class="keyword">type</span> PersonHandler <span class="keyword">interface</span> &#123;</div><div class="line">Batch(origs &lt;-<span class="keyword">chan</span> Person) &lt;-<span class="keyword">chan</span> Person</div><div class="line">Handle(orig *Person)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//定义空结构体，为其添加方法，实现PersonHandler接口</span></div><div class="line"><span class="keyword">type</span> PersonHandlerImpl <span class="keyword">struct</span>&#123;&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(handler PersonHandlerImpl)</span> <span class="title">Batch</span><span class="params">(origs &lt;-<span class="keyword">chan</span> Person)</span> &lt;-<span class="title">chan</span> <span class="title">Person</span></span> &#123;</div><div class="line">dests := <span class="built_in">make</span>(<span class="keyword">chan</span> Person, <span class="number">100</span>)</div><div class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</div><div class="line"><span class="keyword">for</span> p := <span class="keyword">range</span> origs &#123;</div><div class="line">handler.Handle(&amp;p)</div><div class="line">dests &lt;- p</div><div class="line">&#125;</div><div class="line">fmt.Println(<span class="string">"All the information has been handled."</span>)</div><div class="line"><span class="comment">//在发送方关闭通道</span></div><div class="line"><span class="built_in">close</span>(dests)</div><div class="line">&#125;()</div><div class="line"><span class="keyword">return</span> dests</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(handler PersonHandlerImpl)</span> <span class="title">Handle</span><span class="params">(orig *Person)</span></span> &#123;</div><div class="line"><span class="keyword">if</span> orig.Address.district == <span class="string">"Haidian"</span> &#123;</div><div class="line">orig.Address.district = <span class="string">"Shijingshan"</span></div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//定义要被处理的数据并初始化</span></div><div class="line"><span class="keyword">var</span> personTotal = <span class="number">200</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> persons []Person = <span class="built_in">make</span>([]Person, personTotal)</div><div class="line"></div><div class="line"><span class="keyword">var</span> personCount <span class="keyword">int</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</div><div class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">200</span>; i++ &#123;</div><div class="line">name := fmt.Sprintf(<span class="string">"%s%d"</span>, <span class="string">"P"</span>, i)</div><div class="line">p := Person&#123;name, <span class="number">32</span>, Addr&#123;<span class="string">"Beijing"</span>, <span class="string">"Haidian"</span>&#125;&#125;</div><div class="line">persons[i] = p</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//main函数中首先获取handler，初始化origs通道，将人员信息通过origs通道传入</span></div><div class="line"><span class="comment">//Batch中处理，处理后的信息放入dests通道中，并将dests通道返回。</span></div><div class="line"><span class="comment">//通道初始化完成后，fecthPerson获取人员信息放入到origs中，savePerson从dests中接收处理过的信息进行保存</span></div><div class="line"><span class="comment">//其中sign通道作用为在批处理完全执行结束之前阻塞主Goroutine</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">handler := getPersonHandler()</div><div class="line">origs := <span class="built_in">make</span>(<span class="keyword">chan</span> Person, <span class="number">100</span>)</div><div class="line">dests := handler.Batch(origs)</div><div class="line">fecthPerson(origs)</div><div class="line">sign := savePerson(dests)</div><div class="line">&lt;-sign</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">getPersonHandler</span><span class="params">()</span> <span class="title">PersonHandler</span></span> &#123;</div><div class="line"><span class="keyword">return</span> PersonHandlerImpl&#123;&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">savePerson</span><span class="params">(dest &lt;-<span class="keyword">chan</span> Person)</span> &lt;-<span class="title">chan</span> <span class="title">byte</span></span> &#123;</div><div class="line">sign := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">byte</span>, <span class="number">1</span>)</div><div class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</div><div class="line"><span class="keyword">for</span> &#123;</div><div class="line">p, ok := &lt;-dest</div><div class="line"><span class="keyword">if</span> !ok &#123;</div><div class="line">fmt.Println(<span class="string">"All the information has been saved."</span>)</div><div class="line">sign &lt;- <span class="number">0</span></div><div class="line"><span class="keyword">break</span></div><div class="line">&#125;</div><div class="line">savePerson1(p)</div><div class="line">&#125;</div><div class="line">&#125;()</div><div class="line"><span class="keyword">return</span> sign</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">fecthPerson</span><span class="params">(origs <span class="keyword">chan</span>&lt;- Person)</span></span> &#123;</div><div class="line"><span class="comment">//调用cap函数确定origs是否为缓冲通道</span></div><div class="line">origsCap := <span class="built_in">cap</span>(origs)</div><div class="line">buffered := origsCap &gt; <span class="number">0</span></div><div class="line"><span class="comment">//以origsCap的一半作为Goroutine票池的总数，创建票池</span></div><div class="line">goTicketTotal := origsCap / <span class="number">2</span></div><div class="line">goTicket := initGoTicket(goTicketTotal)</div><div class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</div><div class="line"><span class="keyword">for</span> &#123;</div><div class="line">p, ok := fecthPerson1()</div><div class="line"><span class="keyword">if</span> !ok &#123;</div><div class="line"><span class="keyword">for</span> &#123;</div><div class="line"><span class="comment">//如果为非缓冲通道或者所有goroutine已完成工作，跳出循环</span></div><div class="line"><span class="keyword">if</span> !buffered || <span class="built_in">len</span>(goTicket) == goTicketTotal &#123;</div><div class="line"><span class="keyword">break</span></div><div class="line">&#125;</div><div class="line">time.Sleep(time.Nanosecond)</div><div class="line">&#125;</div><div class="line">fmt.Println(<span class="string">"All the information has been fetched."</span>)</div><div class="line"><span class="comment">//在发送方关闭通道</span></div><div class="line"><span class="built_in">close</span>(origs)</div><div class="line"><span class="keyword">break</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//如果为缓冲通道，从goTicket接受一个值，表示有一个goroutine被占用</span></div><div class="line"><span class="comment">//当操作完成后，向其中发送一个值，表示接解除占用</span></div><div class="line"><span class="keyword">if</span> buffered &#123;</div><div class="line">&lt;-goTicket</div><div class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</div><div class="line">origs &lt;- p</div><div class="line">goTicket &lt;- <span class="number">1</span></div><div class="line">&#125;()</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">origs &lt;- p</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;()</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//goTicket是为了限制该程序启用的goroutine的数量而声明的一个缓冲通道</span></div><div class="line"><span class="comment">//根据传进来的total初始化通道，total即表示可以启用goroutine数量</span></div><div class="line"><span class="comment">//每当启用一个goroutine时从该通道中接受一个值表示可用goroutine少了一个</span></div><div class="line"><span class="comment">//即每个goroutine要想启动必须要有ticket。上述是在origs为缓冲条件下，即整个过程为异步完成情况下</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">initGoTicket</span><span class="params">(total <span class="keyword">int</span>)</span> <span class="title">chan</span> <span class="title">byte</span></span> &#123;</div><div class="line"><span class="keyword">var</span> goTicket <span class="keyword">chan</span> <span class="keyword">byte</span></div><div class="line"><span class="keyword">if</span> total == <span class="number">0</span> &#123;</div><div class="line"><span class="keyword">return</span> goTicket</div><div class="line">&#125;</div><div class="line">goTicket = <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">byte</span>, total)</div><div class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; total; i++ &#123;</div><div class="line">goTicket &lt;- <span class="number">1</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> goTicket</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">fecthPerson1</span><span class="params">()</span> <span class="params">(Person, <span class="keyword">bool</span>)</span></span> &#123;</div><div class="line"><span class="keyword">if</span> personCount &lt; personTotal &#123;</div><div class="line">p := persons[personCount]</div><div class="line">personCount++</div><div class="line"><span class="keyword">return</span> p, <span class="literal">true</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> Person&#123;&#125;, <span class="literal">false</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">savePerson1</span><span class="params">(p Person)</span> <span class="title">bool</span></span> &#123;</div><div class="line"><span class="keyword">return</span> <span class="literal">true</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;该代码为批量处理人员信息，即将人员信息中的居住地进行统一处理。&lt;/p&gt;
    
    </summary>
    
      <category term="Golang" scheme="https://yangchenglong11.github.io/categories/Golang/"/>
    
    
      <category term="Golang" scheme="https://yangchenglong11.github.io/tags/Golang/"/>
    
  </entry>
  
  <entry>
    <title>cobra</title>
    <link href="https://yangchenglong11.github.io/2017/05/16/cobra/"/>
    <id>https://yangchenglong11.github.io/2017/05/16/cobra/</id>
    <published>2017-05-16T10:14:34.000Z</published>
    <updated>2018-02-12T12:03:04.868Z</updated>
    
    <content type="html"><![CDATA[<p>cobra是一个命令行框架, 它可以生成和解析命令行。 Cobra具有非常干净的界面和简单的设计，而不需要不必要的构造函数或初始化方法。</p><a id="more"></a><p>用Cobra命令构建的应用程序被设计成尽可能方便用户使用。可以在命令之前或之后放置flag。可以使用短的和长的flag。命令甚至不需要完全键入，help是自动生成的，它是应用程序使用help命令或–help flag时调用的特定命令.</p><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>Cobra是建立在命令、参数结构之上的。</p><p>Commands代表行动，Args是事物，Flags表示对行为的修饰。</p><p>比较好的应用程序使用起来就像句子一样。用户将知道如何使用应用程序因为他们本来就知道如何使用它。</p><p>一般模式就像下面一样：</p><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="comment">VERB</span> <span class="comment">NOUN</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">ADJECTIVE</span><span class="string">.</span> <span class="comment">or</span> <span class="comment">APPNAME</span> <span class="comment">COMMAND</span> <span class="comment">ARG</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">FLAG</span></div></pre></td></tr></table></figure><p>一些好的现实世界的例子可以更好地说明这一点。</p><p>在下面的例子中，server 是一个命令， port是一个参数</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hugo server --port=1313</div></pre></td></tr></table></figure><h3 id="Commands"><a href="#Commands" class="headerlink" title="Commands"></a>Commands</h3><p>命令是应用程序的中心点。应用程序支持的每个交互都将包含在命令中。命令可以拥有子命令并且可选地运行操作。</p><p>命令具有以下结构：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">type</span> Command <span class="keyword">struct</span> &#123;</div><div class="line">    Use <span class="keyword">string</span> <span class="comment">// The one-line usage message.</span></div><div class="line">    Short <span class="keyword">string</span> <span class="comment">// The short description shown in the 'help' output.</span></div><div class="line">    Long <span class="keyword">string</span> <span class="comment">// The long message shown in the 'help &lt;this-command&gt;' output.</span></div><div class="line">    Run <span class="function"><span class="keyword">func</span><span class="params">(cmd *Command, args []<span class="keyword">string</span>)</span> // <span class="title">Run</span> <span class="title">runs</span> <span class="title">the</span> <span class="title">command</span>.</span></div><div class="line"><span class="function">&#125;</span></div></pre></td></tr></table></figure><h3 id="flags"><a href="#flags" class="headerlink" title="flags"></a>flags</h3><p>flags是修改命令行为的一种方式。Cobra完全兼容POSIX命令行模式以及flags。</p><p>flag的功能由pflag库提供，它是flag标准库的一个fork，保持相同的接口的同时兼容POSIX标准。</p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>Cobra的工作原理是创建一组命令，然后将它们组织成一棵树。命令树树定义应用程序的结构。</p><p>一旦每个命令都定义了相应的flag，那么树将被分配给最终执行的command。</p><h3 id="Cobra提供的功能"><a href="#Cobra提供的功能" class="headerlink" title="Cobra提供的功能"></a>Cobra提供的功能</h3><ul><li>简易的子命令行模式，如 app server， app fetch等等</li><li>完全兼容posix命令行模式</li><li>嵌套子命令subcommand</li><li>支持全局，局部，串联flags</li><li>使用Cobra很容易的生成应用程序和命令，使用cobra create appname和cobra add cmdname</li><li>如果命令输入错误，将提供智能建议，如 app srver，将提示srver没有，是否是app server</li><li>自动生成commands和flags的帮助信息</li><li>自动生成详细的help信息，如app help</li><li>自动识别-h，–help帮助flag</li><li>自动生成应用程序在bash下命令自动完成功能</li><li>自动生成应用程序的man手册</li><li>命令行别名</li><li>自定义help和usage信息</li><li>可选的紧密集成的<a href="http://www.ctolib.com/http://github.com/spf13/viper" target="_blank" rel="external">viper</a> apps</li></ul><h3 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h3><p>下面简单介绍一下如何使用Cobra，基本能够满足一般命令行程序的需求，如果需要更多功能，可以研究一下源码<a href="http://www.ctolib.com/https://github.com/spf13/cobra" target="_blank" rel="external">github</a>。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>cobra的源工程地址在github.com/spf13/cobra/cobra, 同其他Go开源项目一样,我们通过go get来拉取:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ <span class="keyword">go</span> get -u github.com/spf13/cobra/cobra</div></pre></td></tr></table></figure><p>安装完成后，打开GOPATH目录，bin目录下应该有已经编译好的cobra或cobra.exe程序，当然你也可以使用源代码自己生成一个最新的cobra程序。</p><p>通过下面语句import到工程:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> <span class="string">"github.com/spf13/cobra"</span></div></pre></td></tr></table></figure><h2 id="通过cobra命令生成工程"><a href="#通过cobra命令生成工程" class="headerlink" title="通过cobra命令生成工程"></a>通过cobra命令生成工程</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> cobra init cobra-demo</span></div><div class="line">Your Cobra application is ready at</div><div class="line">/Users/yang/lib/go/src/cobra-demo</div><div class="line">Give it a try by going there and running `go run main.go`</div><div class="line">Add commands to it by running `cobra add [cmdname]`</div></pre></td></tr></table></figure><p>生成后的工程目录结构如下:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> tree cobra-demo</span></div><div class="line">cobra-demo</div><div class="line">├── LICENSE</div><div class="line">├── cmd</div><div class="line">│   └── root.go</div><div class="line">└── main.go</div></pre></td></tr></table></figure><p>cobra生成的工程, 默认文件都放在cmd目录下, 以root.go作为根命令. cobra可以嵌套<a href="https://github.com/ShevYan/GoTutor/blob/master/flag-demo" target="_blank" rel="external">flag</a>, <a href="https://github.com/ShevYan/GoTutor/blob/master/pflag-demo" target="_blank" rel="external">pflag</a>, <a href="https://github.com/ShevYan/GoTutor/blob/master/viper-demo" target="_blank" rel="external">viper</a>一起使用. 其中init()里面调用了initConfig(), 并可以调用pflag:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</div><div class="line">cobra.OnInitialize(initConfig)</div><div class="line"></div><div class="line"><span class="comment">// Here you will define your flags and configuration settings.</span></div><div class="line"><span class="comment">// Cobra supports Persistent Flags, which, if defined here,</span></div><div class="line"><span class="comment">// will be global for your application.</span></div><div class="line"></div><div class="line">RootCmd.PersistentFlags().StringVar(&amp;cfgFile, <span class="string">"config"</span>, <span class="string">""</span>, <span class="string">"config file (default is $HOME/.cobra-demo.yaml)"</span>)</div><div class="line"><span class="comment">// Cobra also supports local flags, which will only run</span></div><div class="line"><span class="comment">// when this action is called directly.</span></div><div class="line">RootCmd.Flags().BoolP(<span class="string">"toggle"</span>, <span class="string">"t"</span>, <span class="literal">false</span>, <span class="string">"Help message for toggle"</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>flag的操作中, 分为全局的flag和当前子命令的flag. 什么是子命令呢? cobra支持多级子命令, 比如: mycmd sub1 sub2, 其中mycmd是根命令, sub1是mycmd的子命令, sub2是sub1的子命令. 因此, RootCmd.PersistentFlags()是一个全局flag, RootCmd.Flags()是当前命令的flag. 由于是根命令,其实二者是相同的, 但是如果在子命令中, 二者是不同的.</p><p>下面是使用viper的地方:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// initConfig reads in config file and ENV variables if set.</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">initConfig</span><span class="params">()</span></span> &#123;</div><div class="line"><span class="keyword">if</span> cfgFile != <span class="string">""</span> &#123; <span class="comment">// enable ability to specify config file via flag</span></div><div class="line">viper.SetConfigFile(cfgFile)</div><div class="line">&#125;</div><div class="line"></div><div class="line">viper.SetConfigName(<span class="string">".cobra-demo"</span>) <span class="comment">// name of config file (without extension)</span></div><div class="line">viper.AddConfigPath(<span class="string">"$HOME"</span>)  <span class="comment">// adding home directory as first search path</span></div><div class="line">viper.AutomaticEnv()          <span class="comment">// read in environment variables that match</span></div><div class="line"></div><div class="line"><span class="comment">// If a config file is found, read it in.</span></div><div class="line"><span class="keyword">if</span> err := viper.ReadInConfig(); err == <span class="literal">nil</span> &#123;</div><div class="line">fmt.Println(<span class="string">"Using config file:"</span>, viper.ConfigFileUsed())</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>cobra对象初始化:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// This represents the base command when called without any subcommands</span></div><div class="line"><span class="keyword">var</span> RootCmd = &amp;cobra.Command&#123;</div><div class="line">Use:   <span class="string">"cobra-demo"</span>,</div><div class="line">Short: <span class="string">"A brief description of your application"</span>,</div><div class="line">Long: <span class="string">`A longer description that spans multiple lines and likely contains</span></div><div class="line"><span class="string">demos and usage of using your application. For demo:</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">Cobra is a CLI library for Go that empowers applications.</span></div><div class="line"><span class="string">This application is a tool to generate the needed files</span></div><div class="line"><span class="string">to quickly create a Cobra application.`</span>,</div><div class="line"><span class="comment">// Uncomment the following line if your bare application</span></div><div class="line"><span class="comment">// has an action associated with it:</span></div><div class="line">Run: <span class="function"><span class="keyword">func</span><span class="params">(cmd *cobra.Command, args []<span class="keyword">string</span>)</span></span> &#123; &#125;,</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>上面这个对象就是cobra的根命令对象, 默认生成的时候Run字段是被注释的, 打开以后就可以在函数里面写入自己的处理函数. 下面是运行结果:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> go run main.go -h</span></div><div class="line">A longer description that spans multiple lines and likely contains</div><div class="line">demos and usage of using your application. For demo:</div><div class="line"></div><div class="line">Cobra is a CLI library for Go that empowers applications.</div><div class="line">This application is a tool to generate the needed files</div><div class="line">to quickly create a Cobra application.</div><div class="line"></div><div class="line">Usage:</div><div class="line">  cobra-demo [flags]</div><div class="line"></div><div class="line">Flags:</div><div class="line">      --config="": config file (default is $HOME/.cobra-demo.yaml)</div><div class="line">  -t, --toggle[=false]: Help message for toggle</div></pre></td></tr></table></figure><p>执行下列命令, 生成子命令:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">cobra add serve</div><div class="line">cobra add config</div><div class="line">cobra add create -p 'configCmd'</div></pre></td></tr></table></figure><p>之后,工程结构变为:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> tree cobra-demo</span></div><div class="line">cobra-demo</div><div class="line">├── LICENSE</div><div class="line">├── cmd</div><div class="line">│   ├── config.go</div><div class="line">│   ├── create.go</div><div class="line">│   ├── root.go</div><div class="line">│   └── serve.go</div><div class="line">└──  main.go</div><div class="line"></div><div class="line">1 directory, 8 files</div></pre></td></tr></table></figure><p>通过上述命令,我们生成了3个子命令, config, serve, create:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> go run main.go -h</span></div><div class="line">A longer description that spans multiple lines and likely contains</div><div class="line">demos and usage of using your application. For demo:</div><div class="line"></div><div class="line">Cobra is a CLI library for Go that empowers applications.</div><div class="line">This application is a tool to generate the needed files</div><div class="line">to quickly create a Cobra application.</div><div class="line"></div><div class="line">Usage:</div><div class="line">  cobra-demo [flags]</div><div class="line">  cobra-demo [command]</div><div class="line"></div><div class="line">Available Commands:</div><div class="line">  config      A brief description of your command</div><div class="line">  serve       A brief description of your command</div><div class="line"></div><div class="line">Flags:</div><div class="line">      --config="": config file (default is $HOME/.cobra-demo.yaml)</div><div class="line">  -t, --toggle[=false]: Help message for toggle</div></pre></td></tr></table></figure><p>执行config子命令</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ <span class="keyword">go</span> run main.<span class="keyword">go</span> config</div><div class="line">config called</div></pre></td></tr></table></figure><p>执行config的create子命令</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ <span class="keyword">go</span> run main.<span class="keyword">go</span> config create</div><div class="line">create called</div></pre></td></tr></table></figure><p>我们可以看到代码里面config是作为根命令的子命令:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</div><div class="line">RootCmd.AddCommand(configCmd)</div><div class="line"></div><div class="line"><span class="comment">// Here you will define your flags and configuration settings.</span></div><div class="line"></div><div class="line"><span class="comment">// Cobra supports Persistent Flags which will work for this command</span></div><div class="line"><span class="comment">// and all subcommands, e.g.:</span></div><div class="line">configCmd.PersistentFlags().String(<span class="string">"foo"</span>, <span class="string">""</span>, <span class="string">"A help for foo"</span>)</div><div class="line"></div><div class="line"><span class="comment">// Cobra supports local flags which will only run when this command</span></div><div class="line"><span class="comment">// is called directly, e.g.:</span></div><div class="line">configCmd.Flags().BoolP(<span class="string">"toggle"</span>, <span class="string">"t"</span>, <span class="literal">false</span>, <span class="string">"Help message for toggle"</span>)</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>当我们输入错误时，会有相应提示</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">$ <span class="keyword">go</span> run main.<span class="keyword">go</span> serv   </div><div class="line">Error: unknown command <span class="string">"serv"</span> <span class="keyword">for</span> <span class="string">"cobra-demo"</span></div><div class="line"></div><div class="line">Did you mean this?</div><div class="line">        serve</div><div class="line"></div><div class="line">Run <span class="string">'cobra-demo --help'</span> <span class="keyword">for</span> usage.</div><div class="line">unknown command <span class="string">"serv"</span> <span class="keyword">for</span> <span class="string">"cobra-demo"</span></div><div class="line"></div><div class="line">Did you mean this?</div><div class="line">        serve</div><div class="line"></div><div class="line">exit status <span class="number">1</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;cobra是一个命令行框架, 它可以生成和解析命令行。 Cobra具有非常干净的界面和简单的设计，而不需要不必要的构造函数或初始化方法。&lt;/p&gt;
    
    </summary>
    
      <category term="Golang" scheme="https://yangchenglong11.github.io/categories/Golang/"/>
    
    
      <category term="Golang" scheme="https://yangchenglong11.github.io/tags/Golang/"/>
    
  </entry>
  
  <entry>
    <title>bufio 源码解读</title>
    <link href="https://yangchenglong11.github.io/2017/05/04/bufio/"/>
    <id>https://yangchenglong11.github.io/2017/05/04/bufio/</id>
    <published>2017-05-04T03:24:34.000Z</published>
    <updated>2017-10-28T13:59:55.711Z</updated>
    
    <content type="html"><![CDATA[<p>bufio包实现了有缓冲的I/O。它包装一个io.Reader或io.Writer接口对象，创建另一个也实现了该接口，且同时还提供了缓冲和一些文本I/O的帮助函数的对象。<br><a id="more"></a></p><p>Reader 部分：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div><div class="line">284</div><div class="line">285</div><div class="line">286</div><div class="line">287</div><div class="line">288</div><div class="line">289</div><div class="line">290</div><div class="line">291</div><div class="line">292</div><div class="line">293</div><div class="line">294</div><div class="line">295</div><div class="line">296</div><div class="line">297</div><div class="line">298</div><div class="line">299</div><div class="line">300</div><div class="line">301</div><div class="line">302</div><div class="line">303</div><div class="line">304</div><div class="line">305</div><div class="line">306</div><div class="line">307</div><div class="line">308</div><div class="line">309</div><div class="line">310</div><div class="line">311</div><div class="line">312</div><div class="line">313</div><div class="line">314</div><div class="line">315</div><div class="line">316</div><div class="line">317</div><div class="line">318</div><div class="line">319</div><div class="line">320</div><div class="line">321</div><div class="line">322</div><div class="line">323</div><div class="line">324</div><div class="line">325</div><div class="line">326</div><div class="line">327</div><div class="line">328</div><div class="line">329</div><div class="line">330</div><div class="line">331</div><div class="line">332</div><div class="line">333</div><div class="line">334</div><div class="line">335</div><div class="line">336</div><div class="line">337</div><div class="line">338</div><div class="line">339</div><div class="line">340</div><div class="line">341</div><div class="line">342</div><div class="line">343</div><div class="line">344</div><div class="line">345</div><div class="line">346</div><div class="line">347</div><div class="line">348</div><div class="line">349</div><div class="line">350</div><div class="line">351</div><div class="line">352</div><div class="line">353</div><div class="line">354</div><div class="line">355</div><div class="line">356</div><div class="line">357</div><div class="line">358</div><div class="line">359</div><div class="line">360</div><div class="line">361</div><div class="line">362</div><div class="line">363</div><div class="line">364</div><div class="line">365</div><div class="line">366</div><div class="line">367</div><div class="line">368</div><div class="line">369</div><div class="line">370</div><div class="line">371</div><div class="line">372</div><div class="line">373</div><div class="line">374</div><div class="line">375</div><div class="line">376</div><div class="line">377</div><div class="line">378</div><div class="line">379</div><div class="line">380</div><div class="line">381</div><div class="line">382</div><div class="line">383</div><div class="line">384</div><div class="line">385</div><div class="line">386</div><div class="line">387</div><div class="line">388</div><div class="line">389</div><div class="line">390</div><div class="line">391</div><div class="line">392</div><div class="line">393</div><div class="line">394</div><div class="line">395</div><div class="line">396</div><div class="line">397</div><div class="line">398</div><div class="line">399</div><div class="line">400</div><div class="line">401</div><div class="line">402</div><div class="line">403</div><div class="line">404</div><div class="line">405</div><div class="line">406</div><div class="line">407</div><div class="line">408</div><div class="line">409</div><div class="line">410</div><div class="line">411</div><div class="line">412</div><div class="line">413</div><div class="line">414</div><div class="line">415</div><div class="line">416</div><div class="line">417</div><div class="line">418</div><div class="line">419</div><div class="line">420</div><div class="line">421</div><div class="line">422</div><div class="line">423</div><div class="line">424</div><div class="line">425</div><div class="line">426</div><div class="line">427</div><div class="line">428</div><div class="line">429</div><div class="line">430</div><div class="line">431</div><div class="line">432</div><div class="line">433</div><div class="line">434</div><div class="line">435</div><div class="line">436</div><div class="line">437</div><div class="line">438</div><div class="line">439</div><div class="line">440</div><div class="line">441</div><div class="line">442</div><div class="line">443</div><div class="line">444</div><div class="line">445</div><div class="line">446</div><div class="line">447</div><div class="line">448</div><div class="line">449</div><div class="line">450</div><div class="line">451</div><div class="line">452</div><div class="line">453</div><div class="line">454</div><div class="line">455</div><div class="line">456</div><div class="line">457</div><div class="line">458</div><div class="line">459</div><div class="line">460</div><div class="line">461</div><div class="line">462</div><div class="line">463</div><div class="line">464</div><div class="line">465</div><div class="line">466</div><div class="line">467</div><div class="line">468</div><div class="line">469</div><div class="line">470</div><div class="line">471</div><div class="line">472</div><div class="line">473</div><div class="line">474</div><div class="line">475</div><div class="line">476</div><div class="line">477</div><div class="line">478</div><div class="line">479</div><div class="line">480</div><div class="line">481</div><div class="line">482</div><div class="line">483</div><div class="line">484</div><div class="line">485</div><div class="line">486</div><div class="line">487</div><div class="line">488</div><div class="line">489</div><div class="line">490</div><div class="line">491</div><div class="line">492</div><div class="line">493</div><div class="line">494</div><div class="line">495</div><div class="line">496</div><div class="line">497</div><div class="line">498</div><div class="line">499</div><div class="line">500</div><div class="line">501</div><div class="line">502</div><div class="line">503</div><div class="line">504</div><div class="line">505</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 设置默认缓存大小</span></div><div class="line"><span class="keyword">const</span> (</div><div class="line">defaultBufSize = <span class="number">4096</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="comment">// 定义错误类型</span></div><div class="line"><span class="keyword">var</span> (</div><div class="line">ErrInvalidUnreadByte = errors.New(<span class="string">"bufio: invalid use of UnreadByte"</span>)</div><div class="line">ErrInvalidUnreadRune = errors.New(<span class="string">"bufio: invalid use of UnreadRune"</span>)</div><div class="line">ErrBufferFull        = errors.New(<span class="string">"bufio: buffer full"</span>)</div><div class="line">ErrNegativeCount     = errors.New(<span class="string">"bufio: negative count"</span>)</div><div class="line">)</div><div class="line"></div><div class="line"><span class="comment">// bufio.Reader 结构包装了一个 io.Reader 对象，提供缓存功能，同时实现了 io.Reader 接口。</span></div><div class="line"><span class="comment">// 其结构没有任何导出的字段。</span></div><div class="line"><span class="keyword">type</span> Reader <span class="keyword">struct</span> &#123;</div><div class="line">buf          []<span class="keyword">byte</span>    <span class="comment">// 缓存</span></div><div class="line">rd           io.Reader <span class="comment">// 底层的 io.Reader</span></div><div class="line">r, w         <span class="keyword">int</span>       <span class="comment">// r:从buf中读走的字节（偏移）；w:buf 中填充内容的偏移；</span></div><div class="line">err          error     <span class="comment">// 读过程中遇到的错误</span></div><div class="line">lastByte     <span class="keyword">int</span>       <span class="comment">// 最后一次读到的字节</span></div><div class="line">lastRuneSize <span class="keyword">int</span>       <span class="comment">// 最后一次读到的 Rune 的大小</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 设置连续读取最大尝试次数</span></div><div class="line"><span class="keyword">const</span> maxConsecutiveEmptyReads = <span class="number">100</span></div><div class="line"></div><div class="line"><span class="comment">// NewReaderSize 将 rd 封装成一个带缓存的 bufio.Reader 对象，</span></div><div class="line"><span class="comment">// 缓存大小由 size 指定（如果小于 16 则会被设置为 16）。</span></div><div class="line"><span class="comment">// 如果 rd 的基类型就是有足够缓存的 bufio.Reader 类型，则直接将</span></div><div class="line"><span class="comment">// rd 转换为基类型返回。</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewReaderSize</span><span class="params">(rd io.Reader, size <span class="keyword">int</span>)</span> *<span class="title">Reader</span></span> &#123;</div><div class="line"><span class="comment">// 已经是bufio.Reader类型，且缓存大小不小于 size，则直接返回</span></div><div class="line">b, ok := rd.(*Reader)</div><div class="line">    <span class="comment">// 判断缓存是否足够</span></div><div class="line"><span class="keyword">if</span> ok &amp;&amp; <span class="built_in">len</span>(b.buf) &gt;= size &#123;</div><div class="line"><span class="keyword">return</span> b</div><div class="line">&#125;</div><div class="line">    <span class="comment">// 缓存大小不会小于 minReadBufferSize （16字节）</span></div><div class="line"><span class="keyword">if</span> size &lt; minReadBufferSize &#123;</div><div class="line">size = minReadBufferSize</div><div class="line">&#125;</div><div class="line">    <span class="comment">// 构造一个bufio.Reader实例</span></div><div class="line">r := <span class="built_in">new</span>(Reader)</div><div class="line">r.reset(<span class="built_in">make</span>([]<span class="keyword">byte</span>, size), rd)</div><div class="line"><span class="keyword">return</span> r</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 创建默认大小缓存的 bufio.Reader</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewReader</span><span class="params">(rd io.Reader)</span> *<span class="title">Reader</span></span> &#123;</div><div class="line"><span class="keyword">return</span> NewReaderSize(rd, defaultBufSize)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 提供reset的接口</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *Reader)</span> <span class="title">Reset</span><span class="params">(r io.Reader)</span></span> &#123;</div><div class="line">b.reset(b.buf, r)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// Reset丢弃缓冲中的数据，清除任何错误，将b重设为其下层从r读取数据。</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *Reader)</span> <span class="title">reset</span><span class="params">(buf []<span class="keyword">byte</span>, r io.Reader)</span></span> &#123;</div><div class="line">*b = Reader&#123;</div><div class="line">buf:          buf,</div><div class="line">rd:           r,</div><div class="line">lastByte:     <span class="number">-1</span>,</div><div class="line">lastRuneSize: <span class="number">-1</span>,</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 定义错误：读出字节数为负</span></div><div class="line"><span class="keyword">var</span> errNegativeRead = errors.New(<span class="string">"bufio: reader returned negative count from Read"</span>)</div><div class="line"></div><div class="line"><span class="comment">// 将新块读入缓冲区</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *Reader)</span> <span class="title">fill</span><span class="params">()</span></span> &#123;</div><div class="line"><span class="comment">// 将 r 之前的数据覆盖，即，将现有数据滑动到开始。</span></div><div class="line"><span class="keyword">if</span> b.r &gt; <span class="number">0</span> &#123;</div><div class="line"><span class="built_in">copy</span>(b.buf, b.buf[b.r:b.w])</div><div class="line">b.w -= b.r</div><div class="line">b.r = <span class="number">0</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">if</span> b.w &gt;= <span class="built_in">len</span>(b.buf) &#123;</div><div class="line"><span class="built_in">panic</span>(<span class="string">"bufio: tried to fill full buffer"</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 将新数据读到 buf 中，如果说读到数据则返回；如果读到数据为空，继续尝试有限次数。</span></div><div class="line"><span class="keyword">for</span> i := maxConsecutiveEmptyReads; i &gt; <span class="number">0</span>; i-- &#123;</div><div class="line">n, err := b.rd.Read(b.buf[b.w:])</div><div class="line"><span class="keyword">if</span> n &lt; <span class="number">0</span> &#123;</div><div class="line"><span class="built_in">panic</span>(errNegativeRead)</div><div class="line">&#125;</div><div class="line">b.w += n</div><div class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">b.err = err</div><div class="line"><span class="keyword">return</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span> n &gt; <span class="number">0</span> &#123;</div><div class="line"><span class="keyword">return</span></div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">b.err = io.ErrNoProgress</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 返回读取过程中的错误，调用后清空</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *Reader)</span> <span class="title">readErr</span><span class="params">()</span> <span class="title">error</span></span> &#123;</div><div class="line">err := b.err</div><div class="line">b.err = <span class="literal">nil</span></div><div class="line"><span class="keyword">return</span> err</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// Peek返回输入流的下n个字节，而不会移动读取位置。</span></div><div class="line"><span class="comment">// 返回的[]byte只在下一次调用读取操作前合法。</span></div><div class="line"><span class="comment">// 如果Peek返回的切片长度比n小，它也会返会一个错误说明原因。</span></div><div class="line"><span class="comment">// 如果n比缓冲尺寸还大，返回的错误将是ErrBufferFull。</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *Reader)</span> <span class="title">Peek</span><span class="params">(n <span class="keyword">int</span>)</span> <span class="params">([]<span class="keyword">byte</span>, error)</span></span> &#123;</div><div class="line">    <span class="comment">// 检查参数</span></div><div class="line"><span class="keyword">if</span> n &lt; <span class="number">0</span> &#123;</div><div class="line"><span class="keyword">return</span> <span class="literal">nil</span>, ErrNegativeCount</div><div class="line">&#125;</div><div class="line"></div><div class="line">    <span class="comment">// 当 buf 中数据量小于 n，且 buf 未满时，向其中填充数据，直至填满；如果有错误则停止。</span></div><div class="line"><span class="keyword">for</span> b.w-b.r &lt; n &amp;&amp; b.w-b.r &lt; <span class="built_in">len</span>(b.buf) &amp;&amp; b.err == <span class="literal">nil</span> &#123;</div><div class="line">b.fill() </div><div class="line">&#125;</div><div class="line"></div><div class="line">    <span class="comment">// 最多读 len(buf) 长度</span></div><div class="line"><span class="keyword">if</span> n &gt; <span class="built_in">len</span>(b.buf) &#123;</div><div class="line"><span class="keyword">return</span> b.buf[b.r:b.w], ErrBufferFull</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 0 &lt;= n &lt;= len(b.buf)</span></div><div class="line"><span class="keyword">var</span> err error</div><div class="line"><span class="keyword">if</span> avail := b.w - b.r; avail &lt; n &#123;</div><div class="line"><span class="comment">// 缓存中没有足够数据，设置错误</span></div><div class="line">n = avail</div><div class="line">err = b.readErr()</div><div class="line"><span class="keyword">if</span> err == <span class="literal">nil</span> &#123;</div><div class="line">err = ErrBufferFull</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> b.buf[b.r : b.r+n], err</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// Discard 跳过后续的 n 个字节的数据，返回跳过的字节数。</span></div><div class="line"><span class="comment">// 如果结果小于 n，将返回错误信息。</span></div><div class="line"><span class="comment">// 如果 n 小于缓存中的数据长度，则不会从底层提取数据。</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *Reader)</span> <span class="title">Discard</span><span class="params">(n <span class="keyword">int</span>)</span> <span class="params">(discarded <span class="keyword">int</span>, err error)</span></span> &#123;</div><div class="line">    <span class="comment">// 检查参数</span></div><div class="line"><span class="keyword">if</span> n &lt; <span class="number">0</span> &#123;</div><div class="line"><span class="keyword">return</span> <span class="number">0</span>, ErrNegativeCount</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span> n == <span class="number">0</span> &#123;</div><div class="line"><span class="keyword">return</span></div><div class="line">&#125;</div><div class="line">remain := n</div><div class="line"><span class="keyword">for</span> &#123;</div><div class="line">        <span class="comment">// 获取缓存中的数据长度，如果没有数据，添加数据后再次获取长度。</span></div><div class="line">skip := b.Buffered()</div><div class="line"><span class="keyword">if</span> skip == <span class="number">0</span> &#123;</div><div class="line">b.fill()</div><div class="line">skip = b.Buffered()</div><div class="line">&#125;</div><div class="line">        <span class="comment">// 如果缓冲长度大于n，设置跳过长度为n。</span></div><div class="line"><span class="keyword">if</span> skip &gt; remain &#123;</div><div class="line">skip = remain</div><div class="line">&#125;</div><div class="line">b.r += skip</div><div class="line">remain -= skip</div><div class="line"><span class="keyword">if</span> remain == <span class="number">0</span> &#123;</div><div class="line"><span class="keyword">return</span> n, <span class="literal">nil</span></div><div class="line">&#125;</div><div class="line">        <span class="comment">// 如果缓冲长度小于n，返回实际跳过长度及错误。</span></div><div class="line"><span class="keyword">if</span> b.err != <span class="literal">nil</span> &#123;</div><div class="line"><span class="keyword">return</span> n - remain, b.readErr()</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// Read 从 b 中读出数据到 p 中，返回读出的字节数和遇到的错误。</span></div><div class="line"><span class="comment">// 如果缓存不为空，则只能读出缓存中的数据，不会从底层 io.Reader</span></div><div class="line"><span class="comment">// 中提取数据，如果缓存为空，则：</span></div><div class="line"><span class="comment">// 1、len(p) &gt;= 缓存大小，则跳过缓存，直接从底层 io.Reader 中读</span></div><div class="line"><span class="comment">// 出到 p 中。</span></div><div class="line"><span class="comment">// 2、len(p) &lt; 缓存大小，则先将数据从底层 io.Reader 中读取到缓存</span></div><div class="line"><span class="comment">// 中，再从缓存读取到 p 中。</span></div><div class="line"></div><div class="line"><span class="comment">// 读取到达结尾时，返回值n将为0而 err 将为 io.EOF。</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *Reader)</span> <span class="title">Read</span><span class="params">(p []<span class="keyword">byte</span>)</span> <span class="params">(n <span class="keyword">int</span>, err error)</span></span> &#123;</div><div class="line">n = <span class="built_in">len</span>(p)</div><div class="line"><span class="keyword">if</span> n == <span class="number">0</span> &#123;</div><div class="line"><span class="keyword">return</span> <span class="number">0</span>, b.readErr()</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span> b.r == b.w &#123;</div><div class="line">        <span class="comment">// 如果缓冲为 0，且错误不为空，直接返回 0 及错误。</span></div><div class="line"><span class="keyword">if</span> b.err != <span class="literal">nil</span> &#123;</div><div class="line"><span class="keyword">return</span> <span class="number">0</span>, b.readErr()</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span> <span class="built_in">len</span>(p) &gt;= <span class="built_in">len</span>(b.buf) &#123;</div><div class="line"><span class="comment">//跳过缓存，直接从底层 io.Reader 中读取, 避免 copy。</span></div><div class="line">n, b.err = b.rd.Read(p)</div><div class="line"><span class="keyword">if</span> n &lt; <span class="number">0</span> &#123;</div><div class="line"><span class="built_in">panic</span>(errNegativeRead)</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span> n &gt; <span class="number">0</span> &#123;</div><div class="line">b.lastByte = <span class="keyword">int</span>(p[n<span class="number">-1</span>])</div><div class="line">b.lastRuneSize = <span class="number">-1</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> n, b.readErr()</div><div class="line">&#125;</div><div class="line"><span class="comment">// 先将数据读到 buf 中，再读到 p 中。</span></div><div class="line"><span class="comment">// 不要使用 fill ，那将会循环读取。</span></div><div class="line">b.r = <span class="number">0</span></div><div class="line">b.w = <span class="number">0</span></div><div class="line">n, b.err = b.rd.Read(b.buf)</div><div class="line"><span class="keyword">if</span> n &lt; <span class="number">0</span> &#123;</div><div class="line"><span class="built_in">panic</span>(errNegativeRead)</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span> n == <span class="number">0</span> &#123;</div><div class="line"><span class="keyword">return</span> <span class="number">0</span>, b.readErr()</div><div class="line">&#125;</div><div class="line">b.w += n</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 如果缓存不为空，则将缓存中数据复制到 p 中。</span></div><div class="line">n = <span class="built_in">copy</span>(p, b.buf[b.r:b.w])</div><div class="line">b.r += n</div><div class="line">b.lastByte = <span class="keyword">int</span>(b.buf[b.r<span class="number">-1</span>])</div><div class="line">b.lastRuneSize = <span class="number">-1</span></div><div class="line"><span class="keyword">return</span> n, <span class="literal">nil</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// ReadByte读取一个字节并返回该字节。如果没有可用的数据，会返回错误。</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *Reader)</span> <span class="title">ReadByte</span><span class="params">()</span> <span class="params">(<span class="keyword">byte</span>, error)</span></span> &#123;</div><div class="line">b.lastRuneSize = <span class="number">-1</span></div><div class="line"><span class="keyword">for</span> b.r == b.w &#123;</div><div class="line"><span class="keyword">if</span> b.err != <span class="literal">nil</span> &#123;</div><div class="line"><span class="keyword">return</span> <span class="number">0</span>, b.readErr()</div><div class="line">&#125;</div><div class="line">b.fill() <span class="comment">// buffer is empty</span></div><div class="line">&#125;</div><div class="line">c := b.buf[b.r]</div><div class="line">b.r++</div><div class="line">b.lastByte = <span class="keyword">int</span>(c)</div><div class="line"><span class="keyword">return</span> c, <span class="literal">nil</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// UnreadByte吐出最近一次读取操作读取的最后一个字节。（只能吐出最后一个，多次调用会出问题）</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *Reader)</span> <span class="title">UnreadByte</span><span class="params">()</span> <span class="title">error</span></span> &#123;</div><div class="line"><span class="keyword">if</span> b.lastByte &lt; <span class="number">0</span> || b.r == <span class="number">0</span> &amp;&amp; b.w &gt; <span class="number">0</span> &#123;</div><div class="line"><span class="keyword">return</span> ErrInvalidUnreadByte</div><div class="line">&#125;</div><div class="line"><span class="comment">// b.r &gt; 0 || b.w == 0</span></div><div class="line"><span class="keyword">if</span> b.r &gt; <span class="number">0</span> &#123;</div><div class="line">b.r--</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line"><span class="comment">// b.r == 0 &amp;&amp; b.w == 0</span></div><div class="line">b.w = <span class="number">1</span></div><div class="line">&#125;</div><div class="line">b.buf[b.r] = <span class="keyword">byte</span>(b.lastByte)</div><div class="line">b.lastByte = <span class="number">-1</span></div><div class="line">b.lastRuneSize = <span class="number">-1</span></div><div class="line"><span class="keyword">return</span> <span class="literal">nil</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// ReadRune 读取一个 utf-8 编码的 unicode 码值，返回该码值、其编码长度以及可能的错误。</span></div><div class="line"><span class="comment">// 如果 utf-8 编码非法，读取位置只移动1字节，返回 U+FFFD，返回值 size 为1而 err 为 nil。</span></div><div class="line"><span class="comment">// 如果没有可用的数据，会返回错误。</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *Reader)</span> <span class="title">ReadRune</span><span class="params">()</span> <span class="params">(r <span class="keyword">rune</span>, size <span class="keyword">int</span>, err error)</span></span> &#123;</div><div class="line"><span class="keyword">for</span> b.r+utf8.UTFMax &gt; b.w &amp;&amp; !utf8.FullRune(b.buf[b.r:b.w]) &amp;&amp; b.err == <span class="literal">nil</span> &amp;&amp; b.w-b.r &lt; <span class="built_in">len</span>(b.buf) &#123;</div><div class="line">b.fill() <span class="comment">// b.w-b.r &lt; len(buf) =&gt; buffer is not full</span></div><div class="line">&#125;</div><div class="line">b.lastRuneSize = <span class="number">-1</span></div><div class="line"><span class="keyword">if</span> b.r == b.w &#123;</div><div class="line"><span class="keyword">return</span> <span class="number">0</span>, <span class="number">0</span>, b.readErr()</div><div class="line">&#125;</div><div class="line">r, size = <span class="keyword">rune</span>(b.buf[b.r]), <span class="number">1</span></div><div class="line"><span class="keyword">if</span> r &gt;= utf8.RuneSelf &#123;</div><div class="line">r, size = utf8.DecodeRune(b.buf[b.r:b.w])</div><div class="line">&#125;</div><div class="line">b.r += size</div><div class="line">b.lastByte = <span class="keyword">int</span>(b.buf[b.r<span class="number">-1</span>])</div><div class="line">b.lastRuneSize = size</div><div class="line"><span class="keyword">return</span> r, size, <span class="literal">nil</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// UnreadRune 吐出最近一次 ReadRune 调用读取的 unicode 码值。</span></div><div class="line"><span class="comment">// 如果最近一次读取不是调用的ReadRune，会返回错误。（从这点看，UnreadRune比UnreadByte严格很多）</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *Reader)</span> <span class="title">UnreadRune</span><span class="params">()</span> <span class="title">error</span></span> &#123;</div><div class="line"><span class="keyword">if</span> b.lastRuneSize &lt; <span class="number">0</span> || b.r &lt; b.lastRuneSize &#123;</div><div class="line"><span class="keyword">return</span> ErrInvalidUnreadRune</div><div class="line">&#125;</div><div class="line">b.r -= b.lastRuneSize</div><div class="line">b.lastByte = <span class="number">-1</span></div><div class="line">b.lastRuneSize = <span class="number">-1</span></div><div class="line"><span class="keyword">return</span> <span class="literal">nil</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// Buffered 返回缓存中未读取的数据的长度。</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *Reader)</span> <span class="title">Buffered</span><span class="params">()</span> <span class="title">int</span></span> &#123; <span class="keyword">return</span> b.w - b.r &#125;</div><div class="line"></div><div class="line"><span class="comment">// ReadSlice 在 b 中查找 delim 并返回 delim 及其之前的所有数据。</span></div><div class="line"><span class="comment">// 该操作会读出数据，返回的切片是已读出的数据的引用，切片中的数据</span></div><div class="line"><span class="comment">// 在下一次读取操作之前是有效的。</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">// 如果找到 delim，则返回查找结果，err 返回 nil。</span></div><div class="line"><span class="comment">// 如果未找到 delim，则：</span></div><div class="line"><span class="comment">// 1、缓存不满，则将缓存填满后再次查找。</span></div><div class="line"><span class="comment">// 2、缓存是满的，则返回整个缓存，err 返回 ErrBufferFull。</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">// 如果未找到 delim 且遇到错误（通常是 io.EOF），则返回缓存中的所</span></div><div class="line"><span class="comment">// 有数据和遇到的错误。</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">// 因为返回的数据有可能被下一次的读写操作修改，所以大多数操作应该</span></div><div class="line"><span class="comment">// 使用 ReadBytes 或 ReadString，它们返回的是数据的拷贝。</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *Reader)</span> <span class="title">ReadSlice</span><span class="params">(delim <span class="keyword">byte</span>)</span> <span class="params">(line []<span class="keyword">byte</span>, err error)</span></span> &#123;</div><div class="line"><span class="keyword">for</span> &#123;</div><div class="line"><span class="comment">// 在 buf 中查找 delim</span></div><div class="line"><span class="keyword">if</span> i := bytes.IndexByte(b.buf[b.r:b.w], delim); i &gt;= <span class="number">0</span> &#123;</div><div class="line">line = b.buf[b.r : b.r+i+<span class="number">1</span>]</div><div class="line">b.r += i + <span class="number">1</span></div><div class="line"><span class="keyword">break</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// Pending error?</span></div><div class="line"><span class="keyword">if</span> b.err != <span class="literal">nil</span> &#123;</div><div class="line">line = b.buf[b.r:b.w]</div><div class="line">b.r = b.w</div><div class="line">err = b.readErr()</div><div class="line"><span class="keyword">break</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// Buffer full?</span></div><div class="line"><span class="keyword">if</span> b.Buffered() &gt;= <span class="built_in">len</span>(b.buf) &#123;</div><div class="line">b.r = b.w</div><div class="line">line = b.buf</div><div class="line">err = ErrBufferFull</div><div class="line"><span class="keyword">break</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">b.fill() <span class="comment">// buffer is not full</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// Handle last byte, if any.</span></div><div class="line"><span class="keyword">if</span> i := <span class="built_in">len</span>(line) - <span class="number">1</span>; i &gt;= <span class="number">0</span> &#123;</div><div class="line">b.lastByte = <span class="keyword">int</span>(line[i])</div><div class="line">b.lastRuneSize = <span class="number">-1</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">return</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// ReadLine 是一个低水平的行读取原语，大多数情况下，应该使用</span></div><div class="line"><span class="comment">// ReadBytes('\n') 或 ReadString('\n')，或者使用一个 Scanner。</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">// ReadLine 通过调用 ReadSlice 方法实现，返回的也是缓存的切片。用于</span></div><div class="line"><span class="comment">// 读取一行数据，不包括行尾标记（\n 或 \r\n）。</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">// 只要能读出数据，err 就为 nil。如果没有数据可读，则 isPrefix 返回</span></div><div class="line"><span class="comment">// false，err 返回 io.EOF。</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">// 如果找到行尾标记，则返回查找结果，isPrefix 返回 false。</span></div><div class="line"><span class="comment">// 如果未找到行尾标记，则：</span></div><div class="line"><span class="comment">// 1、缓存不满，则将缓存填满后再次查找。</span></div><div class="line"><span class="comment">// 2、缓存是满的，则返回整个缓存，isPrefix 返回 true。</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">// 整个数据尾部“有一个换行标记”和“没有换行标记”的读取结果是一样。</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">// 如果 ReadLine 读取到换行标记，则调用 UnreadByte 撤销的是换行标记，</span></div><div class="line"><span class="comment">// 而不是返回的数据。</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *Reader)</span> <span class="title">ReadLine</span><span class="params">()</span> <span class="params">(line []<span class="keyword">byte</span>, isPrefix <span class="keyword">bool</span>, err error)</span></span> &#123;</div><div class="line">line, err = b.ReadSlice(<span class="string">'\n'</span>)</div><div class="line"><span class="keyword">if</span> err == ErrBufferFull &#123;</div><div class="line"><span class="comment">// Handle the case where "\r\n" straddles the buffer.</span></div><div class="line"><span class="keyword">if</span> <span class="built_in">len</span>(line) &gt; <span class="number">0</span> &amp;&amp; line[<span class="built_in">len</span>(line)<span class="number">-1</span>] == <span class="string">'\r'</span> &#123;</div><div class="line"><span class="comment">// Put the '\r' back on buf and drop it from line.</span></div><div class="line"><span class="comment">// Let the next call to ReadLine check for "\r\n".</span></div><div class="line"><span class="keyword">if</span> b.r == <span class="number">0</span> &#123;</div><div class="line"><span class="comment">// should be unreachable</span></div><div class="line"><span class="built_in">panic</span>(<span class="string">"bufio: tried to rewind past start of buffer"</span>)</div><div class="line">&#125;</div><div class="line">b.r--</div><div class="line">line = line[:<span class="built_in">len</span>(line)<span class="number">-1</span>]</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> line, <span class="literal">true</span>, <span class="literal">nil</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">if</span> <span class="built_in">len</span>(line) == <span class="number">0</span> &#123;</div><div class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">line = <span class="literal">nil</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span></div><div class="line">&#125;</div><div class="line">err = <span class="literal">nil</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> line[<span class="built_in">len</span>(line)<span class="number">-1</span>] == <span class="string">'\n'</span> &#123;</div><div class="line">drop := <span class="number">1</span></div><div class="line"><span class="keyword">if</span> <span class="built_in">len</span>(line) &gt; <span class="number">1</span> &amp;&amp; line[<span class="built_in">len</span>(line)<span class="number">-2</span>] == <span class="string">'\r'</span> &#123;</div><div class="line">drop = <span class="number">2</span></div><div class="line">&#125;</div><div class="line">line = line[:<span class="built_in">len</span>(line)-drop]</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// ReadBytes 功能同 ReadSlice，只不过返回的是缓存的拷贝。</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *Reader)</span> <span class="title">ReadBytes</span><span class="params">(delim <span class="keyword">byte</span>)</span> <span class="params">([]<span class="keyword">byte</span>, error)</span></span> &#123;</div><div class="line"><span class="comment">// Use ReadSlice to look for array,</span></div><div class="line"><span class="comment">// accumulating full buffers.</span></div><div class="line"><span class="keyword">var</span> frag []<span class="keyword">byte</span></div><div class="line"><span class="keyword">var</span> full [][]<span class="keyword">byte</span></div><div class="line"><span class="keyword">var</span> err error</div><div class="line"><span class="keyword">for</span> &#123;</div><div class="line"><span class="keyword">var</span> e error</div><div class="line">frag, e = b.ReadSlice(delim)</div><div class="line"><span class="keyword">if</span> e == <span class="literal">nil</span> &#123; <span class="comment">// got final fragment</span></div><div class="line"><span class="keyword">break</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span> e != ErrBufferFull &#123; <span class="comment">// unexpected error</span></div><div class="line">err = e</div><div class="line"><span class="keyword">break</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// Make a copy of the buffer.</span></div><div class="line">buf := <span class="built_in">make</span>([]<span class="keyword">byte</span>, <span class="built_in">len</span>(frag))</div><div class="line"><span class="built_in">copy</span>(buf, frag)</div><div class="line">full = <span class="built_in">append</span>(full, buf)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// Allocate new buffer to hold the full pieces and the fragment.</span></div><div class="line">n := <span class="number">0</span></div><div class="line"><span class="keyword">for</span> i := <span class="keyword">range</span> full &#123;</div><div class="line">n += <span class="built_in">len</span>(full[i])</div><div class="line">&#125;</div><div class="line">n += <span class="built_in">len</span>(frag)</div><div class="line"></div><div class="line"><span class="comment">// Copy full pieces and fragment in.</span></div><div class="line">buf := <span class="built_in">make</span>([]<span class="keyword">byte</span>, n)</div><div class="line">n = <span class="number">0</span></div><div class="line"><span class="keyword">for</span> i := <span class="keyword">range</span> full &#123;</div><div class="line">n += <span class="built_in">copy</span>(buf[n:], full[i])</div><div class="line">&#125;</div><div class="line"><span class="built_in">copy</span>(buf[n:], frag)</div><div class="line"><span class="keyword">return</span> buf, err</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// ReadString 功能同 ReadBytes，只不过返回的是字符串。</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *Reader)</span> <span class="title">ReadString</span><span class="params">(delim <span class="keyword">byte</span>)</span> <span class="params">(<span class="keyword">string</span>, error)</span></span> &#123;</div><div class="line">bytes, err := b.ReadBytes(delim)</div><div class="line"><span class="keyword">return</span> <span class="keyword">string</span>(bytes), err</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// WriteTo方法实现了 io.WriterTo 接口。</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *Reader)</span> <span class="title">WriteTo</span><span class="params">(w io.Writer)</span> <span class="params">(n <span class="keyword">int64</span>, err error)</span></span> &#123;</div><div class="line">n, err = b.writeBuf(w)</div><div class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line"><span class="keyword">return</span></div><div class="line">&#125;</div><div class="line">    </div><div class="line">    <span class="comment">// 如果 b.rd  已经实现了 io.WriterTo 接口，直接调用并返回。</span></div><div class="line"><span class="keyword">if</span> r, ok := b.rd.(io.WriterTo); ok &#123;</div><div class="line">m, err := r.WriteTo(w)</div><div class="line">n += m</div><div class="line"><span class="keyword">return</span> n, err</div><div class="line">&#125;</div><div class="line"></div><div class="line">    <span class="comment">// 如果 w 已经实现了 io.ReaderFrom 接口，调用并返回。</span></div><div class="line"><span class="keyword">if</span> w, ok := w.(io.ReaderFrom); ok &#123;</div><div class="line">m, err := w.ReadFrom(b.rd)</div><div class="line">n += m</div><div class="line"><span class="keyword">return</span> n, err</div><div class="line">&#125;</div><div class="line"></div><div class="line">    <span class="comment">// buffer not full</span></div><div class="line"><span class="keyword">if</span> b.w-b.r &lt; <span class="built_in">len</span>(b.buf) &#123;</div><div class="line">b.fill() </div><div class="line">&#125;</div><div class="line"></div><div class="line">    <span class="comment">// b.r &lt; b.w =&gt; buffer is not empty</span></div><div class="line"><span class="keyword">for</span> b.r &lt; b.w &#123;</div><div class="line">m, err := b.writeBuf(w)</div><div class="line">n += m</div><div class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line"><span class="keyword">return</span> n, err</div><div class="line">&#125;</div><div class="line">b.fill() <span class="comment">// buffer is empty</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">if</span> b.err == io.EOF &#123;</div><div class="line">b.err = <span class="literal">nil</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">return</span> n, b.readErr()</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 定义错误：写入字节数为负</span></div><div class="line"><span class="keyword">var</span> errNegativeWrite = errors.New(<span class="string">"bufio: writer returned negative count from Write"</span>)</div><div class="line"></div><div class="line"><span class="comment">// 将 Reader.buf 中的数据写到 io.Writer 中。</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *Reader)</span> <span class="title">writeBuf</span><span class="params">(w io.Writer)</span> <span class="params">(<span class="keyword">int64</span>, error)</span></span> &#123;</div><div class="line">n, err := w.Write(b.buf[b.r:b.w])</div><div class="line"><span class="keyword">if</span> n &lt; <span class="number">0</span> &#123;</div><div class="line"><span class="built_in">panic</span>(errNegativeWrite)</div><div class="line">&#125;</div><div class="line">b.r += n</div><div class="line"><span class="keyword">return</span> <span class="keyword">int64</span>(n), err</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>Writer 部分：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Writer实现了 io.Writer 接口并为其添加缓冲。</span></div><div class="line"><span class="comment">// 如果在向一个 Writer 类型写入时遇到了错误，该对象将不再接受任何数据，且所有写操作都会返回该错误。</span></div><div class="line"><span class="comment">// 在所有数据都写入后，调用者有义务调用 Flush 方法以保证所有的数据都交给了下层的 io.Writer。</span></div><div class="line"><span class="keyword">type</span> Writer <span class="keyword">struct</span> &#123;</div><div class="line">err error</div><div class="line">buf []<span class="keyword">byte</span></div><div class="line">n   <span class="keyword">int</span></div><div class="line">wr  io.Writer</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// NewWriterSize 将 w 封装成一个带缓存的 bufio.Writer 对象，</span></div><div class="line"><span class="comment">// 缓存大小由 size 指定（如果小于 4096 则会被设置为 4096）。</span></div><div class="line"><span class="comment">// 如果 wr 的基类型就是有足够缓存的 bufio.Writer 类型，则直接将</span></div><div class="line"><span class="comment">// wr 转换为基类型返回。</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewWriterSize</span><span class="params">(w io.Writer, size <span class="keyword">int</span>)</span> *<span class="title">Writer</span></span> &#123;</div><div class="line"><span class="comment">// Is it already a Writer?</span></div><div class="line">b, ok := w.(*Writer)</div><div class="line"><span class="keyword">if</span> ok &amp;&amp; <span class="built_in">len</span>(b.buf) &gt;= size &#123;</div><div class="line"><span class="keyword">return</span> b</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span> size &lt;= <span class="number">0</span> &#123;</div><div class="line">size = defaultBufSize</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> &amp;Writer&#123;</div><div class="line">buf: <span class="built_in">make</span>([]<span class="keyword">byte</span>, size),</div><div class="line">wr:  w,</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// NewWriter 相当于 NewWriterSize(wr, 4096)。</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewWriter</span><span class="params">(w io.Writer)</span> *<span class="title">Writer</span></span> &#123;</div><div class="line"><span class="keyword">return</span> NewWriterSize(w, defaultBufSize)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// Reset 将 b 的底层 Writer 重新指定为 w，同时丢弃缓存中的所有数据，复位</span></div><div class="line"><span class="comment">// 所有标记和错误信息。相当于创建了一个新的 bufio.Writer。</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *Writer)</span> <span class="title">Reset</span><span class="params">(w io.Writer)</span></span> &#123;</div><div class="line">b.err = <span class="literal">nil</span></div><div class="line">b.n = <span class="number">0</span></div><div class="line">b.wr = w</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// Flush 将缓存中的数据提交到底层的 io.Writer 中。</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *Writer)</span> <span class="title">Flush</span><span class="params">()</span> <span class="title">error</span></span> &#123;</div><div class="line"><span class="keyword">if</span> b.err != <span class="literal">nil</span> &#123;</div><div class="line"><span class="keyword">return</span> b.err</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span> b.n == <span class="number">0</span> &#123;</div><div class="line"><span class="keyword">return</span> <span class="literal">nil</span></div><div class="line">&#125;</div><div class="line">    </div><div class="line">    <span class="comment">// 将缓冲数据写入底层数据流</span></div><div class="line">n, err := b.wr.Write(b.buf[<span class="number">0</span>:b.n])</div><div class="line">  </div><div class="line">    <span class="comment">// 当未全部写完时，设置错误</span></div><div class="line"><span class="keyword">if</span> n &lt; b.n &amp;&amp; err == <span class="literal">nil</span> &#123;</div><div class="line">err = io.ErrShortWrite</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line"><span class="keyword">if</span> n &gt; <span class="number">0</span> &amp;&amp; n &lt; b.n &#123;</div><div class="line">            <span class="comment">// 将已写过内容覆盖</span></div><div class="line"><span class="built_in">copy</span>(b.buf[<span class="number">0</span>:b.n-n], b.buf[n:b.n])</div><div class="line">&#125;</div><div class="line">b.n -= n</div><div class="line">b.err = err</div><div class="line"><span class="keyword">return</span> err</div><div class="line">&#125;</div><div class="line">b.n = <span class="number">0</span></div><div class="line"><span class="keyword">return</span> <span class="literal">nil</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// Available 返回缓存中未使用的空间的长度</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *Writer)</span> <span class="title">Available</span><span class="params">()</span> <span class="title">int</span></span> &#123; <span class="keyword">return</span> <span class="built_in">len</span>(b.buf) - b.n &#125;</div><div class="line"></div><div class="line"><span class="comment">// Buffered 返回缓存中未提交的数据的长度</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *Writer)</span> <span class="title">Buffered</span><span class="params">()</span> <span class="title">int</span></span> &#123; <span class="keyword">return</span> b.n &#125;</div><div class="line"></div><div class="line"><span class="comment">// Write 将 p 的内容写入缓冲。</span></div><div class="line"><span class="comment">// 返回写入的字节数。</span></div><div class="line"><span class="comment">// 如果返回值 nn &lt; len(p)，还会返回一个错误说明原因。</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *Writer)</span> <span class="title">Write</span><span class="params">(p []<span class="keyword">byte</span>)</span> <span class="params">(nn <span class="keyword">int</span>, err error)</span></span> &#123;</div><div class="line"><span class="keyword">for</span> <span class="built_in">len</span>(p) &gt; b.Available() &amp;&amp; b.err == <span class="literal">nil</span> &#123;</div><div class="line"><span class="keyword">var</span> n <span class="keyword">int</span></div><div class="line"><span class="keyword">if</span> b.Buffered() == <span class="number">0</span> &#123;</div><div class="line"><span class="comment">// Large write, empty buffer.</span></div><div class="line"><span class="comment">// Write directly from p to avoid copy.</span></div><div class="line">n, b.err = b.wr.Write(p)</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">n = <span class="built_in">copy</span>(b.buf[b.n:], p)</div><div class="line">b.n += n</div><div class="line">b.Flush()</div><div class="line">&#125;</div><div class="line">nn += n</div><div class="line">p = p[n:]</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span> b.err != <span class="literal">nil</span> &#123;</div><div class="line"><span class="keyword">return</span> nn, b.err</div><div class="line">&#125;</div><div class="line">n := <span class="built_in">copy</span>(b.buf[b.n:], p)</div><div class="line">b.n += n</div><div class="line">nn += n</div><div class="line"><span class="keyword">return</span> nn, <span class="literal">nil</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// WriteByte 写入单个字节。</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *Writer)</span> <span class="title">WriteByte</span><span class="params">(c <span class="keyword">byte</span>)</span> <span class="title">error</span></span> &#123;</div><div class="line"><span class="keyword">if</span> b.err != <span class="literal">nil</span> &#123;</div><div class="line"><span class="keyword">return</span> b.err</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span> b.Available() &lt;= <span class="number">0</span> &amp;&amp; b.Flush() != <span class="literal">nil</span> &#123;</div><div class="line"><span class="keyword">return</span> b.err</div><div class="line">&#125;</div><div class="line">b.buf[b.n] = c</div><div class="line">b.n++</div><div class="line"><span class="keyword">return</span> <span class="literal">nil</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// WriteRune写入一个unicode码值（的utf-8编码），返回写入的字节数和可能的错误。</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *Writer)</span> <span class="title">WriteRune</span><span class="params">(r <span class="keyword">rune</span>)</span> <span class="params">(size <span class="keyword">int</span>, err error)</span></span> &#123;</div><div class="line"><span class="keyword">if</span> r &lt; utf8.RuneSelf &#123;</div><div class="line">err = b.WriteByte(<span class="keyword">byte</span>(r))</div><div class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line"><span class="keyword">return</span> <span class="number">0</span>, err</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> <span class="number">1</span>, <span class="literal">nil</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span> b.err != <span class="literal">nil</span> &#123;</div><div class="line"><span class="keyword">return</span> <span class="number">0</span>, b.err</div><div class="line">&#125;</div><div class="line">n := b.Available()</div><div class="line"><span class="keyword">if</span> n &lt; utf8.UTFMax &#123;</div><div class="line"><span class="keyword">if</span> b.Flush(); b.err != <span class="literal">nil</span> &#123;</div><div class="line"><span class="keyword">return</span> <span class="number">0</span>, b.err</div><div class="line">&#125;</div><div class="line">n = b.Available()</div><div class="line"><span class="keyword">if</span> n &lt; utf8.UTFMax &#123;</div><div class="line"><span class="comment">// Can only happen if buffer is silly small.</span></div><div class="line"><span class="keyword">return</span> b.WriteString(<span class="keyword">string</span>(r))</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">size = utf8.EncodeRune(b.buf[b.n:], r)</div><div class="line">b.n += size</div><div class="line"><span class="keyword">return</span> size, <span class="literal">nil</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// WriteString 功能同 Write，只不过写入的是字符串。</span></div><div class="line"><span class="comment">// 返回写入的字节数。如果返回值nn &lt; len(s)，还会返回一个错误说明原因。</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *Writer)</span> <span class="title">WriteString</span><span class="params">(s <span class="keyword">string</span>)</span> <span class="params">(<span class="keyword">int</span>, error)</span></span> &#123;</div><div class="line">nn := <span class="number">0</span></div><div class="line"><span class="keyword">for</span> <span class="built_in">len</span>(s) &gt; b.Available() &amp;&amp; b.err == <span class="literal">nil</span> &#123;</div><div class="line">n := <span class="built_in">copy</span>(b.buf[b.n:], s)</div><div class="line">b.n += n</div><div class="line">nn += n</div><div class="line">s = s[n:]</div><div class="line">b.Flush()</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span> b.err != <span class="literal">nil</span> &#123;</div><div class="line"><span class="keyword">return</span> nn, b.err</div><div class="line">&#125;</div><div class="line">n := <span class="built_in">copy</span>(b.buf[b.n:], s)</div><div class="line">b.n += n</div><div class="line">nn += n</div><div class="line"><span class="keyword">return</span> nn, <span class="literal">nil</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// ReadFrom实现了io.ReaderFrom接口。</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *Writer)</span> <span class="title">ReadFrom</span><span class="params">(r io.Reader)</span> <span class="params">(n <span class="keyword">int64</span>, err error)</span></span> &#123;</div><div class="line"><span class="keyword">if</span> b.Buffered() == <span class="number">0</span> &#123;</div><div class="line"><span class="keyword">if</span> w, ok := b.wr.(io.ReaderFrom); ok &#123;</div><div class="line"><span class="keyword">return</span> w.ReadFrom(r)</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> m <span class="keyword">int</span></div><div class="line"><span class="keyword">for</span> &#123;</div><div class="line"><span class="keyword">if</span> b.Available() == <span class="number">0</span> &#123;</div><div class="line"><span class="keyword">if</span> err1 := b.Flush(); err1 != <span class="literal">nil</span> &#123;</div><div class="line"><span class="keyword">return</span> n, err1</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">nr := <span class="number">0</span></div><div class="line"><span class="keyword">for</span> nr &lt; maxConsecutiveEmptyReads &#123;</div><div class="line">m, err = r.Read(b.buf[b.n:])</div><div class="line"><span class="keyword">if</span> m != <span class="number">0</span> || err != <span class="literal">nil</span> &#123;</div><div class="line"><span class="keyword">break</span></div><div class="line">&#125;</div><div class="line">nr++</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span> nr == maxConsecutiveEmptyReads &#123;</div><div class="line"><span class="keyword">return</span> n, io.ErrNoProgress</div><div class="line">&#125;</div><div class="line">b.n += m</div><div class="line">n += <span class="keyword">int64</span>(m)</div><div class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line"><span class="keyword">break</span></div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span> err == io.EOF &#123;</div><div class="line"><span class="comment">// If we filled the buffer exactly, flush preemptively.</span></div><div class="line"><span class="keyword">if</span> b.Available() == <span class="number">0</span> &#123;</div><div class="line">err = b.Flush()</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">err = <span class="literal">nil</span></div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> n, err</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>ReadWriter 部分：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// ReadWriter类型保管了指向Reader和Writer类型的指针，因此实现了io.ReadWriter接口。</span></div><div class="line"><span class="keyword">type</span> ReadWriter <span class="keyword">struct</span> &#123;</div><div class="line">*Reader</div><div class="line">*Writer</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// NewReadWriter申请创建一个新的、将读写操作分派给r和w 的ReadWriter。</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewReadWriter</span><span class="params">(r *Reader, w *Writer)</span> *<span class="title">ReadWriter</span></span> &#123;</div><div class="line"><span class="keyword">return</span> &amp;ReadWriter&#123;r, w&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;bufio包实现了有缓冲的I/O。它包装一个io.Reader或io.Writer接口对象，创建另一个也实现了该接口，且同时还提供了缓冲和一些文本I/O的帮助函数的对象。&lt;br&gt;
    
    </summary>
    
      <category term="Golang" scheme="https://yangchenglong11.github.io/categories/Golang/"/>
    
    
      <category term="Golang" scheme="https://yangchenglong11.github.io/tags/Golang/"/>
    
  </entry>
  
  <entry>
    <title>Docker 搭建 MongoDB 分片集群</title>
    <link href="https://yangchenglong11.github.io/2017/04/23/docker%E6%90%AD%E5%BB%BAmongoDB%E5%88%86%E7%89%87%E9%9B%86%E7%BE%A4/"/>
    <id>https://yangchenglong11.github.io/2017/04/23/docker搭建mongoDB分片集群/</id>
    <published>2017-04-23T06:24:34.000Z</published>
    <updated>2017-10-28T13:44:32.997Z</updated>
    
    <content type="html"><![CDATA[<p>如何使用 Docker 搭建 MongoDB 分片集群。</p><a id="more"></a><p><strong>一、编写 dockerfile。</strong></p><p><strong>1、在适当目录下创建 mongod 的 dockerfile。</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> vi dockerfile</span></div></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash">version 1.0</span></div><div class="line">from ubuntu</div><div class="line"><span class="meta">#</span><span class="bash">maintainer </span></div><div class="line">maintainer hdx</div><div class="line"></div><div class="line"><span class="meta">#</span><span class="bash">install </span></div><div class="line">run apt-get clean</div><div class="line">run apt-get update</div><div class="line">run apt-get install -y vim</div><div class="line">run apt-get install -y openssh-server</div><div class="line">run mkdir -p /var/run/sshd</div><div class="line"></div><div class="line"><span class="meta">#</span><span class="bash">open port 22 20001</span></div><div class="line">expose 22</div><div class="line">expose 20001</div><div class="line"><span class="meta">#</span><span class="bash">cmd [<span class="string">"/usr/sbin/sshd"</span>,<span class="string">"-D"</span>]</span></div><div class="line"></div><div class="line">run apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv EA312927</div><div class="line"></div><div class="line">run echo "deb http://repo.mongodb.org/apt/debian wheezy/mongodb-org/3.2 main" | sudo tee /etc/apt/sources.list.d/mongodb-org.list</div><div class="line"><span class="meta">#</span><span class="bash">install mongodb</span></div><div class="line">run apt-get update</div><div class="line">run apt-get install -y mongodb-org</div><div class="line"><span class="meta">#</span><span class="bash">create the mongodb data directory</span></div><div class="line">run mkdir -p /data/db</div><div class="line">entrypoint ["usr/bin/mongod"]</div></pre></td></tr></table></figure><p><strong>2、在适当目录下创建 mongod 的 dockerfile_mongos。</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> vi dockerfile_mongos</span></div></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">from ubuntu/mongo:latest</div><div class="line">entrypoint ["usr/bin/mongos"]</div></pre></td></tr></table></figure><p><strong>二、通过 dockerfile 生成 image 镜像。</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> sudo docker build -t  ubuntu/mongo:latest -&lt;./dockerfile</span></div><div class="line"><span class="meta">$</span><span class="bash"> sudo docker build -t  ubuntu/mongos:latest -&lt;./dockerfile_mongos</span></div></pre></td></tr></table></figure><p>查看 image 的生成情况。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> sudo docker images</span></div></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"> REPOSITORY            TAG                 IMAGE ID            CREATED             SIZE</div><div class="line">ubuntu/mongos         latest              6de9188a6c9c        37 hours ago        459MB</div><div class="line">ubuntu/mongo          latest              e2e287510648        37 hours ago        459MB</div></pre></td></tr></table></figure><p>发现 image 已经生成，然后通过 image 来创建容器了。</p><p><strong>三、通过 image 镜像构建 mongo 集群。</strong></p><p><strong>1、创建2个分片服务(shardsvr)，每个 shardsvr 包含4个副本，其中1个主节点，2个从节点，1个仲裁节点。</strong></p><p>-d 表示后台运行</p><p>-p 绑定 host 主机与 docker 的端口，第一个20001代表 host 主机端口，第二个代表对应的 docker 端口，绑定后可以通过调用 host 主机 ip:port 来访问 docker 启动的 mongoDB，我的主机端口为 10.0.0.116，所以下面的命令中IP都为这个。</p><p>注意：一定不能退在最后添加 <code>—fork</code>，使 mongo 服务后台运行，这样 docker 会任务无事可做而自杀！</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> sudo docker run -d -p 20001:20001 --name rs1_container1 ubuntu/mongo:latest --shardsvr --port 20001 --replSet rs1</span></div><div class="line"></div><div class="line"><span class="meta">$</span><span class="bash"> sudo docker run -d -p 20002:20001 --name rs1_container2 ubuntu/mongo:latest --shardsvr --port 20001 --replSet rs1</span></div><div class="line"></div><div class="line"><span class="meta">$</span><span class="bash"> sudo docker run -d -p 20003:20001 --name rs1_container3 ubuntu/mongo:latest --shardsvr --port 20001 --replSet rs1</span></div><div class="line"></div><div class="line"><span class="meta">$</span><span class="bash"> sudo docker run -d -p 20004:20001 --name rs1_container4 ubuntu/mongo:latest --shardsvr --port 20001 --replSet rs1</span></div></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> sudo docker run -d -p 20011:20001 --name rs2_container1 ubuntu/mongo:latest --shardsvr --port 20001 --replSet rs2</span></div><div class="line"></div><div class="line"><span class="meta">$</span><span class="bash"> sudo docker run -d -p 20012:20001 --name rs2_container2 ubuntu/mongo:latest --shardsvr --port 20001 --replSet rs2</span></div><div class="line"></div><div class="line"><span class="meta">$</span><span class="bash"> sudo docker run -d -p 20013:20001 --name rs2_container3 ubuntu/mongo:latest --shardsvr --port 20001 --replSet rs2</span></div><div class="line"></div><div class="line"><span class="meta">$</span><span class="bash"> sudo docker run -d -p 20014:20001 --name rs2_container4 ubuntu/mongo:latest --shardsvr --port 20001 --replSet rs2</span></div></pre></td></tr></table></figure><p><strong>2、创建2个配置服务(configsvr)。</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> sudo docker run -d -p 21001:20001 --name config_container1 ubuntu/mongo:latest --configsvr --dbpath /data/db --replSet crs --port 20001</span></div><div class="line"></div><div class="line"><span class="meta">$</span><span class="bash"> sudo docker run -d -p 21002:20001 --name config_container2 ubuntu/mongo:latest --configsvr --dbpath /data/db --replSet crs --port 20001</span></div></pre></td></tr></table></figure><p>注意： <code>--dbpath /data/db</code> 一定要指定，因为<code>—configsvr</code> 默认路径是 <code>/data/configdb</code>，如果找不到会报错，然后 docker 直接自杀！</p><p>​  <code>--replSet crs</code> 从 mongoDB 版本3.2以后支持 configsvr 的副本集。</p><p><strong>3、启动2个路由服务（mongos）。</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> sudo docker run -d -p 22001:20001 --name mongos_container1 ubuntu/mongos:latest --configdb crs/10.0.0.116:21001,10.0.0.116:21002 --port 20001  </span></div><div class="line"></div><div class="line"><span class="meta">$</span><span class="bash"> sudo docker run -d -p 22002:20001 --name mongos_container2 ubuntu/mongos:latest --configdb crs/10.0.0.116:21001,10.0.0.116:21002 --port 20001</span></div></pre></td></tr></table></figure><p>注意： <code>crs/10.0.0.116:21001,10.0.0.116:21002</code>  mongodb 版本3.2以后通过这种形式指定 configdb，否则报错，ip 要写宿主机的实际 ip。</p><p><strong>4、查看当前 docker 服务启动情况。</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> sudo docker ps </span></div><div class="line">CONTAINER ID        IMAGE                  COMMAND                  CREATED             STATUS              PORTS                              NAMES</div><div class="line">d3bcc8c6ae02        ubuntu/mongos:latest   "usr/bin/mongos --..."   17 hours ago        Up 5 seconds        22/tcp, 0.0.0.0:22002-&gt;20001/tcp   mongos_container2</div><div class="line">532a28409c5d        ubuntu/mongos:latest   "usr/bin/mongos --..."   17 hours ago        Up 8 seconds        22/tcp, 0.0.0.0:22001-&gt;20001/tcp   mongos_container1</div><div class="line">a071366a458d        ubuntu/mongo:latest    "usr/bin/mongod --..."   17 hours ago        Up 14 seconds       22/tcp, 0.0.0.0:21002-&gt;20001/tcp   config_container2</div><div class="line">88a34cbe67a6        ubuntu/mongo:latest    "usr/bin/mongod --..."   17 hours ago        Up 18 seconds       22/tcp, 0.0.0.0:21001-&gt;20001/tcp   config_container1</div><div class="line">8cec58a3fdc4        ubuntu/mongo:latest    "usr/bin/mongod --..."   17 hours ago        Up 26 seconds       22/tcp, 0.0.0.0:20014-&gt;20001/tcp   rs2_container4</div><div class="line">910881c88d92        ubuntu/mongo:latest    "usr/bin/mongod --..."   17 hours ago        Up 29 seconds       22/tcp, 0.0.0.0:20013-&gt;20001/tcp   rs2_container3</div><div class="line">f69972ae2b0a        ubuntu/mongo:latest    "usr/bin/mongod --..."   17 hours ago        Up 31 seconds       22/tcp, 0.0.0.0:20012-&gt;20001/tcp   rs2_container2</div><div class="line">c6e8cece4ef1        ubuntu/mongo:latest    "usr/bin/mongod --..."   17 hours ago        Up 35 seconds       22/tcp, 0.0.0.0:20011-&gt;20001/tcp   rs2_container1</div><div class="line">d93dba9c36a1        ubuntu/mongo:latest    "usr/bin/mongod --..."   17 hours ago        Up 48 seconds       22/tcp, 0.0.0.0:20004-&gt;20001/tcp   rs1_container4</div><div class="line">f49ebcbfec7d        ubuntu/mongo:latest    "usr/bin/mongod --..."   17 hours ago        Up 51 seconds       22/tcp, 0.0.0.0:20003-&gt;20001/tcp   rs1_container3</div><div class="line">3f683b8848b3        ubuntu/mongo:latest    "usr/bin/mongod --..."   17 hours ago        Up 54 seconds       22/tcp, 0.0.0.0:20002-&gt;20001/tcp   rs1_container2</div><div class="line">0f0792844d9d        ubuntu/mongo:latest    "usr/bin/mongod --..."   17 hours ago        Up 56 seconds       22/tcp, 0.0.0.0:20001-&gt;20001/tcp   rs1_container1</div></pre></td></tr></table></figure><p>发现分片、配置服务、和路由服务都启动起来了。</p><p><strong>四、mongo基本操作。</strong></p><p>服务启动起来了，但是服务都是互相独立的，所以，接下来我们将这些服务器串联起来。</p><p><strong>1、初始化分片 rs1 副本集。</strong></p><p>任意选择 rs1 分片的一个副本，连接并进行配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> 主机上如果安装了 mongoDB，使用如下命令：</span></div><div class="line">yangs-MacBook-Air:~ yang$ mongo 10.0.0.116:20001</div><div class="line"><span class="meta">#</span><span class="bash"> 这个是利用 docker 连接 mongoDB 命令，连接时二者选其一即可</span></div><div class="line">yangs-MacBook-Air:~ yang$ docker exec -it mongos_container2 mongo 10.0.0.116:20001</div><div class="line"></div><div class="line"></div><div class="line"><span class="meta">#</span><span class="bash"> 切换数据库</span></div><div class="line">use admin</div><div class="line"><span class="meta">#</span><span class="bash"> 写配置文件</span></div><div class="line">config = &#123;_id:"rs1",members:[ &#123;_id:0,host:"10.0.0.116:20001"&#125;, &#123;_id:1,host:"10.0.0.116:20002"&#125;, &#123;_id:2,host:"10.0.0.116:20003"&#125;,&#123;_id:3,host:"10.0.0.116:20004",arbiterOnly:true&#125;] &#125;</div><div class="line"><span class="meta">#</span><span class="bash"> 初始化副本集</span></div><div class="line">rs.initiate(config)</div><div class="line"><span class="meta">#</span><span class="bash"> 查看副本集状态</span></div><div class="line">rs.status()</div></pre></td></tr></table></figure><p>结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div></pre></td><td class="code"><pre><div class="line">0f0792844d9d:20001(mongod-3.2.15)[PRIMARY:rs1] test&gt; rs.status()</div><div class="line">&#123;</div><div class="line">  "set": "rs1",</div><div class="line">  "date": ISODate("2017-07-27T02:00:03.335Z"),</div><div class="line">  "myState": 1,</div><div class="line">  "term": NumberLong("4"),</div><div class="line">  "heartbeatIntervalMillis": NumberLong("2000"),</div><div class="line">  "members": [</div><div class="line">    &#123;</div><div class="line">      "_id": 0,</div><div class="line">      "name": "10.0.0.116:20001",</div><div class="line">      "health": 1,</div><div class="line">      "state": 1,</div><div class="line">      "stateStr": "PRIMARY",</div><div class="line">      "uptime": 442,</div><div class="line">      "optime": &#123;</div><div class="line">        "ts": Timestamp(1501120374, 1),</div><div class="line">        "t": NumberLong("4")</div><div class="line">      &#125;,</div><div class="line">      "optimeDate": ISODate("2017-07-27T01:52:54Z"),</div><div class="line">      "electionTime": Timestamp(1501120373, 1),</div><div class="line">      "electionDate": ISODate("2017-07-27T01:52:53Z"),</div><div class="line">      "configVersion": 1,</div><div class="line">      "self": true</div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      "_id": 1,</div><div class="line">      "name": "10.0.0.116:20002",</div><div class="line">      "health": 1,</div><div class="line">      "state": 2,</div><div class="line">      "stateStr": "SECONDARY",</div><div class="line">      "uptime": 436,</div><div class="line">      "optime": &#123;</div><div class="line">        "ts": Timestamp(1501120374, 1),</div><div class="line">        "t": NumberLong("4")</div><div class="line">      &#125;,</div><div class="line">      "optimeDate": ISODate("2017-07-27T01:52:54Z"),</div><div class="line">      "lastHeartbeat": ISODate("2017-07-27T02:00:03.139Z"),</div><div class="line">      "lastHeartbeatRecv": ISODate("2017-07-27T02:00:03.139Z"),</div><div class="line">      "pingMs": NumberLong("3"),</div><div class="line">      "syncingTo": "10.0.0.116:20003",</div><div class="line">      "configVersion": 1</div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      "_id": 2,</div><div class="line">      "name": "10.0.0.116:20003",</div><div class="line">      "health": 1,</div><div class="line">      "state": 2,</div><div class="line">      "stateStr": "SECONDARY",</div><div class="line">      "uptime": 436,</div><div class="line">      "optime": &#123;</div><div class="line">        "ts": Timestamp(1501120374, 1),</div><div class="line">        "t": NumberLong("4")</div><div class="line">      &#125;,</div><div class="line">      "optimeDate": ISODate("2017-07-27T01:52:54Z"),</div><div class="line">      "lastHeartbeat": ISODate("2017-07-27T02:00:03.136Z"),</div><div class="line">      "lastHeartbeatRecv": ISODate("2017-07-27T02:00:01.665Z"),</div><div class="line">      "pingMs": NumberLong("1"),</div><div class="line">      "syncingTo": "10.0.0.116:20001",</div><div class="line">      "configVersion": 1</div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      "_id": 3,</div><div class="line">      "name": "10.0.0.116:20004",</div><div class="line">      "health": 1,</div><div class="line">      "state": 7,</div><div class="line">      "stateStr": "ARBITER",</div><div class="line">      "uptime": 431,</div><div class="line">      "lastHeartbeat": ISODate("2017-07-27T02:00:03.136Z"),</div><div class="line">      "lastHeartbeatRecv": ISODate("2017-07-27T01:59:59.780Z"),</div><div class="line">      "pingMs": NumberLong("1"),</div><div class="line">      "configVersion": 1</div><div class="line">    &#125;</div><div class="line">  ],</div><div class="line">  "ok": 1</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>2、初始化分片 rs2 副本集。</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> 任意选择 rs2 分片的一个副本</span></div><div class="line">yangs-MacBook-Air:~ yang$ mongo 10.0.0.116:20011</div><div class="line"><span class="meta">#</span><span class="bash"> 切换数据库</span></div><div class="line">use admin</div><div class="line"><span class="meta">#</span><span class="bash"> 写配置文件</span></div><div class="line">config = &#123;_id:"rs2",members:[ &#123;_id:0,host:"10.0.0.116:20011"&#125;, &#123;_id:1,host:"10.0.0.116:20012"&#125;, &#123;_id:2,host:"10.0.0.116:20013"&#125;,&#123;_id:3,host:"10.0.0.116:20014",arbiterOnly:true&#125;] &#125;</div><div class="line"><span class="meta">#</span><span class="bash"> 初始化副本集</span></div><div class="line">rs.initiate(config)</div><div class="line"><span class="meta">#</span><span class="bash"> 查看副本集状态</span></div><div class="line">rs.status()</div></pre></td></tr></table></figure><p><strong>3、初始化配置服务副本集。</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> 任意选择 crs 分片的一个副本</span></div><div class="line">yangs-MacBook-Air:~ yang$ mongo 10.0.0.116:21001</div><div class="line"><span class="meta">#</span><span class="bash"> 切换数据库</span></div><div class="line">use admin</div><div class="line"><span class="meta">#</span><span class="bash"> 写配置文件</span></div><div class="line">config = &#123;_id:"crs", configsvr:true, members:[ &#123;_id:0,host:"10.0.0.116:21001"&#125;, &#123;_id:1,host:"10.0.0.116:21002"&#125; ] &#125;</div><div class="line"><span class="meta">#</span><span class="bash"> 初始化副本集</span></div><div class="line">rs.initiate(config)</div><div class="line"><span class="meta">#</span><span class="bash"> 查看副本集状态</span></div><div class="line">rs.status()</div></pre></td></tr></table></figure><p><strong>4、通过 mongos 添加分片关系到 configsvr。</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">yangs-MacBook-Air:~ yang$ mongo 10.0.0.116:22001</div><div class="line">use admin</div><div class="line">db.runCommand(&#123;addshard:"rs1/10.0.0.116:20001,10.0.0.116:20002,10.0.0.116:20003,10.0.0.116:20004"&#125;)</div><div class="line">db.runCommand(&#123;addshard:"rs2/10.0.0.116:20011,10.0.0.116:20012,10.0.0.116:20013,10.0.0.116:20014"&#125;)</div></pre></td></tr></table></figure><p>查询结果如下：仲裁节点没有显示。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">532a28409c5d:20001(mongos-3.2.15)[mongos] admin&gt; db.runCommand(&#123;listshards:1&#125;)</div><div class="line">&#123;</div><div class="line">  "shards": [</div><div class="line">    &#123;</div><div class="line">      "_id": "rs1",</div><div class="line">      "host": "rs1/10.0.0.116:20001,10.0.0.116:20002,10.0.0.116:20003"</div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      "_id": "rs2",</div><div class="line">      "host": "rs2/10.0.0.116:20011,10.0.0.116:20012,10.0.0.116:20013"</div><div class="line">    &#125;</div><div class="line">  ],</div><div class="line">  "ok": 1</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>5、设置数据库、集合分片。</strong></p><p>设置索引， 为了数据被均衡分发，我们创建散列索引</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> 在 mongos 中</span></div><div class="line">use mydb</div><div class="line">db.person.ensureIndex(&#123;id: "hashed"&#125;)</div></pre></td></tr></table></figure><p> 设置集合分片</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> 在 mongos 中</span></div><div class="line">db.runCommand(&#123;enablesharding:"mydb"&#125;)</div><div class="line">db.runCommand(&#123;shardcollection:"mydb.person", key:&#123;id:"hashed"&#125;&#125;)</div></pre></td></tr></table></figure><p>设置数据库 mydb、mydb 中 person 集合应用分片，片键为 person 集合的 id 字段。</p><p>说明：并不是数据库中所有集合都分片，只有设置了shardcollection 才分片，因为不是所有的集合都需要分片。</p><p><strong>6、测试分片结果。</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">use mydb</div><div class="line">for (i =0; i&lt;5000;i++)&#123;</div><div class="line">db.person.save(&#123;id:i, company:"smartestee"&#125;)&#125;</div></pre></td></tr></table></figure><p>测试结果如下：发现已经成功分片，rs1 和 rs2 较为均匀，这和片键有关系，具体情况请查询如何选择片键。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div><div class="line">284</div><div class="line">285</div><div class="line">286</div><div class="line">287</div><div class="line">288</div><div class="line">289</div><div class="line">290</div><div class="line">291</div><div class="line">292</div><div class="line">293</div><div class="line">294</div><div class="line">295</div><div class="line">296</div><div class="line">297</div><div class="line">298</div><div class="line">299</div><div class="line">300</div><div class="line">301</div><div class="line">302</div><div class="line">303</div><div class="line">304</div><div class="line">305</div><div class="line">306</div><div class="line">307</div><div class="line">308</div><div class="line">309</div><div class="line">310</div><div class="line">311</div><div class="line">312</div><div class="line">313</div><div class="line">314</div><div class="line">315</div><div class="line">316</div><div class="line">317</div><div class="line">318</div><div class="line">319</div><div class="line">320</div><div class="line">321</div><div class="line">322</div><div class="line">323</div><div class="line">324</div><div class="line">325</div><div class="line">326</div><div class="line">327</div><div class="line">328</div><div class="line">329</div><div class="line">330</div><div class="line">331</div><div class="line">332</div><div class="line">333</div><div class="line">334</div><div class="line">335</div><div class="line">336</div><div class="line">337</div><div class="line">338</div><div class="line">339</div><div class="line">340</div><div class="line">341</div><div class="line">342</div><div class="line">343</div><div class="line">344</div><div class="line">345</div><div class="line">346</div></pre></td><td class="code"><pre><div class="line">532a28409c5d:20001(mongos-3.2.15)[mongos] mydb&gt; db.person.stats()</div><div class="line">&#123;</div><div class="line">  "sharded": true,</div><div class="line">  "capped": false,</div><div class="line">  "ns": "mydb.person",</div><div class="line">  "count": 5000,</div><div class="line">  "size": 277766,</div><div class="line">  "storageSize": 196608,</div><div class="line">  "totalIndexSize": 323584,</div><div class="line">  "indexSizes": &#123;</div><div class="line">    "_id_": 122880,</div><div class="line">    "id_hashed": 200704</div><div class="line">  &#125;,</div><div class="line">  "avgObjSize": 55.5532,</div><div class="line">  "nindexes": 2,</div><div class="line">  "nchunks": 4,</div><div class="line">  "shards": &#123;</div><div class="line">    "rs1": &#123;</div><div class="line">      "ns": "mydb.person",</div><div class="line">      "count": 2480,</div><div class="line">      "size": 137486,</div><div class="line">      "avgObjSize": 55,</div><div class="line">      "storageSize": 94208,</div><div class="line">      "capped": false,</div><div class="line">      "wiredTiger": &#123;</div><div class="line">        "metadata": &#123;</div><div class="line">          "formatVersion": 1</div><div class="line">        &#125;,</div><div class="line">        "creationString": "access_pattern_hint=none,allocation_size=4KB,app_metadata=(formatVersion=1),block_allocation=best,block_compressor=snappy,cache_resident=false,checksum=on,colgroups=,collator=,columns=,dictionary=0,encryption=(keyid=,name=),exclusive=false,extractor=,format=btree,huffman_key=,huffman_value=,ignore_in_memory_cache_size=false,immutable=false,internal_item_max=0,internal_key_max=0,internal_key_truncate=true,internal_page_max=4KB,key_format=q,key_gap=10,leaf_item_max=0,leaf_key_max=0,leaf_page_max=32KB,leaf_value_max=64MB,log=(enabled=true),lsm=(auto_throttle=true,bloom=true,bloom_bit_count=16,bloom_config=,bloom_hash_count=8,bloom_oldest=false,chunk_count_limit=0,chunk_max=5GB,chunk_size=10MB,merge_max=15,merge_min=0),memory_page_max=10m,os_cache_dirty_max=0,os_cache_max=0,prefix_compression=false,prefix_compression_min=4,source=,split_deepen_min_child=0,split_deepen_per_child=0,split_pct=90,type=file,value_format=u",</div><div class="line">        "type": "file",</div><div class="line">        "uri": "statistics:table:collection-16-4938398221887072838",</div><div class="line">        "LSM": &#123;</div><div class="line">          "bloom filter false positives": 0,</div><div class="line">          "bloom filter hits": 0,</div><div class="line">          "bloom filter misses": 0,</div><div class="line">          "bloom filter pages evicted from cache": 0,</div><div class="line">          "bloom filter pages read into cache": 0,</div><div class="line">          "bloom filters in the LSM tree": 0,</div><div class="line">          "chunks in the LSM tree": 0,</div><div class="line">          "highest merge generation in the LSM tree": 0,</div><div class="line">          "queries that could have benefited from a Bloom filter that did not exist": 0,</div><div class="line">          "sleep for LSM checkpoint throttle": 0,</div><div class="line">          "sleep for LSM merge throttle": 0,</div><div class="line">          "total size of bloom filters": 0</div><div class="line">        &#125;,</div><div class="line">        "block-manager": &#123;</div><div class="line">          "allocations requiring file extension": 0,</div><div class="line">          "blocks allocated": 0,</div><div class="line">          "blocks freed": 0,</div><div class="line">          "checkpoint size": 40960,</div><div class="line">          "file allocation unit size": 4096,</div><div class="line">          "file bytes available for reuse": 36864,</div><div class="line">          "file magic number": 120897,</div><div class="line">          "file major version number": 1,</div><div class="line">          "file size in bytes": 94208,</div><div class="line">          "minor version number": 0</div><div class="line">        &#125;,</div><div class="line">        "btree": &#123;</div><div class="line">          "btree checkpoint generation": 4,</div><div class="line">          "column-store fixed-size leaf pages": 0,</div><div class="line">          "column-store internal pages": 0,</div><div class="line">          "column-store variable-size RLE encoded values": 0,</div><div class="line">          "column-store variable-size deleted values": 0,</div><div class="line">          "column-store variable-size leaf pages": 0,</div><div class="line">          "fixed-record size": 0,</div><div class="line">          "maximum internal page key size": 368,</div><div class="line">          "maximum internal page size": 4096,</div><div class="line">          "maximum leaf page key size": 2867,</div><div class="line">          "maximum leaf page size": 32768,</div><div class="line">          "maximum leaf page value size": 67108864,</div><div class="line">          "maximum tree depth": 0,</div><div class="line">          "number of key/value pairs": 0,</div><div class="line">          "overflow pages": 0,</div><div class="line">          "pages rewritten by compaction": 0,</div><div class="line">          "row-store internal pages": 0,</div><div class="line">          "row-store leaf pages": 0</div><div class="line">        &#125;,</div><div class="line">        "cache": &#123;</div><div class="line">          "bytes currently in the cache": 21314,</div><div class="line">          "bytes read into cache": 16816,</div><div class="line">          "bytes written from cache": 0,</div><div class="line">          "checkpoint blocked page eviction": 0,</div><div class="line">          "data source pages selected for eviction unable to be evicted": 0,</div><div class="line">          "hazard pointer blocked page eviction": 0,</div><div class="line">          "in-memory page passed criteria to be split": 0,</div><div class="line">          "in-memory page splits": 0,</div><div class="line">          "internal pages evicted": 0,</div><div class="line">          "internal pages split during eviction": 0,</div><div class="line">          "leaf pages split during eviction": 0,</div><div class="line">          "modified pages evicted": 0,</div><div class="line">          "overflow pages read into cache": 0,</div><div class="line">          "overflow values cached in memory": 0,</div><div class="line">          "page split during eviction deepened the tree": 0,</div><div class="line">          "page written requiring lookaside records": 0,</div><div class="line">          "pages read into cache": 2,</div><div class="line">          "pages read into cache requiring lookaside entries": 0,</div><div class="line">          "pages requested from the cache": 1,</div><div class="line">          "pages written from cache": 0,</div><div class="line">          "pages written requiring in-memory restoration": 0,</div><div class="line">          "tracked dirty bytes in the cache": 0,</div><div class="line">          "unmodified pages evicted": 0</div><div class="line">        &#125;,</div><div class="line">        "cache_walk": &#123;</div><div class="line">          "Average difference between current eviction generation when the page was last considered": 0,</div><div class="line">          "Average on-disk page image size seen": 0,</div><div class="line">          "Clean pages currently in cache": 0,</div><div class="line">          "Current eviction generation": 0,</div><div class="line">          "Dirty pages currently in cache": 0,</div><div class="line">          "Entries in the root page": 0,</div><div class="line">          "Internal pages currently in cache": 0,</div><div class="line">          "Leaf pages currently in cache": 0,</div><div class="line">          "Maximum difference between current eviction generation when the page was last considered": 0,</div><div class="line">          "Maximum page size seen": 0,</div><div class="line">          "Minimum on-disk page image size seen": 0,</div><div class="line">          "On-disk page image sizes smaller than a single allocation unit": 0,</div><div class="line">          "Pages created in memory and never written": 0,</div><div class="line">          "Pages currently queued for eviction": 0,</div><div class="line">          "Pages that could not be queued for eviction": 0,</div><div class="line">          "Refs skipped during cache traversal": 0,</div><div class="line">          "Size of the root page": 0,</div><div class="line">          "Total number of pages currently in cache": 0</div><div class="line">        &#125;,</div><div class="line">        "compression": &#123;</div><div class="line">          "compressed pages read": 1,</div><div class="line">          "compressed pages written": 0,</div><div class="line">          "page written failed to compress": 0,</div><div class="line">          "page written was too small to compress": 0,</div><div class="line">          "raw compression call failed, additional data available": 0,</div><div class="line">          "raw compression call failed, no additional data available": 0,</div><div class="line">          "raw compression call succeeded": 0</div><div class="line">        &#125;,</div><div class="line">        "cursor": &#123;</div><div class="line">          "bulk-loaded cursor-insert calls": 0,</div><div class="line">          "create calls": 1,</div><div class="line">          "cursor-insert key and value bytes inserted": 0,</div><div class="line">          "cursor-remove key bytes removed": 0,</div><div class="line">          "cursor-update value bytes updated": 0,</div><div class="line">          "insert calls": 0,</div><div class="line">          "next calls": 0,</div><div class="line">          "prev calls": 1,</div><div class="line">          "remove calls": 0,</div><div class="line">          "reset calls": 1,</div><div class="line">          "restarted searches": 0,</div><div class="line">          "search calls": 0,</div><div class="line">          "search near calls": 0,</div><div class="line">          "truncate calls": 0,</div><div class="line">          "update calls": 0</div><div class="line">        &#125;,</div><div class="line">        "reconciliation": &#123;</div><div class="line">          "dictionary matches": 0,</div><div class="line">          "fast-path pages deleted": 0,</div><div class="line">          "internal page key bytes discarded using suffix compression": 0,</div><div class="line">          "internal page multi-block writes": 0,</div><div class="line">          "internal-page overflow keys": 0,</div><div class="line">          "leaf page key bytes discarded using prefix compression": 0,</div><div class="line">          "leaf page multi-block writes": 0,</div><div class="line">          "leaf-page overflow keys": 0,</div><div class="line">          "maximum blocks required for a page": 0,</div><div class="line">          "overflow values written": 0,</div><div class="line">          "page checksum matches": 0,</div><div class="line">          "page reconciliation calls": 0,</div><div class="line">          "page reconciliation calls for eviction": 0,</div><div class="line">          "pages deleted": 0</div><div class="line">        &#125;,</div><div class="line">        "session": &#123;</div><div class="line">          "object compaction": 0,</div><div class="line">          "open cursor count": 1</div><div class="line">        &#125;,</div><div class="line">        "transaction": &#123;</div><div class="line">          "update conflicts": 0</div><div class="line">        &#125;</div><div class="line">      &#125;,</div><div class="line">      "nindexes": 2,</div><div class="line">      "totalIndexSize": 159744,</div><div class="line">      "indexSizes": &#123;</div><div class="line">        "_id_": 61440,</div><div class="line">        "id_hashed": 98304</div><div class="line">      &#125;,</div><div class="line">      "ok": 1</div><div class="line">    &#125;,</div><div class="line">    "rs2": &#123;</div><div class="line">      "ns": "mydb.person",</div><div class="line">      "count": 2520,</div><div class="line">      "size": 140280,</div><div class="line">      "avgObjSize": 55,</div><div class="line">      "storageSize": 102400,</div><div class="line">      "capped": false,</div><div class="line">      "wiredTiger": &#123;</div><div class="line">        "metadata": &#123;</div><div class="line">          "formatVersion": 1</div><div class="line">        &#125;,</div><div class="line">        "creationString": "access_pattern_hint=none,allocation_size=4KB,app_metadata=(formatVersion=1),block_allocation=best,block_compressor=snappy,cache_resident=false,checksum=on,colgroups=,collator=,columns=,dictionary=0,encryption=(keyid=,name=),exclusive=false,extractor=,format=btree,huffman_key=,huffman_value=,ignore_in_memory_cache_size=false,immutable=false,internal_item_max=0,internal_key_max=0,internal_key_truncate=true,internal_page_max=4KB,key_format=q,key_gap=10,leaf_item_max=0,leaf_key_max=0,leaf_page_max=32KB,leaf_value_max=64MB,log=(enabled=true),lsm=(auto_throttle=true,bloom=true,bloom_bit_count=16,bloom_config=,bloom_hash_count=8,bloom_oldest=false,chunk_count_limit=0,chunk_max=5GB,chunk_size=10MB,merge_max=15,merge_min=0),memory_page_max=10m,os_cache_dirty_max=0,os_cache_max=0,prefix_compression=false,prefix_compression_min=4,source=,split_deepen_min_child=0,split_deepen_per_child=0,split_pct=90,type=file,value_format=u",</div><div class="line">        "type": "file",</div><div class="line">        "uri": "statistics:table:collection-16--4365114664988837133",</div><div class="line">        "LSM": &#123;</div><div class="line">          "bloom filter false positives": 0,</div><div class="line">          "bloom filter hits": 0,</div><div class="line">          "bloom filter misses": 0,</div><div class="line">          "bloom filter pages evicted from cache": 0,</div><div class="line">          "bloom filter pages read into cache": 0,</div><div class="line">          "bloom filters in the LSM tree": 0,</div><div class="line">          "chunks in the LSM tree": 0,</div><div class="line">          "highest merge generation in the LSM tree": 0,</div><div class="line">          "queries that could have benefited from a Bloom filter that did not exist": 0,</div><div class="line">          "sleep for LSM checkpoint throttle": 0,</div><div class="line">          "sleep for LSM merge throttle": 0,</div><div class="line">          "total size of bloom filters": 0</div><div class="line">        &#125;,</div><div class="line">        "block-manager": &#123;</div><div class="line">          "allocations requiring file extension": 0,</div><div class="line">          "blocks allocated": 0,</div><div class="line">          "blocks freed": 0,</div><div class="line">          "checkpoint size": 45056,</div><div class="line">          "file allocation unit size": 4096,</div><div class="line">          "file bytes available for reuse": 40960,</div><div class="line">          "file magic number": 120897,</div><div class="line">          "file major version number": 1,</div><div class="line">          "file size in bytes": 102400,</div><div class="line">          "minor version number": 0</div><div class="line">        &#125;,</div><div class="line">        "btree": &#123;</div><div class="line">          "btree checkpoint generation": 4,</div><div class="line">          "column-store fixed-size leaf pages": 0,</div><div class="line">          "column-store internal pages": 0,</div><div class="line">          "column-store variable-size RLE encoded values": 0,</div><div class="line">          "column-store variable-size deleted values": 0,</div><div class="line">          "column-store variable-size leaf pages": 0,</div><div class="line">          "fixed-record size": 0,</div><div class="line">          "maximum internal page key size": 368,</div><div class="line">          "maximum internal page size": 4096,</div><div class="line">          "maximum leaf page key size": 2867,</div><div class="line">          "maximum leaf page size": 32768,</div><div class="line">          "maximum leaf page value size": 67108864,</div><div class="line">          "maximum tree depth": 0,</div><div class="line">          "number of key/value pairs": 0,</div><div class="line">          "overflow pages": 0,</div><div class="line">          "pages rewritten by compaction": 0,</div><div class="line">          "row-store internal pages": 0,</div><div class="line">          "row-store leaf pages": 0</div><div class="line">        &#125;,</div><div class="line">        "cache": &#123;</div><div class="line">          "bytes currently in the cache": 24852,</div><div class="line">          "bytes read into cache": 19676,</div><div class="line">          "bytes written from cache": 0,</div><div class="line">          "checkpoint blocked page eviction": 0,</div><div class="line">          "data source pages selected for eviction unable to be evicted": 0,</div><div class="line">          "hazard pointer blocked page eviction": 0,</div><div class="line">          "in-memory page passed criteria to be split": 0,</div><div class="line">          "in-memory page splits": 0,</div><div class="line">          "internal pages evicted": 0,</div><div class="line">          "internal pages split during eviction": 0,</div><div class="line">          "leaf pages split during eviction": 0,</div><div class="line">          "modified pages evicted": 0,</div><div class="line">          "overflow pages read into cache": 0,</div><div class="line">          "overflow values cached in memory": 0,</div><div class="line">          "page split during eviction deepened the tree": 0,</div><div class="line">          "page written requiring lookaside records": 0,</div><div class="line">          "pages read into cache": 2,</div><div class="line">          "pages read into cache requiring lookaside entries": 0,</div><div class="line">          "pages requested from the cache": 1,</div><div class="line">          "pages written from cache": 0,</div><div class="line">          "pages written requiring in-memory restoration": 0,</div><div class="line">          "tracked dirty bytes in the cache": 0,</div><div class="line">          "unmodified pages evicted": 0</div><div class="line">        &#125;,</div><div class="line">        "cache_walk": &#123;</div><div class="line">          "Average difference between current eviction generation when the page was last considered": 0,</div><div class="line">          "Average on-disk page image size seen": 0,</div><div class="line">          "Clean pages currently in cache": 0,</div><div class="line">          "Current eviction generation": 0,</div><div class="line">          "Dirty pages currently in cache": 0,</div><div class="line">          "Entries in the root page": 0,</div><div class="line">          "Internal pages currently in cache": 0,</div><div class="line">          "Leaf pages currently in cache": 0,</div><div class="line">          "Maximum difference between current eviction generation when the page was last considered": 0,</div><div class="line">          "Maximum page size seen": 0,</div><div class="line">          "Minimum on-disk page image size seen": 0,</div><div class="line">          "On-disk page image sizes smaller than a single allocation unit": 0,</div><div class="line">          "Pages created in memory and never written": 0,</div><div class="line">          "Pages currently queued for eviction": 0,</div><div class="line">          "Pages that could not be queued for eviction": 0,</div><div class="line">          "Refs skipped during cache traversal": 0,</div><div class="line">          "Size of the root page": 0,</div><div class="line">          "Total number of pages currently in cache": 0</div><div class="line">        &#125;,</div><div class="line">        "compression": &#123;</div><div class="line">          "compressed pages read": 1,</div><div class="line">          "compressed pages written": 0,</div><div class="line">          "page written failed to compress": 0,</div><div class="line">          "page written was too small to compress": 0,</div><div class="line">          "raw compression call failed, additional data available": 0,</div><div class="line">          "raw compression call failed, no additional data available": 0,</div><div class="line">          "raw compression call succeeded": 0</div><div class="line">        &#125;,</div><div class="line">        "cursor": &#123;</div><div class="line">          "bulk-loaded cursor-insert calls": 0,</div><div class="line">          "create calls": 1,</div><div class="line">          "cursor-insert key and value bytes inserted": 0,</div><div class="line">          "cursor-remove key bytes removed": 0,</div><div class="line">          "cursor-update value bytes updated": 0,</div><div class="line">          "insert calls": 0,</div><div class="line">          "next calls": 0,</div><div class="line">          "prev calls": 1,</div><div class="line">          "remove calls": 0,</div><div class="line">          "reset calls": 1,</div><div class="line">          "restarted searches": 0,</div><div class="line">          "search calls": 0,</div><div class="line">          "search near calls": 0,</div><div class="line">          "truncate calls": 0,</div><div class="line">          "update calls": 0</div><div class="line">        &#125;,</div><div class="line">        "reconciliation": &#123;</div><div class="line">          "dictionary matches": 0,</div><div class="line">          "fast-path pages deleted": 0,</div><div class="line">          "internal page key bytes discarded using suffix compression": 0,</div><div class="line">          "internal page multi-block writes": 0,</div><div class="line">          "internal-page overflow keys": 0,</div><div class="line">          "leaf page key bytes discarded using prefix compression": 0,</div><div class="line">          "leaf page multi-block writes": 0,</div><div class="line">          "leaf-page overflow keys": 0,</div><div class="line">          "maximum blocks required for a page": 0,</div><div class="line">          "overflow values written": 0,</div><div class="line">          "page checksum matches": 0,</div><div class="line">          "page reconciliation calls": 0,</div><div class="line">          "page reconciliation calls for eviction": 0,</div><div class="line">          "pages deleted": 0</div><div class="line">        &#125;,</div><div class="line">        "session": &#123;</div><div class="line">          "object compaction": 0,</div><div class="line">          "open cursor count": 1</div><div class="line">        &#125;,</div><div class="line">        "transaction": &#123;</div><div class="line">          "update conflicts": 0</div><div class="line">        &#125;</div><div class="line">      &#125;,</div><div class="line">      "nindexes": 2,</div><div class="line">      "totalIndexSize": 163840,</div><div class="line">      "indexSizes": &#123;</div><div class="line">        "_id_": 61440,</div><div class="line">        "id_hashed": 102400</div><div class="line">      &#125;,</div><div class="line">      "ok": 1</div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line">  "ok": 1</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;如何使用 Docker 搭建 MongoDB 分片集群。&lt;/p&gt;
    
    </summary>
    
      <category term="MongoDB" scheme="https://yangchenglong11.github.io/categories/MongoDB/"/>
    
    
      <category term="MongoDB" scheme="https://yangchenglong11.github.io/tags/MongoDB/"/>
    
  </entry>
  
  <entry>
    <title>Linux 的I/O 模型</title>
    <link href="https://yangchenglong11.github.io/2017/04/11/Linux-%E7%9A%84I-O-%E6%A8%A1%E5%9E%8B/"/>
    <id>https://yangchenglong11.github.io/2017/04/11/Linux-的I-O-模型/</id>
    <published>2017-04-11T13:05:37.000Z</published>
    <updated>2017-10-28T13:17:40.143Z</updated>
    
    <content type="html"><![CDATA[<p>进行后台开发时，经常需要进行数据传输，其数据传输归根结底还是Linux 的I/O 操作，今天就来讲下 Linux 的I/O 模型。</p><a id="more"></a><h2 id="1、介绍"><a href="#1、介绍" class="headerlink" title="1、介绍"></a>1、介绍</h2><p>Linux 的内核将所有外部设备都看做一个文件来操作（一切皆文件），对一个文件的读写操作会调用内核提供的系统命令，返回一个file descriptor（fd，文件描述符）。而对一个socket的读写也会有相应的描述符，称为socket fd（socket文件描述符），描述符就是一个数字，指向内核中的一个结构体（文件路径，数据区等一些属性）。</p><p>服务器端编程经常需要构造高性能的IO模型，Linux的IO模型有五种：</p><ul><li>同步阻塞IO（BlockingIO）：即传统的IO模型。</li><li>同步非阻塞IO（Non-blockingIO）：默认创建的socket都是阻塞的，非阻塞IO要求socket被设置为NONBLOCK。注意这里所说的NIO并非Java的NIO（NewIO）库。</li><li>IO多路复用（IOMultiplexing）：即经典的Reactor设计模式，有时也称为异步阻塞IO，Linux中的epoll就是这种模型。</li><li>信号驱动式I/O（signal-driven I/O）：即基于信号驱动的IO（SignalDrivenIO）模型。</li><li>异步IO（AsynchronousIO）：即经典的Proactor设计模式，也称为异步非阻塞IO。</li></ul><p><strong>同步和异步的概念描述的是用户线程与内核的交互方式：同步是指用户线程发起IO请求后需要等待或者轮询内核IO操作完成后才能继续执行；而异步是指用户线程发起IO请求后仍继续执行，当内核IO操作完成后会通知用户线程，或者调用用户线程注册的回调函数</strong>。<br><strong>阻塞和非阻塞的概念描述的是用户线程调用内核IO操作的方式：阻塞是指IO操作需要彻底完成后才返回到用户空间；而非阻塞是指IO操作被调用后立即返回给用户一个状态值，无需等到IO操作彻底完成。</strong></p><p>接下来，我们详细分析五种常见的IO模型的实现原理。为了方便描述，我们统一使用IO的读操作作为示例。</p><h4 id="1、阻塞I-O模型"><a href="#1、阻塞I-O模型" class="headerlink" title="1、阻塞I/O模型"></a>1、阻塞I/O模型</h4><p>阻塞I/O是最流行的I/O模型。它符合人们最常见的思考逻辑。<strong>阻塞就是进程 “被” 休息, CPU处理其它进程去了</strong>。在网络I/O的时候，进程发起<code>recvform</code>系统调用，然后进程就被阻塞了，什么也不干，直到数据准备好，并且将数据从内核复制到用户进程，最后进程再处理数据，在等待数据到处理数据的两个阶段，整个进程都被阻塞。不能处理别的网络I/O。</p><p>图示：</p><p> <img src="http://blog.anxpp.com/usr/uploads/2016/05/1140040694.png" alt="01"></p><p>阻塞IO的特点就是在IO执行的两个阶段都被block了。</p><h4 id="2、非阻塞I-O模型"><a href="#2、非阻塞I-O模型" class="headerlink" title="2、非阻塞I/O模型"></a>2、非阻塞I/O模型</h4><p>在网络I/O时候，非阻塞I/O也会进行recvform系统调用，检查数据是否准备好，与阻塞I/O不一样，”非阻塞将大的整片时间的阻塞分成N多的小的阻塞, 所以进程不断地有机会 ‘被’ CPU光顾”。</p><p>也就是说非阻塞的recvform系统调用调用之后，进程并没有被阻塞，内核马上返回给进程，如果数据还没准备好，此时会返回一个error。进程在返回之后，可以干点别的事情，然后再发起recvform系统调用。重复上面的过程，循环往复的进行recvform系统调用。这个过程通常被称之为<code>轮询</code>。轮询检查内核数据，直到数据准备好，再拷贝数据到进程，进行数据处理。需要注意，拷贝数据整个过程，进程仍然是属于阻塞的状态。</p><p>图示：</p><p><img src="http://blog.anxpp.com/usr/uploads/2016/05/2665563581.png" alt="02"></p><p>非阻塞 IO的特点是用户进程需要<strong>不断的主动询问</strong>kernel数据是否准备好</p><h4 id="3、I-O复用模型"><a href="#3、I-O复用模型" class="headerlink" title="3、I/O复用模型"></a>3、I/O复用模型</h4><p>可以看出，由于非阻塞的调用，轮询占据了很大一部分过程，轮询会消耗大量的CPU时间。结合前面两种模式。如果轮询不是进程的用户态，而是有人帮忙就好了。多路复用正好处理这样的问题。</p><p>多路复用有两个特别的系统调用<code>select</code>或<code>poll</code>。select调用是内核级别的，select轮询相对非阻塞的轮询的区别在于—前者可以等待多个socket，当其中任何一个socket的数据准好了，就能返回进行可读，然后进程再进行recvform系统调用，将数据由内核拷贝到用户进程，当然这个过程是阻塞的。多路复用有两种阻塞，select或poll调用之后，会阻塞进程，与第一种阻塞不同在于，此时的select不是等到socket数据全部到达再处理, 而是有了一部分数据就会调用用户进程来处理。如何知道有一部分数据到达了呢？监视的事情交给了内核，内核负责数据到达的处理。</p><p>图示：</p><p><img src="http://blog.anxpp.com/usr/uploads/2016/05/860854051.png" alt="03"></p><p>多路复用的特点是通过一种机制一个进程能同时等待IO文件描述符，内核监视这些文件描述符（套接字描述符），其中的任意一个进入读就绪状态，select， poll，epoll函数就可以返回。对于监视的方式，又可以分为 select， poll， epoll三种方式。</p><p>I/O多路复用技术通过把多个I/O的阻塞复用到同一个select的阻塞上，从而使得系统在单线程的情况下可以同时处理多个客户端请求。</p><p>与传统的多线程模型相比，I/O多路复用的最大优势就是系统开销小，系统不需要创建新的额外线程，也不需要维护这些线程的运行，降低了系统的维护工作量，节省了系统资源。</p><p>主要的应用场景：</p><ul><li>​    服务器需要同时处理多个处于监听状态或多个连接状态的套接字。</li><li>​    服务器需要同时处理多种网络协议的套接字。</li></ul><p>支持I/O多路复用的系统调用主要有select、pselect、poll、epoll。</p><p>而当前推荐使用的是epoll，优势如下：</p><ul><li>​    支持一个进程打开的socket fd不受限制。</li><li>​    I/O效率不会随着fd数目的增加而线性下将。</li><li>​    使用mmap加速内核与用户空间的消息传递。</li><li>​    epoll拥有更加简单的API。</li></ul><h4 id="4、信号驱动I-O模型"><a href="#4、信号驱动I-O模型" class="headerlink" title="4、信号驱动I/O模型"></a>4、信号驱动I/O模型</h4><p> 在这种模型下，我们首先开启套接字的信号驱动式I/O功能，并通过sigaction系统调用安装一个信号处理函数。改系统调用将立即返回，我们的进程继续工作，也就是说他没有被阻塞。当数据报准备好读取时，内核就为该进程产生一个SIGIO信号。我们随后就可以在信号处理函数中调用read读取数据报，并通知主循环数据已经准备好待处理，也可以立即通知主循环，让它读取数据报。</p><p>图示：</p><p> <img src="http://blog.anxpp.com/usr/uploads/2016/05/3322063871.png" alt="04"></p><p>无论如何处理SIGIO信号，这种模型的优势在于等待数据报到达期间进程不被阻塞。主循环可以继续执行，只要等到来自信号处理函数的通知：既可以是数据已准备好被处理，也可以是数据报已准备好被读取。</p><h4 id="5、异步I-O"><a href="#5、异步I-O" class="headerlink" title="5、异步I/O"></a>5、异步I/O</h4><p>相对于同步I/O，异步I/O不是顺序执行。用户进程进行<code>aio_read</code>系统调用之后，无论内核数据是否准备好，都会直接返回给用户进程，然后用户态进程可以去做别的事情。等到socket数据准备好了，内核直接复制数据给进程，然后从内核向进程发送通知。I/O两个阶段，进程都是非阻塞的。</p><p>图示：</p><p> <img src="http://blog.anxpp.com/usr/uploads/2016/05/4059852491.png" alt="05"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;进行后台开发时，经常需要进行数据传输，其数据传输归根结底还是Linux 的I/O 操作，今天就来讲下 Linux 的I/O 模型。&lt;/p&gt;
    
    </summary>
    
      <category term="Linux" scheme="https://yangchenglong11.github.io/categories/Linux/"/>
    
    
      <category term="Linux" scheme="https://yangchenglong11.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>mgo 断线重连</title>
    <link href="https://yangchenglong11.github.io/2017/04/03/mgo-%E6%96%AD%E7%BA%BF%E9%87%8D%E8%BF%9E/"/>
    <id>https://yangchenglong11.github.io/2017/04/03/mgo-断线重连/</id>
    <published>2017-04-03T11:21:25.000Z</published>
    <updated>2017-10-28T13:41:51.987Z</updated>
    
    <content type="html"><![CDATA[<p>Mongo 使用起来很方便，但有时因为网络抖动导致连接断开，而后台服务却不知道，这样就会导致服务出现问题，今天来看下怎样实现 mgo 断线自动重连。<br><a id="more"></a></p><p>使用 mgo 时，当远端的 session 挂掉, 其实底层已经做了重连的机制，但是没有通知上层的 session 来更新当前的 session，而致使当前的 session 不可以用。所以为了实现断线重连，可以使用下面两种方法：</p><ul><li>不只是使用一个 master session ，而是通过调用 session.Copy() 来创建多个session。每当需要处理独立请求时，通过调用 Copy() 来为每个请求创建一个独立的 session。每当需要一个新 session 时，都会进行 Refresh , 然后在主 session 上进行复制，接着使用该 session 完成操作，使用后将其关闭。当多个任务同时进行时，会创建多个连接，mgo 对连接数作了限制，默认配置的连接数上限是4096，当然一般情况下是足够使用的，当然为了实现更高要求可以将其设置的更大些。此外，调用 Copy() 是非常 cheap 的，不用担心因调用而产生的资源消耗；</li><li>仍是用一个 session ，但在每次调用 session 时，调用 Session.Refresh() 方法，该方法会更新 session 状态，这样就可以和远端 session 状态保持一致。(如果觉得每次都要 refresh 有些麻烦，也可以在调用函数出错时，对错误进行判断，因mgo断线而抛出的错误是 io.EOF，如果错误类型为 io.EOF，则调用 Session.Refresh() 方法重新进行操作，但mgo断线也可能抛出其他错误，采用上面的方法更为保险)。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Mongo 使用起来很方便，但有时因为网络抖动导致连接断开，而后台服务却不知道，这样就会导致服务出现问题，今天来看下怎样实现 mgo 断线自动重连。&lt;br&gt;
    
    </summary>
    
      <category term="MongoDB" scheme="https://yangchenglong11.github.io/categories/MongoDB/"/>
    
    
      <category term="Golang" scheme="https://yangchenglong11.github.io/tags/Golang/"/>
    
      <category term="MongoDB" scheme="https://yangchenglong11.github.io/tags/MongoDB/"/>
    
  </entry>
  
  <entry>
    <title>Mongodb 数据导出/导入</title>
    <link href="https://yangchenglong11.github.io/2017/03/17/Mongodb%E6%95%B0%E6%8D%AE%E5%AF%BC%E5%87%BA-%E5%AF%BC%E5%85%A5/"/>
    <id>https://yangchenglong11.github.io/2017/03/17/Mongodb数据导出-导入/</id>
    <published>2017-03-17T06:43:34.000Z</published>
    <updated>2017-10-28T13:41:38.647Z</updated>
    
    <content type="html"><![CDATA[<p>因为工作环境的切换或是进行备份，我们可能需要将 Mongo 中的数据进行转移，今天我们来看下 Mongo 怎样进行数据导出/导入。<br><a id="more"></a><br>一、导出工具mongoexport**</p><p>Mongodb中的mongoexport工具可以把一个collection导出成JSON格式或CSV格式的文件。可以通过参数指定导出的数据项，也可以根据指定的条件导出数据。mongoexport具体用法如下所示：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">[root@localhost mongodb]# ./bin/mongoexport --help</div><div class="line">Export MongoDB data to CSV, TSV or JSON files.</div><div class="line"></div><div class="line">options:</div><div class="line">  --help                    produce help message</div><div class="line">  -v [ --verbose ]          be more verbose (include multiple times for more </div><div class="line">                            verbosity e.g. -vvvvv)</div><div class="line">  --version                 print the program's version and exit</div><div class="line">  -h [ --host ] arg         mongo host to connect to ( &lt;set name&gt;/s1,s2 for </div><div class="line">                            sets)</div><div class="line">  --port arg                server port. Can also use --host hostname:port</div><div class="line">  --ipv6                    enable IPv6 support (disabled by default)</div><div class="line">  -u [ --username ] arg     username</div><div class="line">  -p [ --password ] arg     password</div><div class="line">  --dbpath arg              directly access mongod database files in the given </div><div class="line">                            path, instead of connecting to a mongod  server - </div><div class="line">                            needs to lock the data directory, so cannot be used</div><div class="line">                            if a mongod is currently accessing the same path</div><div class="line">  --directoryperdb          if dbpath specified, each db is in a separate </div><div class="line">                            directory</div><div class="line">  --journal                 enable journaling</div><div class="line">  -d [ --db ] arg           database to use</div><div class="line">  -c [ --collection ] arg   collection to use (some commands)</div><div class="line">  -f [ --fields ] arg       comma separated list of field names e.g. -f </div><div class="line">                            name,age</div><div class="line">  --fieldFile arg           file with fields names - 1 per line</div><div class="line">  -q [ --query ] arg        query filter, as a JSON string</div><div class="line">  --csv                     export to csv instead of json</div><div class="line">  -o [ --out ] arg          output file; if not specified, stdout is used</div><div class="line">  --jsonArray               output to a json array rather than one object per </div><div class="line">                            line</div><div class="line">  -k [ --slaveOk ] arg (=1) use secondaries for export if available, default </div><div class="line">                            true</div></pre></td></tr></table></figure><p>参数说明：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">-h:指明数据库宿主机的IP</div><div class="line"></div><div class="line">-u:指明数据库的用户名</div><div class="line"></div><div class="line">-p:指明数据库的密码</div><div class="line"></div><div class="line">-d:指明数据库的名字</div><div class="line"></div><div class="line">-c:指明collection的名字</div><div class="line"></div><div class="line">-f:指明要导出那些列</div><div class="line"></div><div class="line">-o:指明到要导出的文件名</div><div class="line"></div><div class="line">-q:指明导出数据的过滤条件</div></pre></td></tr></table></figure><p>实例：test库中存在着一个students集合，集合中数据如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;</span><span class="bash"> db.students.find()</span></div><div class="line">&#123; "_id" : ObjectId("5031143350f2481577ea81e5"), "classid" : 1, "age" : 20, "name" : "kobe" &#125;</div><div class="line">&#123; "_id" : ObjectId("5031144a50f2481577ea81e6"), "classid" : 1, "age" : 23, "name" : "nash" &#125;</div><div class="line">&#123; "_id" : ObjectId("5031145a50f2481577ea81e7"), "classid" : 2, "age" : 18, "name" : "james" &#125;</div><div class="line">&#123; "_id" : ObjectId("5031146a50f2481577ea81e8"), "classid" : 2, "age" : 19, "name" : "wade" &#125;</div><div class="line">&#123; "_id" : ObjectId("5031147450f2481577ea81e9"), "classid" : 2, "age" : 19, "name" : "bosh" &#125;</div><div class="line">&#123; "_id" : ObjectId("5031148650f2481577ea81ea"), "classid" : 2, "age" : 25, "name" : "allen" &#125;</div><div class="line">&#123; "_id" : ObjectId("5031149b50f2481577ea81eb"), "classid" : 1, "age" : 19, "name" : "howard" &#125;</div><div class="line">&#123; "_id" : ObjectId("503114a750f2481577ea81ec"), "classid" : 1, "age" : 22, "name" : "paul" &#125;</div><div class="line">&#123; "_id" : ObjectId("503114cd50f2481577ea81ed"), "classid" : 2, "age" : 24, "name" : "shane" &#125;</div></pre></td></tr></table></figure><p>由上可以看出文档中存在着3个字段：classid、age、name</p><p>1.直接导出数据到文件中</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[root@localhost mongodb]# ./bin/mongoexport -d test -c students -o students.dat</div><div class="line">connected to: 127.0.0.1</div><div class="line">exported 9 records</div></pre></td></tr></table></figure><p>命令执行完后使用ll命令查看，发现目录下生成了一个students.dat的文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">-rw-r--r-- 1 root root   869 Aug 21 00:05 students.dat</div></pre></td></tr></table></figure><p>查看该文件信息，具体信息如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">[root@localhost mongodb]# cat students.dat </div><div class="line">&#123; "_id" : &#123; "$oid" : "5031143350f2481577ea81e5" &#125;, "classid" : 1, "age" : 20, "name" : "kobe" &#125;</div><div class="line">&#123; "_id" : &#123; "$oid" : "5031144a50f2481577ea81e6" &#125;, "classid" : 1, "age" : 23, "name" : "nash" &#125;</div><div class="line">&#123; "_id" : &#123; "$oid" : "5031145a50f2481577ea81e7" &#125;, "classid" : 2, "age" : 18, "name" : "james" &#125;</div><div class="line">&#123; "_id" : &#123; "$oid" : "5031146a50f2481577ea81e8" &#125;, "classid" : 2, "age" : 19, "name" : "wade" &#125;</div><div class="line">&#123; "_id" : &#123; "$oid" : "5031147450f2481577ea81e9" &#125;, "classid" : 2, "age" : 19, "name" : "bosh" &#125;</div><div class="line">&#123; "_id" : &#123; "$oid" : "5031148650f2481577ea81ea" &#125;, "classid" : 2, "age" : 25, "name" : "allen" &#125;</div><div class="line">&#123; "_id" : &#123; "$oid" : "5031149b50f2481577ea81eb" &#125;, "classid" : 1, "age" : 19, "name" : "howard" &#125;</div><div class="line">&#123; "_id" : &#123; "$oid" : "503114a750f2481577ea81ec" &#125;, "classid" : 1, "age" : 22, "name" : "paul" &#125;</div><div class="line">&#123; "_id" : &#123; "$oid" : "503114cd50f2481577ea81ed" &#125;, "classid" : 2, "age" : 24, "name" : "shane" &#125;</div></pre></td></tr></table></figure><p>参数说明：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">-d:指明使用的库，本例中为test</div><div class="line"></div><div class="line">-c:指明要导出的集合，本例中为students</div><div class="line"></div><div class="line">-o:指明要导出的文件名，本例中为students.dat</div></pre></td></tr></table></figure><p>从上面的结果可以看出，我们在导出数据时没有显示指定导出样式 ，默认导出了JSON格式的数据。如果我们需要导出CSV格式的数据，则需要使用–csv参数，具体如下所示：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">[root@localhost mongodb]# ./bin/mongoexport -d test -c students --csv -f classid,name,age -o students_csv.dat</div><div class="line">connected to: 127.0.0.1</div><div class="line">exported 9 records</div><div class="line">[root@localhost mongodb]# cat students_csv.dat </div><div class="line">classid,name,age</div><div class="line">1.0,"kobe",20.0</div><div class="line">1.0,"nash",23.0</div><div class="line">2.0,"james",18.0</div><div class="line">2.0,"wade",19.0</div><div class="line">2.0,"bosh",19.0</div><div class="line">2.0,"allen",25.0</div><div class="line">1.0,"howard",19.0</div><div class="line">1.0,"paul",22.0</div><div class="line">2.0,"shane",24.0</div><div class="line">[root@localhost mongodb]#</div></pre></td></tr></table></figure><p>参数说明：</p><p>-csv：指明要导出为csv格式</p><p>-f：指明需要导出classid、name、age这3列的数据</p><p>由上面结果可以看出，mongoexport成功地将数据根据csv格式导出到了students_csv.dat文件中。</p><p><strong>二、导入工具mongoimport</strong></p><p>Mongodb中的mongoimport工具可以把一个特定格式文件中的内容导入到指定的collection中。该工具可以导入JSON格式数据，也可以导入CSV格式数据。具体使用如下所示：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">[root@localhost mongodb]# ./bin/mongoimport --help</div><div class="line">options:</div><div class="line">  --help                  produce help message</div><div class="line">  -v [ --verbose ]        be more verbose (include multiple times for more </div><div class="line">                          verbosity e.g. -vvvvv)</div><div class="line">  --version               print the program's version and exit</div><div class="line">  -h [ --host ] arg       mongo host to connect to ( &lt;set name&gt;/s1,s2 for sets)</div><div class="line">  --port arg              server port. Can also use --host hostname:port</div><div class="line">  --ipv6                  enable IPv6 support (disabled by default)</div><div class="line">  -u [ --username ] arg   username</div><div class="line">  -p [ --password ] arg   password</div><div class="line">  --dbpath arg            directly access mongod database files in the given </div><div class="line">                          path, instead of connecting to a mongod  server - </div><div class="line">                          needs to lock the data directory, so cannot be used </div><div class="line">                          if a mongod is currently accessing the same path</div><div class="line">  --directoryperdb        if dbpath specified, each db is in a separate </div><div class="line">                          directory</div><div class="line">  --journal               enable journaling</div><div class="line">  -d [ --db ] arg         database to use</div><div class="line">  -c [ --collection ] arg collection to use (some commands)</div><div class="line">  -f [ --fields ] arg     comma separated list of field names e.g. -f name,age</div><div class="line">  --fieldFile arg         file with fields names - 1 per line</div><div class="line">  --ignoreBlanks          if given, empty fields in csv and tsv will be ignored</div><div class="line">  --type arg              type of file to import.  default: json (json,csv,tsv)</div><div class="line">  --file arg              file to import from; if not specified stdin is used</div><div class="line">  --drop                  drop collection first </div><div class="line">  --headerline            CSV,TSV only - use first line as headers</div><div class="line">  --upsert                insert or update objects that already exist</div><div class="line">  --upsertFields arg      comma-separated fields for the query part of the </div><div class="line">                          upsert. You should make sure this is indexed</div><div class="line">  --stopOnError           stop importing at first error rather than continuing</div><div class="line">  --jsonArray             load a json array, not one item per line. Currently </div><div class="line">                          limited to 4MB.</div></pre></td></tr></table></figure><p>参数说明：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">-h:指明数据库宿主机的IP</div><div class="line"></div><div class="line">-u:指明数据库的用户名</div><div class="line"></div><div class="line">-p:指明数据库的密码</div><div class="line"></div><div class="line">-d:指明数据库的名字</div><div class="line"></div><div class="line">-c:指明collection的名字</div><div class="line"></div><div class="line">-f:指明要导入那些列</div></pre></td></tr></table></figure><p>示例：先删除students中的数据，并验证</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;</span><span class="bash"> db.students.remove()</span></div><div class="line"><span class="meta">&gt;</span><span class="bash"> db.students.find()</span></div><div class="line"><span class="meta">&gt;</span><span class="bash"></span></div></pre></td></tr></table></figure><p>然后再导入上面导出的students.dat文件中的内容</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[root@localhost mongodb]# ./bin/mongoimport -d test -c students students.dat </div><div class="line">connected to: 127.0.0.1</div><div class="line">imported 9 objects</div><div class="line">[root@localhost mongodb]#</div></pre></td></tr></table></figure><p>参数说明：</p><p>-d:指明数据库名，本例中为test</p><p>-c:指明collection名，本例中为students</p><p>students.dat：导入的文件名</p><p>查询students集合中的数据</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;</span><span class="bash"> db.students.find()</span></div><div class="line">&#123; "_id" : ObjectId("5031143350f2481577ea81e5"), "classid" : 1, "age" : 20, "name" : "kobe" &#125;</div><div class="line">&#123; "_id" : ObjectId("5031144a50f2481577ea81e6"), "classid" : 1, "age" : 23, "name" : "nash" &#125;</div><div class="line">&#123; "_id" : ObjectId("5031145a50f2481577ea81e7"), "classid" : 2, "age" : 18, "name" : "james" &#125;</div><div class="line">&#123; "_id" : ObjectId("5031146a50f2481577ea81e8"), "classid" : 2, "age" : 19, "name" : "wade" &#125;</div><div class="line">&#123; "_id" : ObjectId("5031147450f2481577ea81e9"), "classid" : 2, "age" : 19, "name" : "bosh" &#125;</div><div class="line">&#123; "_id" : ObjectId("5031148650f2481577ea81ea"), "classid" : 2, "age" : 25, "name" : "allen" &#125;</div><div class="line">&#123; "_id" : ObjectId("5031149b50f2481577ea81eb"), "classid" : 1, "age" : 19, "name" : "howard" &#125;</div><div class="line">&#123; "_id" : ObjectId("503114a750f2481577ea81ec"), "classid" : 1, "age" : 22, "name" : "paul" &#125;</div><div class="line">&#123; "_id" : ObjectId("503114cd50f2481577ea81ed"), "classid" : 2, "age" : 24, "name" : "shane" &#125;</div><div class="line"><span class="meta">&gt;</span><span class="bash"></span></div></pre></td></tr></table></figure><p>证明数据导入成功</p><p>上面演示的是导入JSON格式的文件中的内容，如果要导入CSV格式文件中的内容，则需要通过–type参数指定导入格式，具体如下所示：</p><p>先删除数据</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;</span><span class="bash"> db.students.remove()</span></div><div class="line"><span class="meta">&gt;</span><span class="bash"> db.students.find()</span></div><div class="line"><span class="meta">&gt;</span><span class="bash"></span></div></pre></td></tr></table></figure><p>再导入之前导出的students_csv.dat文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[root@localhost mongodb]# ./bin/mongoimport -d test -c students --type csv --headerline --file students_csv.dat </div><div class="line">connected to: 127.0.0.1</div><div class="line">imported 10 objects</div><div class="line">[root@localhost mongodb]#</div></pre></td></tr></table></figure><p>参数说明：</p><p>-type:指明要导入的文件格式</p><p>-headerline:指明第一行是列名，不需要导入</p><p>-file：指明要导入的文件</p><p>查询students集合，验证导入是否成功：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;</span><span class="bash"> db.students.find()</span></div><div class="line">&#123; "_id" : ObjectId("503266029355c632cd118ad8"), "classid" : 1, "name" : "kobe", "age" : 20 &#125;</div><div class="line">&#123; "_id" : ObjectId("503266029355c632cd118ad9"), "classid" : 1, "name" : "nash", "age" : 23 &#125;</div><div class="line">&#123; "_id" : ObjectId("503266029355c632cd118ada"), "classid" : 2, "name" : "james", "age" : 18 &#125;</div><div class="line">&#123; "_id" : ObjectId("503266029355c632cd118adb"), "classid" : 2, "name" : "wade", "age" : 19 &#125;</div><div class="line">&#123; "_id" : ObjectId("503266029355c632cd118adc"), "classid" : 2, "name" : "bosh", "age" : 19 &#125;</div><div class="line">&#123; "_id" : ObjectId("503266029355c632cd118add"), "classid" : 2, "name" : "allen", "age" : 25 &#125;</div><div class="line">&#123; "_id" : ObjectId("503266029355c632cd118ade"), "classid" : 1, "name" : "howard", "age" : 19 &#125;</div><div class="line">&#123; "_id" : ObjectId("503266029355c632cd118adf"), "classid" : 1, "name" : "paul", "age" : 22 &#125;</div><div class="line">&#123; "_id" : ObjectId("503266029355c632cd118ae0"), "classid" : 2, "name" : "shane", "age" : 24 &#125;</div><div class="line"><span class="meta">&gt;</span><span class="bash"></span></div></pre></td></tr></table></figure><p>说明已经导入成功 </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;因为工作环境的切换或是进行备份，我们可能需要将 Mongo 中的数据进行转移，今天我们来看下 Mongo 怎样进行数据导出/导入。&lt;br&gt;
    
    </summary>
    
      <category term="MongoDB" scheme="https://yangchenglong11.github.io/categories/MongoDB/"/>
    
    
      <category term="MongoDB" scheme="https://yangchenglong11.github.io/tags/MongoDB/"/>
    
  </entry>
  
  <entry>
    <title>谈shell之信号捕捉及处理</title>
    <link href="https://yangchenglong11.github.io/2017/03/05/%E8%B0%88shell%E4%B9%8B%E4%BF%A1%E5%8F%B7%E6%8D%95%E6%8D%89%E5%8F%8A%E5%A4%84%E7%90%86/"/>
    <id>https://yangchenglong11.github.io/2017/03/05/谈shell之信号捕捉及处理/</id>
    <published>2017-03-05T01:27:39.000Z</published>
    <updated>2017-10-28T13:47:11.313Z</updated>
    
    <content type="html"><![CDATA[<p>前几天，用 nohup 在服务器跑了一个服务，发现没过多久自己停了，日志没有报错，仔细研究了下，发现是退出服务器方式不对，解决问题时，查阅了许多 Linux shell 的信号捕捉及处理的知识，这里整理下。<br><a id="more"></a></p><p>在64位系统上，执行kill –l 命令可以看到几乎所有的信号</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">[shell@u ~]$ kill -l </div><div class="line">1) SIGHUP 2) SIGINT 3) SIGQUIT 4) SIGILL 5) SIGTRAP 6) SIGABRT 7) SIGBUS </div><div class="line">8) SIGFPE 9) SIGKILL 10) SIGUSR1 11) SIGSEGV 12) SIGUSR213) SIGPIPE </div><div class="line">14) SIGALRM 15) SIGTERM 17) SIGCHLD18) SIGCONT 19) SIGSTOP 20) SIGTSTP </div><div class="line">21) SIGTTIN22) SIGTTOU 23) SIGURG 24) SIGXCPU 25) SIGXFSZ26) SIGVTALRM </div><div class="line">27) SIGPROF 28) SIGWINCH 29) SIGIO30) SIGPWR 31) SIGSYS 34) SIGRTMIN </div><div class="line">35) SIGRTMIN+136) SIGRTMIN+2 37) SIGRTMIN+3 38) SIGRTMIN+4 39) SIGRTMIN+5</div><div class="line">40) SIGRTMIN+6 41) SIGRTMIN+7 42) SIGRTMIN+8 43) SIGRTMIN+944) SIGRTMIN+10 </div><div class="line">45) SIGRTMIN+11 46) SIGRTMIN+12 47) SIGRTMIN+1348) SIGRTMIN+14 49) SIGRTMIN+15 50) SIGRTMAX-14 51) SIGRTMAX-1352) SIGRTMAX-12 53) SIGRTMAX-11 54) SIGRTMAX-10 55) SIGRTMAX-956) SIGRTMAX-8 57) SIGRTMAX-7 58) SIGRTMAX-6 </div><div class="line">59) SIGRTMAX-560) SIGRTMAX-4 61) SIGRTMAX-3 62) SIGRTMAX-2 </div><div class="line">63) SIGRTMAX-164) SIGRTMAX</div></pre></td></tr></table></figure><p>之所以说“几乎”，是因为有一个信号没有列入其中——信号“0”。</p><p>在我们执行exit命令或使用ctrl + D退出一个终端时，所发送的即为信号“0”。</p><p>nohup命令在执行时即会忽略SIGHUP(信号1)，也会忽略信号0。</p><p>常用信号介绍</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">1 SIGHUP 终止进程 终端断开</div><div class="line"></div><div class="line">2 SIGINT 终止进程 按ctrl+c</div><div class="line"></div><div class="line">3 SIGQUIT 终止进程 按 ctrl+\或者ctrl+D</div><div class="line"></div><div class="line">9 SIGKILL 终止进程 无法捕获或忽略</div><div class="line"></div><div class="line">15 SIGTERM 终止进程 软件终止信号</div><div class="line"></div><div class="line">20 SIGTSTP 终止进程 终端来的停止信号</div></pre></td></tr></table></figure><p>既然分这么多种信号，那么这些信号的区别是什么呢？</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">SIGHUP： 终端接口检测到网络连接断开，会将此信号发送给与该终端相关的控制进程（会话首进程）。会话首进程将信号传递给前台进程组，通常用此进程通知守护进程，重新读取它们的配置文件。</div><div class="line"></div><div class="line">SIGINT： 当用户按下中断键（ctrl+c）终端驱动程序产生此信号并送至前台进程组中每个进程。</div><div class="line"></div><div class="line">SIGKILL ：此信号无法被忽略或者捕获。提供了一种可以杀死任何进程的方法。</div><div class="line"></div><div class="line">我们常用kill -9 pid来杀死一个进程。程序接到此信号会立刻退出。</div><div class="line"></div><div class="line">SIGTERM ：kill命令默认发出的程序中止命令。程序正常保存数据后退出。</div><div class="line"></div><div class="line">SIGTSTP： 交互式停止信号，当用户在终端上按（ctrl+z），终端驱动程序产生此信号，送至前台进程组中的所有进程。</div></pre></td></tr></table></figure><p>nohup让你的程序持续跑完</p><p>当我们每次在注销系统后，还想让脚本或程序继续运行，多数会选择nohup命令。那么使用nohup命令起的脚本为什么会让程序一直运行呢？</p><p>我们man nohup看到，<code>nohup - run a command immune to hangups, with output to a non-tty</code>。当我们关闭终端的时候，正常脚本或者程序会接受到SIGHUP的信号，从而停止运行。nohup命令会忽略所有挂断（SIGHUP）信号，保证程序和脚本的运行。</p><p>nohup使用方法：</p><p><code>nohup Command [ Arg ... ][ &amp; ]</code>无论是否将 <code>nohup</code> 命令的输出重定向到终端，输出都将附加到当前目录的<code>nohup.out</code> 文件中；如果当前目录的 <code>nohup.out</code> 文件不可写，输出重定向到 <code>$HOME/nohup.out</code> 文件中；如果没有文件能创建或打开用于输出追加，那么Command参数指定的命令不可调用。</p><p>创建的 <code>nohup.out</code> 或者 <code>$HOME/nohup.out</code> 文件没有group或者other组的访问权限。</p><p>注意：</p><p>nohup不会自动地将命令放入后台执行，需要增加一个参数&amp;。</p><p>最好将nohup的输出重定向到/dev/null中，有用的信息通过日志保存，否则nohup.out文件日积月累，会占用硬盘空间，占用过大，可能导致服务停止~</p><p>退出状态</p><p>该命令返回下列出口值：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">126</div><div class="line"></div><div class="line">可以查找但不能调用 Command 参数指定的命令。</div><div class="line"></div><div class="line">127</div><div class="line"></div><div class="line">nohup 命令发生错误或不能查找由 Command 参数指定的命令。</div><div class="line"></div><div class="line">否则，nohup 命令的退出状态是 Command 参数指定命令的退出状态。</div></pre></td></tr></table></figure><p>异常退出与执行exit——secureCRT异常退出和执行exit的区别？</p><p>如果直接关闭secureCRT（此处假设是使用ssh登录终端的），那么对于被登录的系统来说，就是远端程序异常断连。和我们突然断网掉线是一样的效果。这种情况下，用户并没有信号发送，而是sshd服务检测到对端响应超时，然后向之前建立起的连接以及该连接下（ssh登录后会分配一个bash给用户）的进程发送结束信号。如果部分进程忽略sshd发送的信号，进程不退出，在分配给用户的bash退出后，该进程将被init进程接管。</p><p>————————————————————————————————————————————————————</p><p>一. trap捕捉到信号之后，可以有三种反应方式：</p><p>(1)执行一段程序来处理这一信号</p><p>(2)接受信号的默认操作</p><p>(3)忽视这一信号</p><p>二. trap对上面三种方式提供了三种基本形式：</p><p>第一种形式的trap命令在shell接收到signal list清单中数值相同的信号时，将执行双引号中的命令串。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">trap 'commands' signal-list</div><div class="line"></div><div class="line">trap "commands" signal-list</div></pre></td></tr></table></figure><p>为了恢复信号的默认操作，使用第二种形式的trap命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">trap signal-list</div></pre></td></tr></table></figure><p>第三种形式的trap命令允许忽视信号</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">trap " " signal-list</div></pre></td></tr></table></figure><p>注意：</p><p>(1) 对信号11(段违例)不能捕捉，因为shell本身需要捕捉该信号去进行内存的转储。</p><p>(2) 在trap中可以定义对信号0的处理(实际上没有这个信号)， shell程序在其终止(如执行exit语句)时发出该信号。</p><p>(3) 在捕捉到signal-list中指定的信号并执行完相应的命令之后， 如果这些命令没有将shell程序终止的话，shell程序将继续执行收到信号时所执行的命令后面的命令，这样将很容易导致shell程序无法终止。</p><p>另外，在trap语句中，单引号和双引号是不同的，当shell程序第一次碰到trap语句时，将把commands中的命令扫描一遍。此时若commands是用单引号括起来的话，那么shell不会对commands中的变量和命令进行替换， 否则commands中的变量和命令将用当时具体的值来替换。</p><p>点击<a href="http://3403658.blog.51cto.com/3393658/1250078" target="_blank" rel="external">点击阅读原文</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前几天，用 nohup 在服务器跑了一个服务，发现没过多久自己停了，日志没有报错，仔细研究了下，发现是退出服务器方式不对，解决问题时，查阅了许多 Linux shell 的信号捕捉及处理的知识，这里整理下。&lt;br&gt;
    
    </summary>
    
      <category term="Linux" scheme="https://yangchenglong11.github.io/categories/Linux/"/>
    
    
      <category term="Linux" scheme="https://yangchenglong11.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Golang 之sync.Pool</title>
    <link href="https://yangchenglong11.github.io/2017/02/27/golang%E4%B9%8Bsync-Pool/"/>
    <id>https://yangchenglong11.github.io/2017/02/27/golang之sync-Pool/</id>
    <published>2017-02-27T10:33:14.000Z</published>
    <updated>2017-10-28T13:42:27.785Z</updated>
    
    <content type="html"><![CDATA[<p>当多个goroutine都需要创建同一个对象的时候，如果goroutine过多，可能导致对象的创建数目剧增。 而对象又是占用内存的，进而导致的就是内存回收的GC压力徒增。造成“并发大－占用内存大－GC缓慢－处理并发能力降低－并发更大”这样的恶性循环。但如果每个goroutine不再自己单独创建对象，而是从对象池中获取出一个对象（如果池中已经有的话）。 这就是sync.Pool出现的目的了。</p><a id="more"></a><p>sync.Pool的使用非常简单，提供两个方法:Get和Put 和一个初始化回调函数New。<br>看下面这个例子(取自<a href="https://github.com/bradfitz/gomemcache/blob/master/memcache/selector.go" target="_blank" rel="external">gomemcache</a>)：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// keyBufPool returns []byte buffers for use by PickServer's call to</span></div><div class="line"><span class="comment">// crc32.ChecksumIEEE to avoid allocations. (but doesn't avoid the</span></div><div class="line"><span class="comment">// copies, which at least are bounded in size and small)</span></div><div class="line"><span class="keyword">var</span> keyBufPool = sync.Pool&#123;</div><div class="line">New: <span class="function"><span class="keyword">func</span><span class="params">()</span> <span class="title">interface</span></span>&#123;&#125; &#123;</div><div class="line">b := <span class="built_in">make</span>([]<span class="keyword">byte</span>, <span class="number">256</span>)</div><div class="line"><span class="keyword">return</span> &amp;b</div><div class="line">&#125;,</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(ss *ServerList)</span> <span class="title">PickServer</span><span class="params">(key <span class="keyword">string</span>)</span> <span class="params">(net.Addr, error)</span></span> &#123;</div><div class="line">ss.mu.RLock()</div><div class="line"><span class="keyword">defer</span> ss.mu.RUnlock()</div><div class="line"><span class="keyword">if</span> <span class="built_in">len</span>(ss.addrs) == <span class="number">0</span> &#123;</div><div class="line"><span class="keyword">return</span> <span class="literal">nil</span>, ErrNoServers</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span> <span class="built_in">len</span>(ss.addrs) == <span class="number">1</span> &#123;</div><div class="line"><span class="keyword">return</span> ss.addrs[<span class="number">0</span>], <span class="literal">nil</span></div><div class="line">&#125;</div><div class="line">bufp := keyBufPool.Get().(*[]<span class="keyword">byte</span>)</div><div class="line">n := <span class="built_in">copy</span>(*bufp, key)</div><div class="line">cs := crc32.ChecksumIEEE((*bufp)[:n])</div><div class="line">keyBufPool.Put(bufp)</div><div class="line"></div><div class="line"><span class="keyword">return</span> ss.addrs[cs%<span class="keyword">uint32</span>(<span class="built_in">len</span>(ss.addrs))], <span class="literal">nil</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>这是实际项目中的一个例子，这里使用keyBufPool的目的是为了让crc32.ChecksumIEEE所使用的[]bytes数组可以重复使用，减少GC的压力。</p><p>但是这里可能会有一个问题，我们没有看到Pool的手动回收函数。 那么是不是就意味着，如果我们的并发量不断增加，这个Pool的体积会不断变大，或者一直维持在很大的范围内呢？</p><p>答案是不会的，sync.Pool的回收是有的，它是在系统自动GC的时候，触发pool.go中的poolCleanup函数。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">poolCleanup</span><span class="params">()</span></span> &#123;</div><div class="line"><span class="keyword">for</span> i, p := <span class="keyword">range</span> allPools &#123;</div><div class="line">allPools[i] = <span class="literal">nil</span></div><div class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="keyword">int</span>(p.localSize); i++ &#123;</div><div class="line">l := indexLocal(p.local, i)</div><div class="line">l.private = <span class="literal">nil</span></div><div class="line"><span class="keyword">for</span> j := <span class="keyword">range</span> l.shared &#123;</div><div class="line">l.shared[j] = <span class="literal">nil</span></div><div class="line">&#125;</div><div class="line">l.shared = <span class="literal">nil</span></div><div class="line">&#125;</div><div class="line">p.local = <span class="literal">nil</span></div><div class="line">p.localSize = <span class="number">0</span></div><div class="line">&#125;</div><div class="line">allPools = []*Pool&#123;&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>这个函数会把Pool中所有goroutine创建的对象都进行销毁。</p><p>那这里另外一个问题也凸显出来了，很可能我上一步刚往pool中PUT一个对象之后，下一步GC触发，导致pool的GET函数获取不到PUT进去的对象。 这个时候，GET函数就会调用New函数，临时创建出一个对象，并存放到pool中。</p><p>根据以上结论，sync.Pool其实不适合用来做持久保存的对象池（比如连接池）。它更适合用来做临时对象池，目的是为了降低GC的压力。</p><p>连接池性能测试</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> memcache</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line"><span class="string">"sync"</span></div><div class="line"><span class="string">"testing"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="keyword">var</span> bytePool = sync.Pool&#123;</div><div class="line">New: newPool,</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">newPool</span><span class="params">()</span> <span class="title">interface</span></span>&#123;&#125; &#123;</div><div class="line">b := <span class="built_in">make</span>([]<span class="keyword">byte</span>, <span class="number">1024</span>)</div><div class="line"><span class="keyword">return</span> &amp;b</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">BenchmarkAlloc</span><span class="params">(b *testing.B)</span></span> &#123;</div><div class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; b.N; i++ &#123;</div><div class="line">obj := <span class="built_in">make</span>([]<span class="keyword">byte</span>, <span class="number">1024</span>)</div><div class="line">_ = obj</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">BenchmarkPool</span><span class="params">(b *testing.B)</span></span> &#123;</div><div class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; b.N; i++ &#123;</div><div class="line">obj := bytePool.Get().(*[]<span class="keyword">byte</span>)</div><div class="line">_ = obj</div><div class="line">bytePool.Put(obj)</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>文件目录下执行 go test -bench .</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">bogon:memcache yang$ <span class="keyword">go</span> test -bench .</div><div class="line">BenchmarkOnItem<span class="number">-4</span>               <span class="number">2000000</span>       <span class="number">902</span> ns/op</div><div class="line">BenchmarkPickServer<span class="number">-4</span>          <span class="number">10000000</span>       <span class="number">147</span> ns/op       <span class="number">0</span> B/op       <span class="number">0</span> allocs/op</div><div class="line">BenchmarkPickServer_Single<span class="number">-4</span>   <span class="number">20000000</span>        <span class="number">69.4</span> ns/op       <span class="number">0</span> B/op       <span class="number">0</span> allocs/op</div><div class="line">BenchmarkAlloc<span class="number">-4</span>               <span class="number">50000000</span>        <span class="number">40.8</span> ns/op</div><div class="line">BenchmarkPool<span class="number">-4</span>                <span class="number">50000000</span>        <span class="number">27.8</span> ns/op</div><div class="line">PASS</div><div class="line">ok  gomemcache/memcache<span class="number">9.318s</span></div></pre></td></tr></table></figure><p>通过性能测试可以清楚地看到，使用连接池消耗的CPU时间远远小于每次手动分配内存。</p><p>源码分析：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">type</span> Pool <span class="keyword">struct</span> &#123;</div><div class="line">noCopy noCopy</div><div class="line"></div><div class="line">local     unsafe.Pointer</div><div class="line">localSize <span class="keyword">uintptr</span></div><div class="line">    <span class="comment">//当pool中无可用对象时，调用New函数产生对象值直接返回给调用方，所以其产生的对象值永远不会被放置到池中</span></div><div class="line">New <span class="function"><span class="keyword">func</span><span class="params">()</span> <span class="title">interface</span></span>&#123;&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//sync.pool为每个P（golang的调度模型介绍中有介绍）都分配了一个子池。</span></div><div class="line"><span class="comment">//每个子池里面有一个私有对象和共享列表对象，私有对象是只有对应的P能够访问，</span></div><div class="line"><span class="comment">//因为一个P同一时间只能执行一个goroutine，因此对私有对象存取操作是不需要加锁的。</span></div><div class="line"><span class="comment">//共享列表是和其他P分享的，因此操作共享列表是需要加锁的。</span></div><div class="line"><span class="keyword">type</span> poolLocal <span class="keyword">struct</span> &#123;</div><div class="line">private <span class="keyword">interface</span>&#123;&#125;</div><div class="line">shared  []<span class="keyword">interface</span>&#123;&#125;</div><div class="line">Mutex</div><div class="line">pad     [<span class="number">128</span>]<span class="keyword">byte</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">fastrand</span><span class="params">()</span> <span class="title">uint32</span></span></div><div class="line"><span class="function"></span></div><div class="line"><span class="function"><span class="title">var</span> <span class="title">poolRaceHash</span> [128]<span class="title">uint64</span></span></div><div class="line"><span class="function"></span></div><div class="line"><span class="function"><span class="title">func</span> <span class="title">poolRaceAddr</span><span class="params">(x <span class="keyword">interface</span>&#123;&#125;)</span> <span class="title">unsafe</span>.<span class="title">Pointer</span></span> &#123;</div><div class="line">ptr := <span class="keyword">uintptr</span>((*[<span class="number">2</span>]unsafe.Pointer)(unsafe.Pointer(&amp;x))[<span class="number">1</span>])</div><div class="line">h := <span class="keyword">uint32</span>((<span class="keyword">uint64</span>(<span class="keyword">uint32</span>(ptr)) * <span class="number">0x85ebca6b</span>) &gt;&gt; <span class="number">16</span>)</div><div class="line"><span class="keyword">return</span> unsafe.Pointer(&amp;poolRaceHash[h%<span class="keyword">uint32</span>(<span class="built_in">len</span>(poolRaceHash))])</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//固定到某个P，如果私有对象为空则放到私有对象；</span></div><div class="line"><span class="comment">//否则加入到该P子池的共享列表中（需要加锁）。</span></div><div class="line"><span class="comment">//可以看到一次put操作最少0次加锁，最多1次加锁。</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *Pool)</span> <span class="title">Put</span><span class="params">(x <span class="keyword">interface</span>&#123;&#125;)</span></span> &#123;</div><div class="line"><span class="keyword">if</span> x == <span class="literal">nil</span> &#123;</div><div class="line"><span class="keyword">return</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span> race.Enabled &#123;</div><div class="line"><span class="keyword">if</span> fastrand()%<span class="number">4</span> == <span class="number">0</span> &#123;</div><div class="line"><span class="keyword">return</span></div><div class="line">&#125;</div><div class="line">race.ReleaseMerge(poolRaceAddr(x))</div><div class="line">race.Disable()</div><div class="line">&#125;</div><div class="line">l := p.pin()</div><div class="line"><span class="keyword">if</span> l.private == <span class="literal">nil</span> &#123;</div><div class="line">l.private = x</div><div class="line">x = <span class="literal">nil</span></div><div class="line">&#125;</div><div class="line">runtime_procUnpin()</div><div class="line"><span class="keyword">if</span> x != <span class="literal">nil</span> &#123;</div><div class="line">l.Lock()</div><div class="line">l.shared = <span class="built_in">append</span>(l.shared, x)</div><div class="line">l.Unlock()</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span> race.Enabled &#123;</div><div class="line">race.Enable()</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//固定到某个P，尝试从私有对象获取，如果私有对象非空则返回该对象，并把私有对象置空；</span></div><div class="line"><span class="comment">//如果私有对象是空的时候，就去当前子池的共享列表获取（需要加锁）；</span></div><div class="line"><span class="comment">//如果当前子池的共享列表也是空的，那么就尝试去其他P的子池的共享列表偷取一个（需要加锁）；</span></div><div class="line"><span class="comment">//如果其他子池都是空的，最后就用用户指定的New函数产生一个新的对象返回。</span></div><div class="line"><span class="comment">//可以看到一次get操作最少0次加锁，最大N（N等于MAXPROCS）次加锁。</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *Pool)</span> <span class="title">Get</span><span class="params">()</span> <span class="title">interface</span></span>&#123;&#125; &#123;</div><div class="line"><span class="keyword">if</span> race.Enabled &#123;</div><div class="line">race.Disable()</div><div class="line">&#125;</div><div class="line">l := p.pin()</div><div class="line">x := l.private</div><div class="line">l.private = <span class="literal">nil</span></div><div class="line">runtime_procUnpin()</div><div class="line"><span class="keyword">if</span> x == <span class="literal">nil</span> &#123;</div><div class="line">l.Lock()</div><div class="line">last := <span class="built_in">len</span>(l.shared) - <span class="number">1</span></div><div class="line"><span class="keyword">if</span> last &gt;= <span class="number">0</span> &#123;</div><div class="line">x = l.shared[last]</div><div class="line">l.shared = l.shared[:last]</div><div class="line">&#125;</div><div class="line">l.Unlock()</div><div class="line"><span class="keyword">if</span> x == <span class="literal">nil</span> &#123;</div><div class="line">x = p.getSlow()</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span> race.Enabled &#123;</div><div class="line">race.Enable()</div><div class="line"><span class="keyword">if</span> x != <span class="literal">nil</span> &#123;</div><div class="line">race.Acquire(poolRaceAddr(x))</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span> x == <span class="literal">nil</span> &amp;&amp; p.New != <span class="literal">nil</span> &#123;</div><div class="line">x = p.New()</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> x</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *Pool)</span> <span class="title">getSlow</span><span class="params">()</span> <span class="params">(x <span class="keyword">interface</span>&#123;&#125;)</span></span> &#123;</div><div class="line">size := atomic.LoadUintptr(&amp;p.localSize)</div><div class="line">local := p.local</div><div class="line"></div><div class="line">pid := runtime_procPin()</div><div class="line">runtime_procUnpin()</div><div class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="keyword">int</span>(size); i++ &#123;</div><div class="line">l := indexLocal(local, (pid+i+<span class="number">1</span>)%<span class="keyword">int</span>(size))</div><div class="line">l.Lock()</div><div class="line">last := <span class="built_in">len</span>(l.shared) - <span class="number">1</span></div><div class="line"><span class="keyword">if</span> last &gt;= <span class="number">0</span> &#123;</div><div class="line">x = l.shared[last]</div><div class="line">l.shared = l.shared[:last]</div><div class="line">l.Unlock()</div><div class="line"><span class="keyword">break</span></div><div class="line">&#125;</div><div class="line">l.Unlock()</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> x</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *Pool)</span> <span class="title">pin</span><span class="params">()</span> *<span class="title">poolLocal</span></span> &#123;</div><div class="line">pid := runtime_procPin()</div><div class="line"></div><div class="line">s := atomic.LoadUintptr(&amp;p.localSize)</div><div class="line">l := p.local</div><div class="line"><span class="keyword">if</span> <span class="keyword">uintptr</span>(pid) &lt; s &#123;</div><div class="line"><span class="keyword">return</span> indexLocal(l, pid)</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> p.pinSlow()</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *Pool)</span> <span class="title">pinSlow</span><span class="params">()</span> *<span class="title">poolLocal</span></span> &#123;</div><div class="line">runtime_procUnpin()</div><div class="line">allPoolsMu.Lock()</div><div class="line"><span class="keyword">defer</span> allPoolsMu.Unlock()</div><div class="line">pid := runtime_procPin()</div><div class="line"></div><div class="line">s := p.localSize</div><div class="line">l := p.local</div><div class="line"><span class="keyword">if</span> <span class="keyword">uintptr</span>(pid) &lt; s &#123;</div><div class="line"><span class="keyword">return</span> indexLocal(l, pid)</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span> p.local == <span class="literal">nil</span> &#123;</div><div class="line">allPools = <span class="built_in">append</span>(allPools, p)</div><div class="line">&#125;</div><div class="line"></div><div class="line">size := runtime.GOMAXPROCS(<span class="number">0</span>)</div><div class="line">local := <span class="built_in">make</span>([]poolLocal, size)</div><div class="line">atomic.StorePointer(&amp;p.local, unsafe.Pointer(&amp;local[<span class="number">0</span>]))</div><div class="line">atomic.StoreUintptr(&amp;p.localSize, <span class="keyword">uintptr</span>(size))</div><div class="line"><span class="keyword">return</span> &amp;local[pid]</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//在系统自动GC的时候，触发pool.go中的poolCleanup函数,把Pool中所有goroutine创建的对象都进行销毁</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">poolCleanup</span><span class="params">()</span></span> &#123;</div><div class="line"><span class="keyword">for</span> i, p := <span class="keyword">range</span> allPools &#123;</div><div class="line">allPools[i] = <span class="literal">nil</span></div><div class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="keyword">int</span>(p.localSize); i++ &#123;</div><div class="line">l := indexLocal(p.local, i)</div><div class="line">l.private = <span class="literal">nil</span></div><div class="line"><span class="keyword">for</span> j := <span class="keyword">range</span> l.shared &#123;</div><div class="line">l.shared[j] = <span class="literal">nil</span></div><div class="line">&#125;</div><div class="line">l.shared = <span class="literal">nil</span></div><div class="line">&#125;</div><div class="line">p.local = <span class="literal">nil</span></div><div class="line">p.localSize = <span class="number">0</span></div><div class="line">&#125;</div><div class="line">allPools = []*Pool&#123;&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> (</div><div class="line">allPoolsMu Mutex</div><div class="line">allPools   []*Pool</div><div class="line">)</div><div class="line"></div><div class="line"><span class="comment">//在init中注册了一个poolCleanup函数，</span></div><div class="line"><span class="comment">//它会清除所有的pool里面的所有缓存的对象，该函数注册进去之后会在每次gc之前都会调用</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</div><div class="line">runtime_registerPoolCleanup(poolCleanup)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">indexLocal</span><span class="params">(l unsafe.Pointer, i <span class="keyword">int</span>)</span> *<span class="title">poolLocal</span></span> &#123;</div><div class="line"><span class="keyword">return</span> &amp;(*[<span class="number">1000000</span>]poolLocal)(l)[i]</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// Implemented in runtime.</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">runtime_registerPoolCleanup</span><span class="params">(cleanup <span class="keyword">func</span>()</span>)</span></div><div class="line"><span class="function"><span class="title">func</span> <span class="title">runtime_procPin</span><span class="params">()</span> <span class="title">int</span></span></div><div class="line"><span class="function"><span class="title">func</span> <span class="title">runtime_procUnpin</span><span class="params">()</span></span></div></pre></td></tr></table></figure><p>示例：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line"><span class="string">"fmt"</span></div><div class="line"><span class="string">"runtime"</span></div><div class="line"><span class="string">"runtime/debug"</span></div><div class="line"><span class="string">"sync"</span></div><div class="line"><span class="string">"sync/atomic"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line"><span class="comment">// 禁用GC，并保证在main函数执行结束前恢复GC</span></div><div class="line"><span class="keyword">defer</span> debug.SetGCPercent(debug.SetGCPercent(<span class="number">-1</span>))</div><div class="line"><span class="keyword">var</span> count <span class="keyword">int32</span></div><div class="line">newFunc := <span class="function"><span class="keyword">func</span><span class="params">()</span> <span class="title">interface</span></span>&#123;&#125; &#123;</div><div class="line"><span class="keyword">return</span> atomic.AddInt32(&amp;count, <span class="number">1</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line">pool := sync.Pool&#123;New: newFunc&#125;</div><div class="line"></div><div class="line"><span class="comment">// New 字段值的作用</span></div><div class="line">v1 := pool.Get()</div><div class="line">fmt.Printf(<span class="string">"v1: %v\n"</span>, v1)</div><div class="line"></div><div class="line"><span class="comment">// 临时对象池的存取</span></div><div class="line">pool.Put(newFunc())</div><div class="line">pool.Put(newFunc())</div><div class="line">pool.Put(newFunc())</div><div class="line">v2 := pool.Get()</div><div class="line">fmt.Printf(<span class="string">"v2: %v\n"</span>, v2)</div><div class="line"></div><div class="line"><span class="comment">// 垃圾回收对临时对象池的影响</span></div><div class="line">debug.SetGCPercent(<span class="number">100</span>)</div><div class="line">runtime.GC()</div><div class="line">v3 := pool.Get()</div><div class="line">fmt.Printf(<span class="string">"v3: %v\n"</span>, v3)</div><div class="line">pool.New = <span class="literal">nil</span></div><div class="line">v4 := pool.Get()</div><div class="line">fmt.Printf(<span class="string">"v4: %v\n"</span>, v4)</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;当多个goroutine都需要创建同一个对象的时候，如果goroutine过多，可能导致对象的创建数目剧增。 而对象又是占用内存的，进而导致的就是内存回收的GC压力徒增。造成“并发大－占用内存大－GC缓慢－处理并发能力降低－并发更大”这样的恶性循环。但如果每个goroutine不再自己单独创建对象，而是从对象池中获取出一个对象（如果池中已经有的话）。 这就是sync.Pool出现的目的了。&lt;/p&gt;
    
    </summary>
    
      <category term="Golang" scheme="https://yangchenglong11.github.io/categories/Golang/"/>
    
    
      <category term="Golang" scheme="https://yangchenglong11.github.io/tags/Golang/"/>
    
  </entry>
  
  <entry>
    <title>source、sh、bash、./执行脚本的区别</title>
    <link href="https://yangchenglong11.github.io/2017/02/18/source%E3%80%81sh%E3%80%81bash%E3%80%81-%E6%89%A7%E8%A1%8C%E8%84%9A%E6%9C%AC%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>https://yangchenglong11.github.io/2017/02/18/source、sh、bash、-执行脚本的区别/</id>
    <published>2017-02-18T00:34:35.000Z</published>
    <updated>2017-10-28T13:40:05.403Z</updated>
    
    <content type="html"><![CDATA[<p>在 Linux 下， 我们经常会执行脚本，比如使用 sh 或 bash 命令，今天我们就来看看这些执行方式有什么不同。</p><a id="more"></a><h3 id="sh文件介绍"><a href="#sh文件介绍" class="headerlink" title="sh文件介绍"></a>sh文件介绍</h3><p>.sh为Linux的脚本文件，我们可以通过.sh执行一些命令，可以理解为windows的.bat批处理文件。</p><h2 id="source命令用法："><a href="#source命令用法：" class="headerlink" title="source命令用法：　　"></a>source命令用法：　　</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">source FileName</div></pre></td></tr></table></figure><p>作用:在<strong>当前bash环境下</strong>读取并执行<strong>FileName中</strong>的命令。</p><p>是在当前shell执行脚本里面的命令，不需要执行权限，有读取权限（r权限）即可  </p><p>注：该命令通常用命令“.”来替代。    </p><p>如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">source</span> ./bash_profile        </span></div><div class="line"></div><div class="line"><span class="meta">$</span><span class="bash"> . ./bash_profile</span></div></pre></td></tr></table></figure><p>两者等效。    </p><p>source(或点)命令通常用于重新执行刚修改的初始化文档。  </p><p>source命令(从 C Shell 而来)是bash shell的内置命令。    </p><p>点命令，就是个点符号，(从Bourne Shell而来)。 </p><h2 id="sh和bash命令用法："><a href="#sh和bash命令用法：" class="headerlink" title="sh和bash命令用法："></a>sh和bash命令用法：</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">sh FileName     </div><div class="line"></div><div class="line">bash FileName</div></pre></td></tr></table></figure><p>作用:在<strong>当前bash环境下</strong>读取并执行<strong>FileName中</strong>的命令。</p><p>是新建一个shell执行脚本里面的命令，不需要执行权限，有读取权限（r权限）即可，</p><p> 注：两者在执行文件时的不同，是分别用自己的shell来跑文件。   </p><p> sh使用“-n”选项进行shell脚本的语法检查，使用“-x”选项实现shell脚本逐条语句的跟踪，   可以巧妙地利用shell的内置变量增强“-x”选项的输出信息等。 </p><h2 id="的命令用法："><a href="#的命令用法：" class="headerlink" title="./的命令用法："></a>./的命令用法：</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./FileName</div></pre></td></tr></table></figure><p>作用:打开一个<strong>子shell</strong>来读取并执行FileName中命令。      </p><p>注：运行一个shell脚本时会启动<strong>另一个</strong>命令解释器.  </p><p>把test.sh当成一个文件执行，这时候我们需要拥有test.sh的运行权限（x权限）       </p><p>每个shell脚本有效地运行在父shell(<a href="http://www.linuxsir.org/main/doc/abs/abs3.7cnhtm/internal.html#FORKREF" target="_blank" rel="external">parent</a> shell)的一个子进程里.            </p><p>这个父shell是指在一个控制终端或在一个<em>xterm</em>窗口中给你命令指示符的进程.         shell脚本也可以启动他自已的子进程.            </p><p>这些子shell(即子进程)使脚本并行地，有效率地地同时运行脚本内的多个子任务. </p><p>shell的嵌入命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">: 空，永远返回为<span class="literal">true</span></div><div class="line"></div><div class="line">.   从当前shell中执行操作</div><div class="line"></div><div class="line"><span class="built_in">break</span> 退出<span class="keyword">for</span>、<span class="keyword">while</span>、until或<span class="keyword">case</span>语句</div><div class="line"><span class="built_in">cd</span> 改变到当前目录</div><div class="line"><span class="built_in">continue</span> 执行循环的下一步</div><div class="line"><span class="built_in">echo</span> 反馈信息到标准输出</div><div class="line"><span class="built_in">eval</span> 读取参数，执行结果命令</div><div class="line"><span class="built_in">exec</span> 执行命令，但不在当前shell</div><div class="line"><span class="built_in">exit</span> 退出当前shell</div><div class="line"><span class="built_in">export</span> 导出变量，使当前shell可利用它</div><div class="line"><span class="built_in">pwd</span> 显示当前目录</div><div class="line"><span class="built_in">read</span> 从标准输入读取一行文本</div><div class="line"><span class="built_in">readonly</span> 使变量只读</div><div class="line"><span class="built_in">return</span> 退出函数并带有返回值</div><div class="line"><span class="built_in">set</span> 控制各种参数到标准输出的显示</div><div class="line"><span class="built_in">shift</span> 命令行参数向左偏移一个</div><div class="line"><span class="built_in">test</span> 评估条件表达式</div><div class="line"><span class="built_in">times</span> 显示shell运行过程的用户和系统时间</div><div class="line"><span class="built_in">trap</span> 当捕获信号时运行指定命令</div><div class="line"><span class="built_in">ulimit</span> 显示或设置shell资源</div><div class="line"><span class="built_in">umask</span> 显示或设置缺省文件创建模式</div><div class="line"><span class="built_in">unset</span> 从shell内存中删除变量或函数</div><div class="line"><span class="built_in">wait</span> 等待直到子进程运行完毕</div></pre></td></tr></table></figure><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p>假如有一个文件test.sh，脚本内容如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></div><div class="line">echo "step 1 sleeping"</div><div class="line">sleep 200</div><div class="line">echo "step 2 sleeping"</div><div class="line">sleep 200</div></pre></td></tr></table></figure><p>那么，现在按以下4种方式执行：</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">1）./<span class="keyword">test</span>.<span class="keyword">sh</span></div><div class="line"></div><div class="line">2）<span class="keyword">sh</span> <span class="keyword">test</span>.<span class="keyword">sh</span></div><div class="line"></div><div class="line">3）. <span class="keyword">test</span>.<span class="keyword">sh</span></div><div class="line"></div><div class="line">4）source <span class="keyword">test</span>.<span class="keyword">sh</span></div></pre></td></tr></table></figure><p>他们有何区别？</p><p>1）第一种方式，当我们在执行此命令时，有2个新进程在运行，一个是test.sh，一个是sleep，如果我们在执行第一个sleep时按ctrl+c终止脚本，test.sh和sleep一起终止，并且第二个sleep不会执行，因为整个test.sh运行已经终止。</p><p>2）第二种方式，在执行此命令时，有2个新进程在运行，一个是bash，一个是sleep，如果执行第一个sleep时按ctrl+c，bash被终止，结果和第一种方式一样，第二个sleep不会执行。</p><p>3）第三种方式，在执行此命令时，只有一个新进程在运行，就是sleep，如果在执行第一个sleep时按ctrl+c终止，那么第二个sleep接着运行，直到脚本所有命令执行完。</p><p>4）第四种方式和第三种方式一致。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在 Linux 下， 我们经常会执行脚本，比如使用 sh 或 bash 命令，今天我们就来看看这些执行方式有什么不同。&lt;/p&gt;
    
    </summary>
    
      <category term="Linux" scheme="https://yangchenglong11.github.io/categories/Linux/"/>
    
    
      <category term="Linux" scheme="https://yangchenglong11.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>正则表达式</title>
    <link href="https://yangchenglong11.github.io/2017/01/13/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>https://yangchenglong11.github.io/2017/01/13/正则表达式/</id>
    <published>2017-01-13T11:26:25.000Z</published>
    <updated>2017-10-13T12:22:48.287Z</updated>
    
    <content type="html"><![CDATA[<p>正则表达式(regular expression)描述了一种字符串匹配的模式，可以用来检查一个串是否含有某种子串、将匹配的子串做替换或者从某个串中取出符合某个条件的子串等。</p><a id="more"></a><h2 id="简单表达式"><a href="#简单表达式" class="headerlink" title="简单表达式"></a>简单表达式</h2><p>正则表达式的最简单形式是在搜索字符串中匹配其本身的单个普通字符。例如，单字符模式，如 A，不论出现在搜索字符串中的何处，它总是匹配字母 A。下面是一些单字符正则表达式模式的示例：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="regexp">/a/</span></div><div class="line"><span class="regexp">/7/</span></div><div class="line"><span class="regexp">/M/</span></div></pre></td></tr></table></figure><p>可以将许多单字符组合起来以形成大的表达式。例如，以下正则表达式组合了单字符表达式：a、7 和 M。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="regexp">/a7M/</span></div></pre></td></tr></table></figure><p>请注意，没有串联运算符。只须在一个字符后面键入另一个字符。</p><h2 id="字符匹配"><a href="#字符匹配" class="headerlink" title="字符匹配"></a>字符匹配</h2><p>句点 (.) 匹配字符串中的各种打印或非打印字符，只有一个字符例外。这个例外就是换行符 (\n)。下面的正则表达式匹配 aac、abc、acc、adc 等等，以及 a1c、a2c、a-c 和 a#c：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/<span class="selector-tag">a</span>.c/</div></pre></td></tr></table></figure><p>若要匹配包含文件名的字符串，而句点 (.) 是输入字符串的组成部分，请在正则表达式中的句点前面加反斜扛 () 字符。举例来说明，下面的正则表达式匹配 filename.ext：</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="string">/filename</span>\<span class="string">.ext/</span></div></pre></td></tr></table></figure><p>这些表达式只让您匹配”任何”单个字符。可能需要匹配列表中的特定字符组。例如，可能需要查找用数字表示的章节标题（Chapter 1、Chapter 2 等等）。</p><h2 id="中括号表达式"><a href="#中括号表达式" class="headerlink" title="中括号表达式"></a>中括号表达式</h2><p>若要创建匹配字符组的一个列表，请在方括号（[ 和 ]）内放置一个或更多单个字符。当字符括在中括号内时，该列表称为”中括号表达式”。与在任何别的位置一样，普通字符在中括号内表示其本身，即，它在输入文本中匹配一次其本身。大多数特殊字符在中括号表达式内出现时失去它们的意义。不过也有一些例外，如：</p><ul><li>如果 ] 字符不是第一项，它结束一个列表。若要匹配列表中的 ] 字符，请将它放在第一位，紧跟在开始 [ 后面。</li></ul><ul><li>\ 字符继续作为转义符。若要匹配 \ 字符，请使用 \。</li></ul><p>括在中括号表达式中的字符只匹配处于正则表达式中该位置的单个字符。以下正则表达式匹配 Chapter 1、Chapter 2、Chapter 3、Chapter 4 和 Chapter 5：</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/Chapter <span class="string">[12345]</span>/</div></pre></td></tr></table></figure><p>请注意，单词 Chapter 和后面的空格的位置相对于中括号内的字符是固定的。中括号表达式指定的只是匹配紧跟在单词 Chapter 和空格后面的单个字符位置的字符集。这是第九个字符位置。<br>若要使用范围代替字符本身来表示匹配字符组，请使用连字符 (-) 将范围中的开始字符和结束字符分开。单个字符的字符值确定范围内的相对顺序。下面的正则表达式包含范围表达式，该范围表达式等效于上面显示的中括号中的列表。</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/Chapter [<span class="number">1</span><span class="number">-5</span>]/</div></pre></td></tr></table></figure><p>当以这种方式指定范围时，开始值和结束值两者都包括在范围内。注意，还有一点很重要，按 Unicode 排序顺序，开始值必须在结束值的前面。<br>若要在中括号表达式中包括连字符，请采用下列方法之一：</p><ul><li>用反斜扛将它转义：</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[\-]</div></pre></td></tr></table></figure><ul><li>将连字符放在中括号列表的开始或结尾。下面的表达式匹配所有小写字母和连字符：</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[-a-z]</div><div class="line">[a-z-]</div></pre></td></tr></table></figure><ul><li>创建一个范围，在该范围中，开始字符值小于连字符，而结束字符值等于或大于连字符。下面的两个正则表达式都满足这一要求：</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[!--]</div><div class="line">[!-~]</div></pre></td></tr></table></figure><p>若要查找不在列表或范围内的所有字符，请将插入符号 (^) 放在列表的开头。如果插入字符出现在列表中的其他任何位置，则它匹配其本身。下面的正则表达式匹配1、2、3、4 或 5 之外的任何数字和字符：</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/Chapter <span class="string">[^12345]</span>/</div></pre></td></tr></table></figure><p>在上面的示例中，表达式在第九个位置匹配 1、2、3、4 或 5 之外的任何数字和字符。这样，例如，Chapter 7 就是一个匹配项，Chapter 9 也是一个匹配项。<br>上面的表达式可以使用连字符 (-) 来表示：</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/Chapter [^<span class="number">1</span><span class="number">-5</span>]/</div></pre></td></tr></table></figure><p>中括号表达式的典型用途是指定任何大写或小写字母或任何数字的匹配。下面的表达式指定这样的匹配：</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/<span class="string">[A-Za-z0-9]</span>/</div></pre></td></tr></table></figure><h2 id="替换和分组"><a href="#替换和分组" class="headerlink" title="替换和分组"></a>替换和分组</h2><p>替换使用 | 字符来允许在两个或多个替换选项之间进行选择。<br>例如，可以扩展章节标题正则表达式，以返回比章标题范围更广的匹配项。但是，这并不象您可能认为的那样简单。替换匹配 | 字符任一侧最大的表达式。</p><p>您可能认为，下面的表达式匹配出现在行首和行尾、后面跟一个或两个数字的 Chapter 或 Section：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/^Chapter|Section [<span class="string">1-9</span>][<span class="symbol">0-9</span>]&#123;0,1&#125;$/</div></pre></td></tr></table></figure><p>很遗憾，上面的正则表达式要么匹配行首的单词 Chapter，要么匹配行尾的单词 Section 及跟在其后的任何数字。如果输入字符串是 Chapter 22，那么上面的表达式只匹配单词 Chapter。如果输入字符串是 Section 22，那么该表达式匹配 Section 22。<br>若要使正则表达式更易于控制，可以使用括号来限制替换的范围，即，确保它只应用于两个单词 Chapter 和 Section。但是，括号也用于创建子表达式，并可能捕获它们以供以后使用，这一点在有关反向引用的那一节讲述。通过在上面的正则表达式的适当位置添加括号，就可以使该正则表达式匹配 Chapter 1 或 Section 3。<br>下面的正则表达式使用括号来组合 Chapter 和 Section，以便表达式正确地起作用：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/^(Chapter|Section) [<span class="string">1-9</span>][<span class="symbol">0-9</span>]&#123;0,1&#125;$/</div></pre></td></tr></table></figure><p>尽管这些表达式正常工作，但 Chapter|Section 周围的括号还将捕获两个匹配字中的任一个供以后使用。由于在上面的表达式中只有一组括号，因此，只有一个被捕获的”子匹配项”。<br>在上面的示例中，您只需要使用括号来组合单词 Chapter 和 Section 之间的选择。若要防止匹配被保存以备将来使用，请在括号内正则表达式模式之前放置 ?:。下面的修改提供相同的能力而不保存子匹配项：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/^(?:Chapter|Section) [<span class="string">1-9</span>][<span class="symbol">0-9</span>]&#123;0,1&#125;$/</div></pre></td></tr></table></figure><p>除 ?: 元字符外，两个其他非捕获元字符创建被称为”预测先行”匹配的某些内容。正向预测先行使用 ?= 指定，它匹配处于括号中匹配正则表达式模式的起始点的搜索字符串。反向预测先行使用 ?! 指定，它匹配处于与正则表达式模式不匹配的字符串的起始点的搜索字符串。<br>例如，假设您有一个文档，该文档包含指向 Windows 3.1、Windows 95、Windows 98 和 Windows NT 的引用。再进一步假设，您需要更新该文档，将指向 Windows 95、Windows 98 和 Windows NT 的所有引用更改为 Windows 2000。下面的正则表达式（这是一个正向预测先行的示例）匹配 Windows 95、Windows 98 和 Windows NT：</p><figure class="highlight coq"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/Windows(?=<span class="number">95</span> |<span class="type">98</span> |<span class="type">NT</span> )/</div></pre></td></tr></table></figure><p>找到一处匹配后，紧接着就在匹配的文本（不包括预测先行中的字符）之后搜索下一处匹配。例如，如果上面的表达式匹配 Windows 98，将在 Windows 之后而不是在 98 之后继续搜索。</p><h2 id="常用正则表达式"><a href="#常用正则表达式" class="headerlink" title="常用正则表达式"></a>常用正则表达式</h2><p>一、校验数字的表达式</p><ul><li>数字：</li></ul><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">^[<span class="number">0</span><span class="number">-9</span>]\*$</div></pre></td></tr></table></figure><ul><li>n位的数字：</li></ul><figure class="highlight tex"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">^<span class="tag">\<span class="name">d</span><span class="string">&#123;n&#125;</span></span><span class="formula">$</span></div></pre></td></tr></table></figure><ul><li>至少n位的数字</li></ul><figure class="highlight tex"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">：^<span class="tag">\<span class="name">d</span><span class="string">&#123;n,&#125;</span></span><span class="formula">$</span></div></pre></td></tr></table></figure><ul><li>m-n位的数字：</li></ul><figure class="highlight tex"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">^<span class="tag">\<span class="name">d</span><span class="string">&#123;m,n&#125;</span></span><span class="formula">$</span></div></pre></td></tr></table></figure><ul><li>零和非零开头的数字：</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">^(0|[<span class="string">1-9</span>][<span class="symbol">0-9</span>]\*)$</div></pre></td></tr></table></figure><ul><li>非零开头的最多带两位小数的数字：</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">^([<span class="string">1-9</span>][<span class="symbol">0-9</span>]\*)+(.[0-9]&#123;1,2&#125;)?$</div></pre></td></tr></table></figure><ul><li>带1-2位小数的正数或负数：</li></ul><figure class="highlight tex"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">^(<span class="tag">\<span class="name">-</span></span>)?<span class="tag">\<span class="name">d</span></span>+(<span class="tag">\<span class="name">.</span></span><span class="tag">\<span class="name">d</span><span class="string">&#123;1,2&#125;</span></span>)?<span class="formula">$</span></div></pre></td></tr></table></figure><ul><li>正数、负数、和小数：</li></ul><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">^(<span class="symbol">\-</span>|<span class="symbol">\+</span>)?<span class="symbol">\d</span>+(<span class="symbol">\.</span><span class="symbol">\d</span>+)?$</div></pre></td></tr></table></figure><ul><li>有两位小数的正实数：</li></ul><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">^[<span class="number">0</span><span class="number">-9</span>]+(.[<span class="number">0</span><span class="number">-9</span>]&#123;<span class="number">2</span>&#125;)?$</div></pre></td></tr></table></figure><ul><li>有1~3位小数的正实数：</li></ul><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">^[<span class="number">0</span><span class="number">-9</span>]+(.[<span class="number">0</span><span class="number">-9</span>]&#123;<span class="number">1</span>,<span class="number">3</span>&#125;)?$</div></pre></td></tr></table></figure><ul><li>非零的正整数：</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">^[<span class="string">1-9</span>]\d\<span class="emphasis">*$ 或 ^([1-9][0-9]*</span>)&#123;1,3&#125;$ 或 ^\+?[<span class="string">1-9</span>][<span class="symbol">0-9</span>]*$</div></pre></td></tr></table></figure><ul><li>非零的负整数：</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">^\-[<span class="string">1-9</span>][<span class="symbol"></span>]0-9"\<span class="emphasis">*$ 或 ^-[1-9]\d*</span>$</div></pre></td></tr></table></figure><ul><li>非负整数：</li></ul><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">^\d+$ 或 ^[<span class="number">1</span><span class="number">-9</span>]\d\*|<span class="number">0</span>$</div></pre></td></tr></table></figure><ul><li>非正整数：</li></ul><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">^-[<span class="number">1</span><span class="number">-9</span>]\d\*|<span class="number">0</span>$ 或 ^((-\d+)|(<span class="number">0</span>+))$</div></pre></td></tr></table></figure><ul><li>非负浮点数：</li></ul><figure class="highlight tex"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">^<span class="tag">\<span class="name">d</span></span>+(<span class="tag">\<span class="name">.</span></span><span class="tag">\<span class="name">d</span></span>+)?<span class="formula">$ 或 ^[1-9]<span class="tag">\<span class="name">d</span></span><span class="tag">\<span class="name">*</span></span><span class="tag">\<span class="name">.</span></span><span class="tag">\<span class="name">d*</span></span>|0<span class="tag">\<span class="name">.</span></span><span class="tag">\<span class="name">d*</span><span class="string">[1-9]</span></span><span class="tag">\<span class="name">d*</span></span>|0?<span class="tag">\<span class="name">.</span></span>0+|0$</span></div></pre></td></tr></table></figure><ul><li>非正浮点数：</li></ul><figure class="highlight tex"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">^((-<span class="tag">\<span class="name">d</span></span>+(<span class="tag">\<span class="name">.</span></span><span class="tag">\<span class="name">d</span></span>+)?)|(0+(<span class="tag">\<span class="name">.</span></span>0+)?))<span class="formula">$ 或 ^(-([1-9]<span class="tag">\<span class="name">d</span></span><span class="tag">\<span class="name">*</span></span><span class="tag">\<span class="name">.</span></span><span class="tag">\<span class="name">d*</span></span>|0<span class="tag">\<span class="name">.</span></span><span class="tag">\<span class="name">d*</span><span class="string">[1-9]</span></span><span class="tag">\<span class="name">d*</span></span>))|0?<span class="tag">\<span class="name">.</span></span>0+|0$</span></div></pre></td></tr></table></figure><ul><li>正浮点数：</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">^[<span class="string">1-9</span>]\d\<span class="emphasis">*\.\d*</span>|0\.\d<span class="emphasis">*[1-9]\d*</span>$ 或 ^(([<span class="string">0-9</span>]+\.[<span class="string">0-9</span>]<span class="emphasis">*[1-9][0-9]*</span>)|([<span class="string">0-9</span>]<span class="emphasis">*[1-9][0-9]*</span>\.[<span class="string">0-9</span>]+)|([<span class="string">0-9</span>]<span class="emphasis">*[1-9][0-9]*</span>))$</div></pre></td></tr></table></figure><ul><li>负浮点数：</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">^-([<span class="string">1-9</span>]\d\<span class="emphasis">*\.\d*</span>|0\.\d<span class="emphasis">*[1-9]\d*</span>)$ 或 ^(-(([<span class="string">0-9</span>]+\.[<span class="string">0-9</span>]<span class="emphasis">*[1-9][0-9]*</span>)|([<span class="string">0-9</span>]<span class="emphasis">*[1-9][0-9]*</span>\.[<span class="string">0-9</span>]+)|([<span class="string">0-9</span>]<span class="emphasis">*[1-9][0-9]*</span>)))$</div></pre></td></tr></table></figure><ul><li>浮点数：</li></ul><figure class="highlight tex"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">^(-?<span class="tag">\<span class="name">d</span></span>+)(<span class="tag">\<span class="name">.</span></span><span class="tag">\<span class="name">d</span></span>+)?<span class="formula">$ 或 ^-?([1-9]<span class="tag">\<span class="name">d</span></span><span class="tag">\<span class="name">*</span></span><span class="tag">\<span class="name">.</span></span><span class="tag">\<span class="name">d*</span></span>|0<span class="tag">\<span class="name">.</span></span><span class="tag">\<span class="name">d*</span><span class="string">[1-9]</span></span><span class="tag">\<span class="name">d*</span></span>|0?<span class="tag">\<span class="name">.</span></span>0+|0)$</span></div></pre></td></tr></table></figure><p>二、校验字符的表达式</p><ul><li>汉字：</li></ul><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">^[<span class="symbol">\u</span>4e00-<span class="symbol">\u</span>9fa5]&#123;0,&#125;$</div></pre></td></tr></table></figure><ul><li>英文和数字：</li></ul><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">^[A-Za-z0<span class="number">-9</span>]+$ 或 ^[A-Za-z0<span class="number">-9</span>]&#123;<span class="number">4</span>,<span class="number">40</span>&#125;$</div></pre></td></tr></table></figure><ul><li>长度为3-20的所有字符：</li></ul><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">^.&#123;<span class="number">3</span>,<span class="number">20</span>&#125;$</div></pre></td></tr></table></figure><ul><li>由26个英文字母组成的字符串：</li></ul><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">^<span class="string">[A-Za-z]</span>+$</div></pre></td></tr></table></figure><ul><li>由26个大写英文字母组成的字符串：</li></ul><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">^<span class="string">[A-Z]</span>+$</div></pre></td></tr></table></figure><ul><li>由26个小写英文字母组成的字符串：</li></ul><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">^<span class="string">[a-z]</span>+$</div></pre></td></tr></table></figure><ul><li>由数字和26个英文字母组成的字符串：</li></ul><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">^<span class="string">[A-Za-z0-9]</span>+$</div></pre></td></tr></table></figure><ul><li>由数字、26个英文字母或者下划线组成的字符串：</li></ul><figure class="highlight tex"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">^<span class="tag">\<span class="name">w</span></span>+<span class="formula">$ 或 ^<span class="tag">\<span class="name">w</span><span class="string">&#123;3,20&#125;</span></span>$</span></div></pre></td></tr></table></figure><ul><li>中文、英文、数字包括下划线：</li></ul><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">^[<span class="symbol">\u</span>4E00-<span class="symbol">\u</span>9FA5A-Za-z0-9_]+$</div></pre></td></tr></table></figure><ul><li>中文、英文、数字但不包括下划线等符号：</li></ul><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">^[\u4E00-\u9FA5A-Za-z0<span class="number">-9</span>]+$ 或 ^[\u4E00-\u9FA5A-Za-z0<span class="number">-9</span>]&#123;<span class="number">2</span>,<span class="number">20</span>&#125;$</div></pre></td></tr></table></figure><ul><li>可以输入含有^%&amp;’,;=?$\”等字符：</li></ul><figure class="highlight scheme"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[<span class="name">^%&amp;</span>',<span class="comment">;=?$\x22]+</span></div></pre></td></tr></table></figure><ul><li>禁止输入含有~的字符：</li></ul><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="string">[^~\x22]</span>+</div></pre></td></tr></table></figure><p>三、特殊需求表达式</p><ul><li>Email地址：</li></ul><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">^<span class="symbol">\w</span>+([-+.]<span class="symbol">\w</span>+)<span class="symbol">\*</span>@<span class="symbol">\w</span>+([-.]<span class="symbol">\w</span>+)*<span class="symbol">\.</span><span class="symbol">\w</span>+([-.]<span class="symbol">\w</span>+)*$</div></pre></td></tr></table></figure><ul><li>域名：</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[<span class="string">a-zA-Z0-9</span>][<span class="symbol">-a-zA-Z0-9</span>]&#123;0,62&#125;(/.[<span class="string">a-zA-Z0-9</span>][<span class="symbol">-a-zA-Z0-9</span>]&#123;0,62&#125;)+/.?</div></pre></td></tr></table></figure><ul><li>InternetURL：</li></ul><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[a-zA-z]+://[^<span class="symbol">\s</span>]<span class="symbol">\*</span> 或 ^http://([<span class="symbol">\w</span>-]+<span class="symbol">\.</span>)+[<span class="symbol">\w</span>-]+(/[<span class="symbol">\w</span>-./?<span class="variable">%&amp;=]*)?$</span></div></pre></td></tr></table></figure><ul><li>手机号码：</li></ul><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">^(<span class="number">13</span>[<span class="number">0</span><span class="number">-9</span>]|<span class="number">14</span>[<span class="number">5</span>|<span class="number">7</span>]|<span class="number">15</span>[<span class="number">0</span>|<span class="number">1</span>|<span class="number">2</span>|<span class="number">3</span>|<span class="number">5</span>|<span class="number">6</span>|<span class="number">7</span>|<span class="number">8</span>|<span class="number">9</span>]|<span class="number">18</span>[<span class="number">0</span>|<span class="number">1</span>|<span class="number">2</span>|<span class="number">3</span>|<span class="number">5</span>|<span class="number">6</span>|<span class="number">7</span>|<span class="number">8</span>|<span class="number">9</span>])\d&#123;<span class="number">8</span>&#125;$</div></pre></td></tr></table></figure><ul><li>电话号码(“XXX-XXXXXXX”、”XXXX-XXXXXXXX”、”XXX-XXXXXXX”、”XXX-XXXXXXXX”、”XXXXXXX”和”XXXXXXXX)：</li></ul><figure class="highlight tex"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">^(<span class="tag">\<span class="name">(</span></span><span class="tag">\<span class="name">d</span><span class="string">&#123;3,4&#125;</span></span>-)|<span class="tag">\<span class="name">d</span><span class="string">&#123;3.4&#125;</span></span>-)?<span class="tag">\<span class="name">d</span><span class="string">&#123;7,8&#125;</span></span><span class="formula">$</span></div></pre></td></tr></table></figure><ul><li>国内电话号码(0511-4405222、021-87888822)：</li></ul><figure class="highlight tex"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">\<span class="name">d</span><span class="string">&#123;3&#125;</span></span>-<span class="tag">\<span class="name">d</span><span class="string">&#123;8&#125;</span></span>|<span class="tag">\<span class="name">d</span><span class="string">&#123;4&#125;</span></span>-<span class="tag">\<span class="name">d</span><span class="string">&#123;7&#125;</span></span></div></pre></td></tr></table></figure><ul><li>电话号码正则表达式（支持手机号码，3-4位区号，7-8位直播号码，1－4位分机号）: </li></ul><figure class="highlight tex"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">((<span class="tag">\<span class="name">d</span><span class="string">&#123;11&#125;</span></span>)|^((<span class="tag">\<span class="name">d</span><span class="string">&#123;7,8&#125;</span></span>)|(<span class="tag">\<span class="name">d</span><span class="string">&#123;4&#125;</span></span>|<span class="tag">\<span class="name">d</span><span class="string">&#123;3&#125;</span></span>)-(<span class="tag">\<span class="name">d</span><span class="string">&#123;7,8&#125;</span></span>)|(<span class="tag">\<span class="name">d</span><span class="string">&#123;4&#125;</span></span>|<span class="tag">\<span class="name">d</span><span class="string">&#123;3&#125;</span></span>)-(<span class="tag">\<span class="name">d</span><span class="string">&#123;7,8&#125;</span></span>)-(<span class="tag">\<span class="name">d</span><span class="string">&#123;4&#125;</span></span>|<span class="tag">\<span class="name">d</span><span class="string">&#123;3&#125;</span></span>|<span class="tag">\<span class="name">d</span><span class="string">&#123;2&#125;</span></span>|<span class="tag">\<span class="name">d</span><span class="string">&#123;1&#125;</span></span>)|(<span class="tag">\<span class="name">d</span><span class="string">&#123;7,8&#125;</span></span>)-(<span class="tag">\<span class="name">d</span><span class="string">&#123;4&#125;</span></span>|<span class="tag">\<span class="name">d</span><span class="string">&#123;3&#125;</span></span>|<span class="tag">\<span class="name">d</span><span class="string">&#123;2&#125;</span></span>|<span class="tag">\<span class="name">d</span><span class="string">&#123;1&#125;</span></span>))<span class="formula">$)</span></div></pre></td></tr></table></figure><ul><li>身份证号(15位、18位数字)，最后一位是校验位，可能为数字或字符X：</li></ul><figure class="highlight tex"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">(^<span class="tag">\<span class="name">d</span><span class="string">&#123;15&#125;</span></span><span class="formula">$)|(^<span class="tag">\<span class="name">d</span><span class="string">&#123;18&#125;</span></span>$</span>)|(^<span class="tag">\<span class="name">d</span><span class="string">&#123;17&#125;</span></span>(<span class="tag">\<span class="name">d</span></span>|X|x)<span class="formula">$)</span></div></pre></td></tr></table></figure><ul><li>帐号是否合法(字母开头，允许5-16字节，允许字母数字下划线)：</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">^[<span class="string">a-zA-Z</span>][<span class="symbol">a-zA-Z0-9_</span>]&#123;4,15&#125;$</div></pre></td></tr></table></figure><ul><li>密码(以字母开头，长度在6~18之间，只能包含字母、数字和下划线)：</li></ul><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">^[a-zA-Z]\w&#123;<span class="number">5</span>,<span class="number">17</span>&#125;$</div></pre></td></tr></table></figure><ul><li>强密码(必须包含大小写字母和数字的组合，不能使用特殊字符，长度在8-10之间)：</li></ul><figure class="highlight gcode"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">^<span class="comment">(?=.\*\d)</span><span class="comment">(?=.*[a-z])</span><span class="comment">(?=.*[A-Z])</span>.&#123;<span class="number">8</span>,<span class="number">10</span>&#125;$</div></pre></td></tr></table></figure><ul><li>日期格式：</li></ul><figure class="highlight tex"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">^<span class="tag">\<span class="name">d</span><span class="string">&#123;4&#125;</span></span>-<span class="tag">\<span class="name">d</span><span class="string">&#123;1,2&#125;</span></span>-<span class="tag">\<span class="name">d</span><span class="string">&#123;1,2&#125;</span></span></div></pre></td></tr></table></figure><ul><li>一年的12个月(01～09和1～12)：</li></ul><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">^(<span class="number">0</span>?[<span class="number">1</span><span class="number">-9</span>]|<span class="number">1</span>[<span class="number">0</span><span class="number">-2</span>])$</div></pre></td></tr></table></figure><ul><li>一个月的31天(01～09和1～31)：</li></ul><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">^((<span class="number">0</span>?[<span class="number">1</span><span class="number">-9</span>])|((<span class="number">1</span>|<span class="number">2</span>)[<span class="number">0</span><span class="number">-9</span>])|<span class="number">30</span>|<span class="number">31</span>)$</div></pre></td></tr></table></figure><ul><li><p>钱的输入格式：</p><ol><li>有四种钱的表示形式我们可以接受:”10000.00” 和 “10,000.00”, 和没有 “分” 的 “10000” 和 “10,000”：<code>^[1-9][0-9]\*$</code></li><li>这表示任意一个不以0开头的数字,但是,这也意味着一个字符”0”不通过,所以我们采用下面的形式：<code>^(0|[1-9][0-9]\*)$</code></li><li>一个0或者一个不以0开头的数字.我们还可以允许开头有一个负号：<code>^(0|-?[1-9][0-9]\*)$</code></li><li>这表示一个0或者一个可能为负的开头不为0的数字.让用户以0开头好了.把负号的也去掉,因为钱总不能是负的吧。下面我们要加的是说明可能的小数部分：<code>^[0-9]+(.[0-9]+)?$</code></li><li>必须说明的是,小数点后面至少应该有1位数,所以”10.”是不通过的,但是 “10” 和 “10.2” 是通过的：<code>^[0-9]+(.[0-9]{2})?$</code></li><li>这样我们规定小数点后面必须有两位,如果你认为太苛刻了,可以这样：<code>^[0-9]+(.[0-9]{1,2})?$</code></li><li>这样就允许用户只写一位小数.下面我们该考虑数字中的逗号了,我们可以这样：<code>^[0-9]{1,3}(,[0-9]{3})\*(.[0-9]{1,2})?$</code></li><li>1到3个数字,后面跟着任意个 逗号+3个数字,逗号成为可选,而不是必须：<code>^([0-9]+|[0-9]{1,3}(,[0-9]{3})\*)(.[0-9]{1,2})?$</code></li><li>备注：这就是最终结果了,别忘了”+”可以用”*”替代如果你觉得空字符串也可以接受的话(奇怪,为什么?)最后,别忘了在用函数时去掉去掉那个反斜杠,一般的错误都在这里</li></ol></li><li><p>xml文件：</p></li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">^([<span class="string">a-zA-Z</span>]+-?)+[<span class="string">a-zA-Z0-9</span>]+\\.[<span class="string">x|X</span>][<span class="symbol">m|M</span>][<span class="string">l|L</span>]$</div></pre></td></tr></table></figure><ul><li>中文字符的正则表达式：</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[\u4e00-\u9fa5]</div></pre></td></tr></table></figure><ul><li>双字节字符：</li></ul><figure class="highlight scheme"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[<span class="name">^</span>\x00-\xff] (<span class="name">包括汉字在内，可以用来计算字符串的长度</span>(<span class="name">一个双字节字符长度计2，ASCII字符计1</span>))</div></pre></td></tr></table></figure><ul><li>空白行的正则表达式：</li></ul><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">\n</span><span class="symbol">\s</span><span class="symbol">\*</span><span class="symbol">\r</span> (可以用来删除空白行)</div></pre></td></tr></table></figure><ul><li>HTML标记的正则表达式：</li></ul><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;(<span class="symbol">\S</span><span class="symbol">\*</span>?)[^&gt;]*&gt;.*?<span class="symbol">\1</span>|&lt;.*? /&gt; ( 首尾空白字符的正则表达式：^<span class="symbol">\s</span>*|<span class="symbol">\s</span>*$或(^<span class="symbol">\s</span>*)|(<span class="symbol">\s</span>*$) (可以用来删除行首行尾的空白字符(包括空格、制表符、换页符等等)，非常有用的表达式)</div></pre></td></tr></table></figure><ul><li>腾讯QQ号：</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[<span class="string">1-9</span>][<span class="symbol">0-9</span>]&#123;4,&#125; (腾讯QQ号从10000开始)</div></pre></td></tr></table></figure><ul><li>中国邮政编码：</li></ul><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[<span class="number">1</span><span class="number">-9</span>]\d&#123;<span class="number">5</span>&#125;(?!\d) (中国邮政编码为<span class="number">6</span>位数字)</div></pre></td></tr></table></figure><ul><li>IP地址：</li></ul><figure class="highlight scheme"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">((<span class="name">?:</span>(<span class="name">?:25</span>[<span class="name">0-5</span>]|<span class="number">2</span>[<span class="name">0-4</span>]\\d|[<span class="name">01</span>]?\\d?\\d)\\.)&#123;<span class="number">3</span>&#125;(<span class="name">?:25</span>[<span class="name">0-5</span>]|<span class="number">2</span>[<span class="name">0-4</span>]\\d|[<span class="name">01</span>]?\\d?\\d))</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;正则表达式(regular expression)描述了一种字符串匹配的模式，可以用来检查一个串是否含有某种子串、将匹配的子串做替换或者从某个串中取出符合某个条件的子串等。&lt;/p&gt;
    
    </summary>
    
      <category term="Golang" scheme="https://yangchenglong11.github.io/categories/Golang/"/>
    
    
      <category term="Golang" scheme="https://yangchenglong11.github.io/tags/Golang/"/>
    
  </entry>
  
  <entry>
    <title>MongoDB基础</title>
    <link href="https://yangchenglong11.github.io/2017/01/05/MongoDB%E5%9F%BA%E7%A1%80/"/>
    <id>https://yangchenglong11.github.io/2017/01/05/MongoDB基础/</id>
    <published>2017-01-05T07:14:45.000Z</published>
    <updated>2017-10-03T12:30:21.118Z</updated>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>MongoDB 是一个基于分布式文件存储的数据库。由 C++ 语言编写。旨在为 WEB 应用提供可扩展的高性能数据存储解决方案。<br><a id="more"></a><br>它是一个介于关系数据库和非关系数据库之间的产品，是非关系数据库当中功能最丰富，最像关系数据库的。</p><p>MongoDB非常强大，同时也非常容易上手。这里介绍一些MongoDB的基本概念。</p><ul><li>文档是MongoDB中的数据单元，非常类似于关系数据库管理系统中的行（但是比行要复杂得多）。</li><li>集合可以看作没有模式的表。</li><li>MongoDB的单个实例可以容纳多个独立的数据库，每一个都有自己的集合和权限。</li><li>MongoDB自带简洁但功能强大的JavaScript shell，用来管理MongoDB实例和操作数据。</li><li>每一个文档都有一个特殊的键”_id”,它在文档所处的集合中是唯一的。</li></ul><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>这里先介绍 mac 下如何安装，然后介绍使用 docker 进行安装。</p><h2 id="mac下安装"><a href="#mac下安装" class="headerlink" title="mac下安装"></a>mac下安装</h2><ul><li>首先，下载好Mongodb数据库，然后再打开下载好的文件；</li><li>在终端中，选择合适的位置，输入： sudo mkdir -p /data/db，创建数据库日志文件夹；</li><li>在终端输入：sudo chown -R  用户名 /data/db ，给予数据库日志文件夹操作权限；</li><li>进入 mongodb 的 “bin”目录，使用命令“ ./mongod ”启动mongoDB server，启动成功后最后一行应该是端口号，到这里Mongodb已经安装成了；</li><li>新建终端窗口，并输入 ./mongo ，登陆到数据库，接下来就可以进行操作了。</li></ul><h2 id="docker-安装"><a href="#docker-安装" class="headerlink" title="docker 安装"></a>docker 安装</h2><p>首先把 docker 镜像 pull 下来：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo docker pull mongo</div></pre></td></tr></table></figure><p>然后启动 mongo 镜像：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker run --name mongo-name -v /home/docker/mongo_data:/data/db -d -p 27047:27017 mongo</div></pre></td></tr></table></figure><p>上面的命令中，我们创建一个mongo 容器，mongo-name 就是其名字， -v参数挂载本地目录 /home/docker/mongo_data 到容器的 /data/db 目录作为数据卷，-d参数使其在后台运行，-p 参数设置端口，使外界可以通过27047端口访问容器内27017端口，连接数据库。</p><p>mongo 镜像已经启动，我们可以使用下面的命令进入 mongo 进行操作 ：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo docker exec -it mongo-name mongo</div></pre></td></tr></table></figure><p>接下来再介绍下mongo 的常用命令。</p><h2 id="简单命令"><a href="#简单命令" class="headerlink" title="简单命令"></a>简单命令</h2><p>首先是连接 mongo 服务，即启动客户端。如果要在27017端口连接本地的 mongo  服务，使用下面的命令即可：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mogno</div></pre></td></tr></table></figure><p>如果要连接远端的mongo 服务，则稍微麻烦点：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mongo xx.xx.xx.xx:port</div></pre></td></tr></table></figure><p>如果想退出mongo 客户端，输入 <code>exit</code>即可。</p><p>那如何关闭 mongo 服务呢？正常情况下我们可能会使用 <code>exit</code>或者<code>Ctrl+C</code>退出，但这样做是有隐患的，可能会导致数据丢失，或者无法再次启动mongo 服务，正确的做法是下面这样的：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;</span><span class="bash"> use admin</span></div><div class="line"><span class="meta">&gt;</span><span class="bash"> db.shutdownServer()</span></div></pre></td></tr></table></figure><p>然后就是各种操作了～～～</p><h2 id="db"><a href="#db" class="headerlink" title="db"></a>db</h2><p>查看当前使用的数据库</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="title">yangs-Air</span><span class="params">(mongod-<span class="number">3.4</span>.<span class="number">0</span>)</span></span> &gt; db</div><div class="line">test</div></pre></td></tr></table></figure><p>切换数据库</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="title">yangs-Air</span><span class="params">(mongod-<span class="number">3.4</span>.<span class="number">0</span>)</span></span> &gt; use admin</div><div class="line">switched to db admin</div></pre></td></tr></table></figure><p>查看MongoDB实例拥有哪些数据库</p><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">yangs-Air</span>(<span class="selector-tag">mongod-3</span><span class="selector-class">.4</span><span class="selector-class">.0</span>) &gt; <span class="selector-tag">show</span> <span class="selector-tag">dbs</span>;</div><div class="line"><span class="selector-tag">admin</span>  → 0<span class="selector-class">.000GB</span></div><div class="line"><span class="selector-tag">analy</span>  → 0<span class="selector-class">.000GB</span></div><div class="line"><span class="selector-tag">github</span> → 0<span class="selector-class">.000GB</span></div><div class="line"><span class="selector-tag">local</span>  → 0<span class="selector-class">.000GB</span></div><div class="line"><span class="selector-tag">media</span>  → 0<span class="selector-class">.001GB</span></div><div class="line"><span class="selector-tag">test</span>   → 0<span class="selector-class">.000GB</span></div><div class="line"><span class="selector-tag">test2</span>  → 0<span class="selector-class">.000GB</span></div><div class="line"><span class="selector-tag">test3</span>  → 0<span class="selector-class">.000GB</span></div><div class="line"><span class="selector-tag">test4</span>  → 0<span class="selector-class">.000GB</span></div><div class="line"><span class="selector-tag">user</span>   → 0<span class="selector-class">.000GB</span></div><div class="line"><span class="selector-tag">work</span>   → 0<span class="selector-class">.000GB</span></div></pre></td></tr></table></figure><p>不需要显式创建数据库，当向数据库的某个collection插入文档时，数据库就被创建</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">yangs-Air(mongod-3.4.0) test&gt; show dbs</div><div class="line">admin  → 0.000GB</div><div class="line">analy  → 0.000GB</div><div class="line">test   → 0.000GB</div><div class="line">local  → 0.000GB</div><div class="line">yangs-Air(mongod-3.4.0) test&gt; use user</div><div class="line">switched <span class="keyword">to</span> db user</div><div class="line">yangs-Air(mongod-3.4.0) github&gt; show dbs</div><div class="line">admin → 0.000GB</div><div class="line">analy → 0.000GB</div><div class="line">local → 0.000GB</div><div class="line">test  → 0.000GB</div><div class="line">yangs-Air(mongod-3.4.0) user&gt; db.users.insert(&#123;<span class="string">"name"</span>:<span class="string">"yang"</span>&#125;)</div><div class="line">Inserted 1 record(s) <span class="keyword">in</span> 87ms</div><div class="line">WriteResult(&#123;</div><div class="line">  <span class="string">"nInserted"</span>: 1</div><div class="line">&#125;)</div><div class="line">yangs-Air(mongod-3.4.0) user&gt; show dbs</div><div class="line">admin  → 0.000GB</div><div class="line">analy  → 0.000GB</div><div class="line">local  → 0.000GB</div><div class="line">test   → 0.000GB</div><div class="line">user   → 0.000GB</div></pre></td></tr></table></figure><p>有一些数据库名是保留的，可以直接访问这些具有特殊语义的数据库，同时自己命名数据库时注意不要使用这些名字。</p><h2 id="shell"><a href="#shell" class="headerlink" title="shell"></a>shell</h2><p>mongo是一个简化的javaScript shell，shell内置了帮助文档，使用help查看</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">yangs-Air(mongod-3.4.0) github&gt; <span class="keyword">help</span></div><div class="line"><span class="keyword">db</span>.<span class="keyword">help</span>()                    <span class="keyword">help</span> <span class="keyword">on</span> <span class="keyword">db</span> methods</div><div class="line"><span class="keyword">db</span>.mycoll.<span class="keyword">help</span>()             <span class="keyword">help</span> <span class="keyword">on</span> collection methods</div><div class="line"><span class="keyword">sh</span>.<span class="keyword">help</span>()                    sharding helpers</div><div class="line">rs.<span class="keyword">help</span>()                    replica <span class="keyword">set</span> helpers</div><div class="line"><span class="keyword">help</span> admin                   administrative <span class="keyword">help</span></div><div class="line">......</div><div class="line"><span class="keyword">exit</span>                         quit the mongo <span class="keyword">shell</span></div></pre></td></tr></table></figure><p>通过db.help()查看数据库级别的帮助：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;</span><span class="bash"> db.help()</span></div><div class="line">DB methods:</div><div class="line">db.auth(username, password)</div><div class="line">db.createCollection(name, &#123; size : ..., capped : ..., max : ... &#125; )</div><div class="line">db.createView(name, viewOn, [ &#123; $operator: &#123;...&#125;&#125;, ... ], &#123; viewOptions &#125; )</div><div class="line">db.createUser(userDocument)</div><div class="line">......</div><div class="line">db.dropDatabase()</div><div class="line">db.eval() - deprecated</div><div class="line">db.getName()</div><div class="line">db.getPrevError()</div><div class="line">db.printSlaveReplicationInfo()</div><div class="line">db.dropUser(username)</div><div class="line">db.shutdownServer()</div><div class="line">db.stats()</div><div class="line">db.version() current version of the server</div></pre></td></tr></table></figure><p>使用db.foo.help()查看集合级别的帮助:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;</span><span class="bash"> db.foo.help()</span></div><div class="line">DBCollection help</div><div class="line">db.foo.find().help() - show DBCursor help</div><div class="line">db.foo.find(...).count()</div><div class="line">db.foo.find(...).limit(n)</div><div class="line">......</div><div class="line">db.foo.findOne([query], [fields], [options], [readConcern])</div><div class="line">db.foo.latencyStats() - display operation latency histograms for this collection</div></pre></td></tr></table></figure><p>在shell中输入函数名，不加小括号，就可以看到相应函数的JavaScript实现代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">&gt; db.user.find</div><div class="line"><span class="function"><span class="keyword">function</span> (<span class="params">query, fields, limit, skip, batchSize, options</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> cursor = <span class="keyword">new</span> DBQuery(<span class="keyword">this</span>._mongo,</div><div class="line">                             <span class="keyword">this</span>._db,</div><div class="line">                             <span class="keyword">this</span>,</div><div class="line">                             <span class="keyword">this</span>._fullName,</div><div class="line">                             <span class="keyword">this</span>._massageObject(query),</div><div class="line">                             fields,</div><div class="line">                             limit,</div><div class="line">                             skip,</div><div class="line">                             batchSize,</div><div class="line">                             options || <span class="keyword">this</span>.getQueryOptions());</div><div class="line"></div><div class="line">    <span class="keyword">var</span> connObj = <span class="keyword">this</span>.getMongo();</div><div class="line">    <span class="keyword">var</span> readPrefMode = connObj.getReadPrefMode();</div><div class="line">    <span class="keyword">if</span> (readPrefMode != <span class="literal">null</span>) &#123;</div><div class="line">        cursor.readPref(readPrefMode, connObj.getReadPrefTagSet());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">var</span> rc = connObj.getReadConcern();</div><div class="line">    <span class="keyword">if</span> (rc) &#123;</div><div class="line">        cursor.readConcern(rc);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> cursor;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="shell中的基本操作"><a href="#shell中的基本操作" class="headerlink" title="shell中的基本操作"></a>shell中的基本操作</h2><h3 id="insert"><a href="#insert" class="headerlink" title="insert"></a>insert</h3><p><strong>insert即向 collection添加新的 documents.如果插入时集合不存在,插入操作会创建该集合。</strong></p><p>MongoDB中提供了以下方法来插入文档到一个集合:</p><ul><li>db.collection.insert()</li><li>db.collection.insertOne()</li><li>db.collection.insertMany()</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">db.COLLECTION_NAME.insert(document)</div></pre></td></tr></table></figure><p><strong>实例</strong></p><p><strong>db.collection.insert()向集合插入一个或多个文档.要想插入一个文档,传递一个文档给该方法;要想插入多个文档,传递文档数组给该方法.</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&gt;db.col.insert(&#123;&quot;name&quot;:&quot;test&quot;&#125;)</div></pre></td></tr></table></figure><p>该操作返回了含有操作状态的 WriteResult对象.插入文档成功返回如下WriteResult 对象:</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="title">WriteResult</span><span class="params">(&#123; <span class="string">"nInserted"</span> : <span class="number">1</span> &#125;)</span></span></div></pre></td></tr></table></figure><p>nInserted字段指明了插入文档的总数.如果该操作遇到了错误, WriteResult 对象将包含该错误信息.</p><p>下面我们看下插入多个文档时的情况：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&gt; db.users.insert(</div><div class="line">...    [</div><div class="line">...      &#123; <span class="string">name:</span> <span class="string">"bob"</span>, <span class="string">age:</span> <span class="number">42</span>, <span class="string">status:</span> <span class="string">"A"</span>, &#125;,</div><div class="line">...      &#123; <span class="string">name:</span> <span class="string">"ahn"</span>, <span class="string">age:</span> <span class="number">22</span>, <span class="string">status:</span> <span class="string">"A"</span>, &#125;,</div><div class="line">...      &#123; <span class="string">name:</span> <span class="string">"xi"</span>, <span class="string">age:</span> <span class="number">34</span>, <span class="string">status:</span> <span class="string">"D"</span>, &#125;</div><div class="line">...    ]</div><div class="line">... )</div></pre></td></tr></table></figure><p>该方法返回了包含操作状态的 BulkWriteResult对象.成功插入文档返回如下 BulkWriteResult对象:</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">BulkWriteResult(&#123;</div><div class="line"><span class="string">"writeErrors"</span> : [ ],</div><div class="line"><span class="string">"writeConcernErrors"</span> : [ ],</div><div class="line"><span class="string">"nInserted"</span> : 3,</div><div class="line"><span class="string">"nUpserted"</span> : 0,</div><div class="line"><span class="string">"nMatched"</span> : 0,</div><div class="line"><span class="string">"nModified"</span> : 0,</div><div class="line"><span class="string">"nRemoved"</span> : 0,</div><div class="line"><span class="string">"upserted"</span> : [ ]</div><div class="line">&#125;)</div></pre></td></tr></table></figure><p>现在我们可以调用find()查看一下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&gt; db.col.find()</div><div class="line">&#123; &quot;_id&quot; : ObjectId(&quot;5870c0b3d599544ddbd1d575&quot;), &quot;name&quot; : &quot;test&quot; &#125;</div><div class="line">&#123; &quot;_id&quot; : ObjectId(&quot;5870cf70d599544ddbd1d579&quot;), &quot;name&quot; : &quot;bob&quot;, &quot;age&quot; : 42, &quot;status&quot; : &quot;A&quot; &#125;</div><div class="line">&#123; &quot;_id&quot; : ObjectId(&quot;5870cf70d599544ddbd1d57a&quot;), &quot;name&quot; : &quot;ahn&quot;, &quot;age&quot; : 22, &quot;status&quot; : &quot;A&quot; &#125;</div><div class="line">&#123; &quot;_id&quot; : ObjectId(&quot;5870cf70d599544ddbd1d57b&quot;), &quot;name&quot; : &quot;xi&quot;, &quot;age&quot; : 34, &quot;status&quot; : &quot;D&quot; &#125;</div></pre></td></tr></table></figure><p>可以看到已经插入成功，但每个文档都多了一个字段：”_id”,它是那里来的呢？</p><p><strong>MongoDB中储存的文档必须有一个”_id”键。这个键可以是任意类型的，默认为ObjectId对象。在一个集合中，每个文档都有唯一的”_id”值，来确保集合里面每个文档都能被唯一标识。如果插入文档的时候没有”_id”键,系统会自动帮你创建一个。这就是为什会多出来一个”_id”字段。</strong></p><p>接下来看下另外两个函数。</p><p><strong>db.collection.insertOne() 向集合插入单个document。</strong></p><p><strong>db.collection.insertMany()向集合插入多个 documents。</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&gt; db.users.insertMany(</div><div class="line">   [</div><div class="line">     &#123; name: &quot;bob&quot;, age: 42, status: &quot;A&quot;, &#125;,</div><div class="line">     &#123; name: &quot;ahn&quot;, age: 22, status: &quot;A&quot;, &#125;,</div><div class="line">     &#123; name: &quot;xi&quot;, age: 34, status: &quot;D&quot;, &#125;</div><div class="line">   ]</div><div class="line">)</div></pre></td></tr></table></figure><p>例子同前。</p><h3 id="query"><a href="#query" class="headerlink" title="query"></a>query</h3><p>MongoDB 查询数据的语法格式如下：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&gt;db<span class="selector-class">.COLLECTION_NAME</span><span class="selector-class">.find</span>(&lt;query <span class="attribute">filter</span>&gt;, &lt;projection&gt;)</div></pre></td></tr></table></figure><p>第一个大括号为filter，第二个为投影，即你想显示的值。</p><p>find() 方法以非结构化的方式来显示所有文档。</p><p>如果你需要以易读的方式来读取数据，可以使用 pretty() 方法，语法格式如下：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&gt;<span class="selector-tag">db</span><span class="selector-class">.COLLECTION_NAME</span><span class="selector-class">.find</span>()<span class="selector-class">.pretty</span>()</div></pre></td></tr></table></figure><p>除了 find() 方法之外，还有一个 findOne() 方法，它只返回一个文档。</p><h4 id="条件查询"><a href="#条件查询" class="headerlink" title="条件查询"></a>条件查询</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&gt;<span class="selector-tag">db</span><span class="selector-class">.users</span><span class="selector-class">.find</span>( &#123; <span class="attribute">status</span>: <span class="string">"A"</span> &#125; )</div><div class="line"></div><div class="line">&gt;<span class="selector-tag">db</span><span class="selector-class">.users</span><span class="selector-class">.find</span>( &#123; <span class="attribute">status</span>: <span class="string">"A"</span>, age: &#123; $lt: <span class="number">30</span> &#125; &#125; )</div></pre></td></tr></table></figure><p>上面四个例子中，第一个查询字段status的值为”A”的文档，第二个查询status的值为”A”,且age的值小于30的文档。</p><p>下表是一一些比较操作的示例：</p><table><thead><tr><th style="text-align:left">操作</th><th style="text-align:left">格式格式</th><th style="text-align:left">范例</th><th style="text-align:left">RDBMS类似语句</th></tr></thead><tbody><tr><td style="text-align:left">等于</td><td style="text-align:left">{<key>:<value>}</value></key></td><td style="text-align:left">db.col.find({“name”:”mon”})</td><td style="text-align:left">where name = “mon”</td></tr><tr><td style="text-align:left">小于</td><td style="text-align:left">{<key>:{$lt:<value>}}</value></key></td><td style="text-align:left">db.col.find({“count”:{$lt:50}})</td><td style="text-align:left">where count &lt; 50</td></tr><tr><td style="text-align:left">小于或等于</td><td style="text-align:left">{<key>:{$lte:<value>}}</value></key></td><td style="text-align:left">db.col.find({“count”:{$lte:50}})</td><td style="text-align:left">where count &lt;= 50</td></tr><tr><td style="text-align:left">大于</td><td style="text-align:left">{<key>:{$gt:<value>}}</value></key></td><td style="text-align:left">db.col.find({“count”:{$gt:50}})</td><td style="text-align:left">where count&gt; 50</td></tr><tr><td style="text-align:left">大于或等于</td><td style="text-align:left">{<key>:{$gte:<value>}}</value></key></td><td style="text-align:left">db.col.find({“count”:{$gte:50}})</td><td style="text-align:left">where count &gt;= 50</td></tr><tr><td style="text-align:left">不等于</td><td style="text-align:left">{<key>:{$ne:<value>}}</value></key></td><td style="text-align:left">db.col.find({“count”:{$ne:50}})</td><td style="text-align:left">where count != 50</td></tr></tbody></table><h4 id="返回指定键"><a href="#返回指定键" class="headerlink" title="返回指定键"></a>返回指定键</h4><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">db<span class="selector-class">.user</span><span class="selector-class">.find</span>(&#123;&#125;, &#123;<span class="string">"name"</span> : <span class="number">1</span>, <span class="string">"_id"</span> : <span class="number">0</span>&#125;)</div></pre></td></tr></table></figure><p>第二个大括号，我们可以对find结果显示的值进行限定，设为1表示显示，0表示不显示，<code>_id</code>默认显示。如果要将<code>id</code>屏蔽，需显示设置 <code>_id</code>为0。</p><h4 id="多条件"><a href="#多条件" class="headerlink" title="多条件"></a>多条件</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">db</span><span class="selector-class">.users</span><span class="selector-class">.find</span>(</div><div class="line">  &#123;</div><div class="line">    <span class="attribute">status</span>: <span class="string">"A"</span>,</div><div class="line">    $or: [ &#123; age: &#123; $lt: <span class="number">30</span> &#125; &#125;, &#123; <span class="attribute">type</span>: <span class="number">1</span> &#125; ]</div><div class="line">  &#125;</div><div class="line">)</div></pre></td></tr></table></figure><p><code>$or</code>表示条件数组中的条件只要有一个符合就进行显示。<code>$or</code>其后的条件数组中，其字段的设置。</p><h4 id="查询一个条件的多个值"><a href="#查询一个条件的多个值" class="headerlink" title="查询一个条件的多个值"></a>查询一个条件的多个值</h4><figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">db.user.<span class="builtin-name">find</span>(&#123;<span class="string">"num"</span> : &#123;<span class="string">"<span class="variable">$in</span>"</span> : [12, 13, 23]&#125;&#125;)</div></pre></td></tr></table></figure><p>如果要对同一条件的多个值进行过滤，可以使用<code>$in</code>。与之相对的是<code>$nin</code>。</p><h4 id="取反"><a href="#取反" class="headerlink" title="取反"></a>取反</h4><figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">db.user.<span class="builtin-name">find</span>(&#123;<span class="string">"num"</span> : &#123;<span class="string">"<span class="variable">$not</span>"</span> : [12, 13]&#125;)</div></pre></td></tr></table></figure><p>当要选取的元素比较多时我们可以使用<code>$not</code>，它会使不在数组中的值的文档被选中。</p><h2 id="update"><a href="#update" class="headerlink" title="update"></a>update</h2><p><strong>db.collection.update()</strong>: 第一个参数为过滤条件，第二个为upsert选项，第三个为是否更新多个文档。</p><h4 id="简单实例"><a href="#简单实例" class="headerlink" title="简单实例"></a>简单实例</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">db.people.update(&#123;"_id": 1&#125;,&#123;"$set" : &#123;"name": "yang"&#125;)</div></pre></td></tr></table></figure><p>上面的例子中，第一个大括号为filter，第二个为进行的改动。</p><p>下面插入一条数据，然后对它进行改动：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">db</span><span class="selector-class">.users</span><span class="selector-class">.insert</span>(</div><div class="line"> &#123;</div><div class="line">    <span class="attribute">_id</span>: <span class="number">1</span>,</div><div class="line">    <span class="attribute">name</span>: <span class="string">"sue"</span>,</div><div class="line">    <span class="attribute">age</span>: <span class="number">19</span>,</div><div class="line">    <span class="attribute">type</span>: <span class="number">1</span>,</div><div class="line">    <span class="attribute">status</span>: <span class="string">"P"</span>,</div><div class="line">    <span class="attribute">favorites</span>: &#123; <span class="attribute">artist</span>: <span class="string">"Picasso"</span>, <span class="attribute">food</span>: <span class="string">"pizza"</span> &#125;,</div><div class="line">    <span class="attribute">finished</span>: [ <span class="number">17</span>, <span class="number">3</span> ],</div><div class="line">    <span class="attribute">badges</span>: [ <span class="string">"blue"</span>, <span class="string">"black"</span> ],</div><div class="line">    <span class="attribute">points</span>: [</div><div class="line">        &#123; <span class="attribute">points</span>: <span class="number">85</span>, <span class="attribute">bonus</span>: <span class="number">20</span> &#125;,</div><div class="line">        &#123; <span class="attribute">points</span>: <span class="number">85</span>, <span class="attribute">bonus</span>: <span class="number">10</span> &#125;</div><div class="line">     ]</div><div class="line"> &#125;</div><div class="line">)</div></pre></td></tr></table></figure><h4 id="修改内嵌文档"><a href="#修改内嵌文档" class="headerlink" title="修改内嵌文档"></a>修改内嵌文档</h4><p>使用<code>$set</code>修改器进行，可直接通过<code>.</code>进行元素的访问</p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">db.users.<span class="keyword">update</span>(</div><div class="line">   &#123; <span class="string">"favorites.artist"</span>: <span class="string">"Pisanello"</span> &#125;,</div><div class="line">   &#123;</div><div class="line">     $set: &#123; <span class="string">"favorites.food"</span>: <span class="string">"pizza"</span>&#125;</div><div class="line">   &#125;</div><div class="line">)</div></pre></td></tr></table></figure><p> 错误的情况：</p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">db.users.<span class="keyword">update</span>(</div><div class="line">   &#123; <span class="string">"favorites.artist"</span>: <span class="string">"Pisanello"</span> &#125;,</div><div class="line">   &#123;</div><div class="line">     &#123; <span class="string">"favorites.food"</span>: <span class="string">"pizza"</span>&#125;</div><div class="line">   &#125;</div><div class="line">)</div></pre></td></tr></table></figure><p>不使用<code>$set</code>修改器，其意义为进行文档替换，结果就是原来的其他元素都没了，只剩下<code>{ &quot;favorites.food&quot;: &quot;pizza&quot;}</code>.</p><p> <code>$set</code>不仅可以对字段的值进行更改，同时也可以对类型进行修改。</p><p><code>$unset</code>可以将某个不需要的值尽行删除。</p><h4 id="数字增加或减少"><a href="#数字增加或减少" class="headerlink" title="数字增加或减少"></a>数字增加或减少</h4><figure class="highlight xquery"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">db.user.<span class="keyword">update</span>(&#123;<span class="string">"_id"</span> : <span class="number">1</span>&#125;, &#123;<span class="string">"$inc"</span> : &#123;<span class="string">"article"</span> : <span class="number">1</span>&#125;&#125;)</div></pre></td></tr></table></figure><p><code>$inc</code>表示对该字段加上某一个值，该值由文档中的字段的值决定，值为负数时可进行减法。记住，该字段必须为数字。</p><h4 id="数组操作"><a href="#数组操作" class="headerlink" title="数组操作"></a>数组操作</h4><h5 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h5><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">db<span class="selector-class">.comment</span><span class="selector-class">.update</span>(&#123;<span class="string">"_id"</span> : <span class="number">1</span>&#125;, &#123;<span class="string">"$push"</span> : &#123;<span class="string">"comments"</span> : <span class="string">"first"</span>&#125;)</div></pre></td></tr></table></figure><p><code>$push</code>表示在数组已有元素的末尾插入一个值。</p><h5 id="添加多个"><a href="#添加多个" class="headerlink" title="添加多个"></a>添加多个</h5><figure class="highlight xquery"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">db.blog.post.<span class="keyword">update</span>(&#123;<span class="string">"title"</span> : <span class="string">"Post"</span>&#125;, &#123;<span class="string">"$push"</span> : &#123;<span class="string">"tag"</span> : &#123;<span class="string">"$each"</span> : [<span class="string">"go"</span>, <span class="string">"linux"</span>, <span class="string">"database"</span>]&#125;&#125;&#125;)</div></pre></td></tr></table></figure><p><code>$push</code>和<code>$each</code>结合使用可以将一个数组中的多个值添加到指定字段.</p><h5 id="避免重复"><a href="#避免重复" class="headerlink" title="避免重复"></a>避免重复</h5><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">db<span class="selector-class">.user</span><span class="selector-class">.update</span>(&#123;<span class="string">"_id"</span> : <span class="number">1</span>&#125;, &#123;<span class="string">"$addToSet"</span> : &#123;<span class="string">"emails"</span> : <span class="string">"23132132132@qq.com"</span>&#125;)</div></pre></td></tr></table></figure><p><code>$addToSet</code> 可以避免重复插入，当数组中已经有要添加的值时，该语句相当于不执行。</p><h5 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h5><p>对于数组的删除，有两种不同方法。</p><h6 id="pop"><a href="#pop" class="headerlink" title="pop"></a>pop</h6><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">db<span class="selector-class">.comment</span><span class="selector-class">.update</span>(&#123;<span class="string">"_id"</span> : <span class="number">1</span>&#125;, &#123;<span class="string">"$pop"</span> : &#123;<span class="string">"comments"</span> : <span class="number">1</span>&#125;)</div></pre></td></tr></table></figure><p><code>$pop</code>表示从数组末尾删除几个元素，若为负数，表示从头删除。</p><h6 id="pull"><a href="#pull" class="headerlink" title="pull"></a>pull</h6><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">db<span class="selector-class">.comment</span><span class="selector-class">.update</span>(&#123;&#125;, &#123;<span class="string">"$pull"</span> : &#123;<span class="string">"comments"</span> : <span class="string">"xxxx"</span>&#125;)</div></pre></td></tr></table></figure><p>与<code>$pop</code>根据元素位置删除元素不同，<code>$pull</code>依据条件删除元素。</p><h5 id="位置"><a href="#位置" class="headerlink" title="位置"></a>位置</h5><figure class="highlight xquery"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">db.user.<span class="keyword">update</span>(&#123;<span class="string">"article"</span> : <span class="string">"post"</span>&#125;, &#123;<span class="string">"$inc"</span> : &#123;<span class="string">"comments.0.votes"</span> : <span class="number">1</span>&#125;&#125;)</div></pre></td></tr></table></figure><p>对于数组元素，我们也可以根据下标进行访问。</p><h5 id="定位"><a href="#定位" class="headerlink" title="定位"></a>定位</h5><figure class="highlight xquery"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">db.user.<span class="keyword">update</span>(&#123;<span class="string">"article"</span> : <span class="string">"post"</span>&#125;, &#123;<span class="string">"$set"</span> : &#123;<span class="string">"comments.$.author"</span> : <span class="string">"Jim"</span>&#125;&#125;)</div></pre></td></tr></table></figure><p>有些时候，我们不知道元素在数组中的下标，但经过前面filter的过滤，可以确定该元素，可以使用<code>$</code> 占位符，它就替代了前面filter所得到的元素。</p><h4 id="upsert"><a href="#upsert" class="headerlink" title="upsert"></a>upsert</h4><p>如果 <code>db.collection.update()</code>，<code>db.collection.updateOne()</code>， <code>db.collection.updateMany()</code> 或者 <code>db.collection.replaceOne()</code>包含 <code>upsert : true</code>  <strong>并且</strong>没有文档匹配指定的过滤器，那么此操作会创建一个新文档并插入它。如果有匹配的文档，那么此操作修改或替换匹配的单个或多个文档。</p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">db.user.<span class="keyword">update</span>(&#123;<span class="string">"rep"</span> : <span class="number">25</span>&#125;, &#123;<span class="string">"$inc"</span> : &#123;<span class="string">"rep"</span> : <span class="number">3</span>&#125;&#125;, <span class="literal">true</span>)</div></pre></td></tr></table></figure><h2 id="remove"><a href="#remove" class="headerlink" title="remove"></a>remove</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">db</span><span class="selector-class">.user</span><span class="selector-class">.remove</span>(&#123;&#125;)</div></pre></td></tr></table></figure><p>简单示例如下：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">db</span><span class="selector-class">.users</span><span class="selector-class">.remove</span>( &#123; <span class="attribute">status </span>: false &#125;, 1)</div></pre></td></tr></table></figure><p>当然还有delete方法也可以删除文档：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">db</span><span class="selector-class">.collection</span><span class="selector-class">.deleteOne</span>(&#123; <span class="attribute">status</span>: <span class="string">"D"</span> &#125;)</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h2&gt;&lt;p&gt;MongoDB 是一个基于分布式文件存储的数据库。由 C++ 语言编写。旨在为 WEB 应用提供可扩展的高性能数据存储解决方案。&lt;br&gt;
    
    </summary>
    
      <category term="MongoDB" scheme="https://yangchenglong11.github.io/categories/MongoDB/"/>
    
    
      <category term="MongoDB" scheme="https://yangchenglong11.github.io/tags/MongoDB/"/>
    
  </entry>
  
  <entry>
    <title>Docker是什么</title>
    <link href="https://yangchenglong11.github.io/2016/12/27/Docker%E6%98%AF%E4%BB%80%E4%B9%88/"/>
    <id>https://yangchenglong11.github.io/2016/12/27/Docker是什么/</id>
    <published>2016-12-27T04:40:10.000Z</published>
    <updated>2017-10-03T12:29:55.622Z</updated>
    
    <content type="html"><![CDATA[<p>简单说它是一个开源的容器引擎，可以帮助开发者高效的构建应用。<br><a id="more"></a> </p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=437250607&auto=0&height=66"></iframe><p>我们先看一下正常情况，我们是怎样构建一个简单应用的呢？首先它要有一个基础的平台，也就是操作系统来让它运行，比如 win，linux 等等。然后我们就可以写代码来实现它。在这个过程中，我们可能会用到数据库，框架等等。为了在代码中使用这些，我们会根据需要进行相关的配置，或者下载所需的依赖。但这个过程有时并不是想象中的那么简单，甚至有些时候仅仅是配置环境就让一些开发者望而却步。等我们所有的工作都完成后，将它部署到服务器上提供服务，我们的应用就开发完了，接着就是无休止的运维了。</p><p>为了更好的理解 Docker 是什么？我们把上面构建应用的过程比作运输货物，我们把上面提到的操作系统看作是进行运输的交通工具，这里我们就把大鲸鱼当作交通工具吧，把交付的应用程序看成是各种货物，我们要将各种各样形状、尺寸不同的货物放到大鲸鱼上，我们需要为每件货物考虑怎么安放（就是应用程序配套的环境），还得考虑货物和货物是否能叠起来（应用程序依赖的环境是否会冲突）。这可不是一份简单的差事，有时候因为安排不当甚至会导致这一次运输的失败。但后来出现了集装箱，我们把每件货物都放到集装箱里，这样我们的就可以用同样地方式安放、堆叠集装了，省事省力。</p><p>上面提到的集装箱就是 Docker 中的“容器”，而 Docker 就是管理这些集装箱的一整套机制。集装箱好像只是做了一层封装，没有什么很神奇的地方。但我们继续想象下场景，集装箱出现之后，世界上绝大多数的货物运输都可以放到这个神奇的箱子里，然后在公路、铁路、海洋等所有运输场景下，这个箱子都不用变化形态直接可以承运，而且中间的中转工作，都可以通过大型机械搞定，效率大大提升，从此生产力飙升。因为集装箱规范了运输的标准，于是相应的船舶、卡车、列车以及自动化中转设备才能按照规格，被制造出来，然后使联运以及自动化成为可能，才可以极大的提高效率，提升自动化水平。集装箱本身是一个产品，而这个产品无非就是标准化的具体体现，现实世界中的事实显而易见，就是这么简单。</p><p>按照这个思路，Docker 其实跟集装箱一样，或者说它想跟集装箱一样，成为穿着马甲的“标准化”。这样开发工程师就可以把它们开发出来的 bug 们放到“集装箱”里，然后运维人员就可以使用标准化的操作工具去运维这些可爱的 bug 们。于是实现了“海陆联运”，就好像运维工程师根本不需要了解其运维的软件架构而开发工程师也并不需要了解其软件运行的操作系统一样…… 总的来说，Docker 的目的是实现自动化运维，自动化运维的大前提是标准化，而 Docker 就是实现标准化的工具。</p><p>然后我们具体看看它能给开发和运维带来哪些福利。</p><p>它可以让我们更快速的交付和部署应用。使用 Docker，开发人员可以使用镜像来快速构建一套标准的开发环境；开发完成之后，测试和运维人员可以直接使用相同环境来部署代码。Docker 可以快速创建和删除容器，实现快速迭代，大量节约开发、测试、部署的时间。并且，各个步骤都有明确的配置和操作，整个过程全程可见，使团队更容易理解应用的创建和工作过程。</p><p>它可以实现更高效的资源利用。Docker 容器的运行不需要额外的虚拟化管理程序支持，它是内核级的虚拟化，可以实现更高的性能，同时对资源的额外需求很低。</p><p>它能帮我们更轻松的迁移和扩展。Docker容器几乎可以在任意的平台上运行，包括物理机、虚拟机、公有云、私有云、个人电脑、服务器等。 这种兼容性让用户可以在不同平台之间轻松地迁移应用。同时 Docker 创造性的使用了类似 git 管理代码的方式对镜像进行管理，也方便我们进行获取和管理 Docker 镜像。</p><p>它可以帮助我们更简单进行更新管理。使用 Dockerfile，只需要小小的配置修改，就可以替代以往大量的更新工作。并且所有修改都以增量的方式进行分发和更新，从而实现自动化并且高效的容器管理。Dockerfile 就是你的文档，并且用来产生镜像。要改变 Docker 镜像中的环境，先改 Dockerfile，用它产生镜像就行了，保证文档和环境一致。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;简单说它是一个开源的容器引擎，可以帮助开发者高效的构建应用。&lt;br&gt;
    
    </summary>
    
      <category term="Docker" scheme="https://yangchenglong11.github.io/categories/Docker/"/>
    
    
      <category term="Docker" scheme="https://yangchenglong11.github.io/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Golang 实现大数的乘法</title>
    <link href="https://yangchenglong11.github.io/2016/12/11/Golang-%E5%AE%9E%E7%8E%B0%E5%A4%A7%E6%95%B0%E4%B9%98%E6%B3%95/"/>
    <id>https://yangchenglong11.github.io/2016/12/11/Golang-实现大数乘法/</id>
    <published>2016-12-11T01:24:15.000Z</published>
    <updated>2017-10-03T12:28:50.505Z</updated>
    
    <content type="html"><![CDATA[<p>利用 Go 语言实现两个大数的乘法。<br><a id="more"></a></p><p>看到一道题目，要求模拟小学生的运算思维，实现大数的乘法。觉得不错就动手做了下，不过真正做的时候并没有完全按照小学生的思维，稍稍优化了些。</p><p>大体思路就是用字符串来表示大数，将他们存到数组中，结果也存到数组中，这样就解决了因数字太大导致计算机无法表示的问题。</p><p>可以发现，在两个数进行运算时，积最多为 m+n 位，而且第一个乘数的第 m 位与第二个乘数的第 n 位的结果应在结果的第 m+n 位。有了思路。就开始编码吧！下面附上代码。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line"><span class="string">"bufio"</span></div><div class="line"><span class="string">"fmt"</span></div><div class="line"><span class="string">"os"</span></div><div class="line"><span class="string">"strconv"</span></div><div class="line"><span class="string">"strings"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">mutl</span><span class="params">(a, b <span class="keyword">string</span>)</span></span> &#123;</div><div class="line">num_a := <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="built_in">len</span>(a)<span class="number">-1</span>)</div><div class="line">str_a := strings.Split(a, <span class="string">""</span>)</div><div class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(str_a)<span class="number">-1</span>; i++ &#123;</div><div class="line">num_a[i], _ = strconv.Atoi(str_a[i])</div><div class="line">&#125;</div><div class="line"></div><div class="line">num_b := <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="built_in">len</span>(b)<span class="number">-1</span>)</div><div class="line">str_b := strings.Split(b, <span class="string">""</span>)</div><div class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(str_b)<span class="number">-1</span>; i++ &#123;</div><div class="line">num_b[i], _ = strconv.Atoi(str_b[i])</div><div class="line">&#125;</div><div class="line"></div><div class="line">total := <span class="built_in">len</span>(num_a) + <span class="built_in">len</span>(num_b)</div><div class="line">result := <span class="built_in">make</span>([]<span class="keyword">int</span>, total)</div><div class="line"></div><div class="line"><span class="keyword">var</span> (</div><div class="line">index1   = <span class="number">0</span></div><div class="line">index2   = <span class="number">0</span></div><div class="line">resIndex = <span class="number">0</span></div><div class="line">segRes   = <span class="number">0</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="keyword">for</span> i := <span class="built_in">len</span>(num_a); i &gt; <span class="number">0</span>; i-- &#123;</div><div class="line">index1 = <span class="built_in">len</span>(num_a) - i</div><div class="line"></div><div class="line"><span class="keyword">for</span> j := <span class="built_in">len</span>(num_b); j &gt; <span class="number">0</span>; j-- &#123;</div><div class="line">index2 = <span class="built_in">len</span>(num_b) - j</div><div class="line"></div><div class="line">resIndex = index1 + index2</div><div class="line">segRes = num_a[index1] * num_b[index2]</div><div class="line"></div><div class="line">carry(&amp;result, resIndex, segRes)</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">fmt.Print(<span class="string">"结果为："</span>)</div><div class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; total<span class="number">-1</span>; i++ &#123;</div><div class="line">fmt.Print(result[i])</div><div class="line">&#125;</div><div class="line">fmt.Println()</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">carry</span><span class="params">(arr *[]<span class="keyword">int</span>, index <span class="keyword">int</span>, value <span class="keyword">int</span>)</span></span> &#123;</div><div class="line">(*arr)[index] += value</div><div class="line"></div><div class="line"><span class="keyword">if</span> (*arr)[index] &gt; <span class="number">9</span> &#123;</div><div class="line">result := (*arr)[index] / <span class="number">10</span></div><div class="line">(*arr)[index] = (*arr)[index] % <span class="number">10</span></div><div class="line">carry(arr, index<span class="number">-1</span>, result)</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">aa := bufio.NewReader(os.Stdin)</div><div class="line">fmt.Print(<span class="string">"请输入一个乘数: "</span>)</div><div class="line">a, _ := aa.ReadString(<span class="string">'\n'</span>)</div><div class="line"></div><div class="line">bb := bufio.NewReader(os.Stdin)</div><div class="line">fmt.Print(<span class="string">"请输入另一个乘数: "</span>)</div><div class="line">b, _ := bb.ReadString(<span class="string">'\n'</span>)</div><div class="line"></div><div class="line">mutl(a, b)</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;利用 Go 语言实现两个大数的乘法。&lt;br&gt;
    
    </summary>
    
      <category term="Golang" scheme="https://yangchenglong11.github.io/categories/Golang/"/>
    
    
      <category term="Golang" scheme="https://yangchenglong11.github.io/tags/Golang/"/>
    
  </entry>
  
  <entry>
    <title>go并发编程基础</title>
    <link href="https://yangchenglong11.github.io/2016/12/05/go%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/"/>
    <id>https://yangchenglong11.github.io/2016/12/05/go并发编程基础/</id>
    <published>2016-12-05T05:54:54.000Z</published>
    <updated>2017-10-13T11:55:22.006Z</updated>
    
    <content type="html"><![CDATA[<p>并发其主要思想是使多个任务可以在同一时间执行以便能够更快的得到结果。并发编程的思想来自于多任务操作系统。</p><a id="more"></a><p>多任务操作系统允许同时运行多个程序。与之相对的是单用户计算机系统的操作系统，任务是被一个接一个的读取，寻找资源并运行的，各任务的运行完全是串行的。</p><p>并发程序内部会被划分为多个部分，每个部分都可以被看作是一个串行程序，在这些串行程序之间可能会存在交互的需求，这就需要操作系统去协调。在这之前，我们先来看下进程。</p><h2 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h2><p>我们通常把一个程序的执行称为一个进程，同时进程也被用来描述程序的执行过程。</p><p>一个进程可以使用系统调用fork创建若干新的进程。前者被称为后者的父进程，每一个进程都有父进程。所有的进程共同组成了一个树状结构，内核启动进程作为进程树的根并负责系统的初始化操作。它的父进程就是它自己。</p><p>为了管理进程，内核必须对每个进程的属性，行为进行详细的记录，包括进程的优先级，状态，虚拟地址范围以及各种访问权限等等。这些信息都会被记录在每个进程的进程描述符中，而被保存在进程描述符中的进程ID(常叫做PID)是进程在操作系统中的唯一标识，同时进程描述符中还会包含当前进程的父进程的ID(常被称为PPID)。</p><p>进程的状态共有6个，分别是可运行状态，可中断的睡眠状态，不可中断的睡眠状态，暂停状态或跟踪状态，僵尸状态和退出状态。</p><p>linux操作系统可以凭借cpu快速在多个进程之间切换，以产生多个进程在同时运行的假象。但切换正在运行的进程是需要付出代价的。</p><p>内核对进程的合理切换和调度使多个进程可以有条不紊的并发执行，在很多时候，多个进程之间需要相互配合并合作完成一个任务，这就需要进程间通讯机制(IPC)的支持。下面就讲一下go语言支持的IPC方法。它们是管道，信号和Socket。</p><h2 id="管道"><a href="#管道" class="headerlink" title="管道"></a>管道</h2><p>管道(pipe)是一种是单向的通讯方式。它只能被用于父进程与子进程以及同祖先的子进程之间的通讯。例如，我们在使用shell命令的时候常常会用到管道：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">bogon:~ yang$ <span class="keyword">ps</span> aux | <span class="keyword">grep</span> <span class="keyword">go</span></div></pre></td></tr></table></figure><p>shell命令为每个命令都创建一个进程，然后把左边的命令的标准输出用管道与右边的命令的标准输入连接起来。</p><p>管道的优点在于它的简单，而缺点则是只能单向通讯以及对通讯双方关系上的严格限制。</p><p>对于管道，go语言是支持的。通过标准库代码包os/exec中的API，我们可以执行操作系统命令并在此基础上建立管道。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line"><span class="string">"bufio"</span></div><div class="line"><span class="string">"bytes"</span></div><div class="line"><span class="string">"fmt"</span></div><div class="line"><span class="string">"io"</span></div><div class="line"><span class="string">"os/exec"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">demo1()</div><div class="line">fmt.Println()</div><div class="line">demo2()</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">demo2</span><span class="params">()</span></span> &#123;</div><div class="line">fmt.Println(<span class="string">"Run command `ps aux | grep apipe`: "</span>)</div><div class="line">cmd1 := exec.Command(<span class="string">"ps"</span>, <span class="string">"aux"</span>)</div><div class="line">cmd2 := exec.Command(<span class="string">"grep"</span>, <span class="string">"apipe"</span>)</div><div class="line">stdout1, err := cmd1.StdoutPipe()</div><div class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">fmt.Printf(<span class="string">"Error: Can not obtain the stdout pipe for command: %s"</span>, err)</div><div class="line"><span class="keyword">return</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span> err := cmd1.Start(); err != <span class="literal">nil</span> &#123;</div><div class="line">fmt.Printf(<span class="string">"Error: The command can not running: %s\n"</span>, err)</div><div class="line"><span class="keyword">return</span></div><div class="line">&#125;</div><div class="line"><span class="comment">//使用带缓冲的读取器可以非常方便和灵活的读取需要的内容，而不是只能先把所有内容读出来再作处理</span></div><div class="line">outputBuf1 := bufio.NewReader(stdout1)</div><div class="line">        <span class="comment">//StdinPipe方法返回一个在命令Start后与命令标准输入关联的管道</span></div><div class="line">stdin2, err := cmd2.StdinPipe()</div><div class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">fmt.Printf(<span class="string">"Error: Can not obtain the stdin pipe for command: %s\n"</span>, err)</div><div class="line"><span class="keyword">return</span></div><div class="line">&#125;</div><div class="line"><span class="comment">//WriteTo把所属值中缓存的数据全部写入到参数值代表的写入器中</span></div><div class="line">outputBuf1.WriteTo(stdin2)</div><div class="line"><span class="keyword">var</span> outputBuf2 bytes.Buffer</div><div class="line">cmd2.Stdout = &amp;outputBuf2</div><div class="line"><span class="keyword">if</span> err := cmd2.Start(); err != <span class="literal">nil</span> &#123;</div><div class="line">fmt.Printf(<span class="string">"Error: The command can not be startup: %s\n"</span>, err)</div><div class="line"><span class="keyword">return</span></div><div class="line">&#125;</div><div class="line">err = stdin2.Close()</div><div class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">fmt.Printf(<span class="string">"Error: Can not close the stdio pipe: %s\n"</span>, err)</div><div class="line"><span class="keyword">return</span></div><div class="line">&#125;</div><div class="line"><span class="comment">//wait会一直阻塞到所属命令完全运行结束为止</span></div><div class="line"><span class="keyword">if</span> err := cmd2.Wait(); err != <span class="literal">nil</span> &#123;</div><div class="line">fmt.Printf(<span class="string">"Error: Can not wait for the command: %s\n"</span>, err)</div><div class="line"><span class="keyword">return</span></div><div class="line">&#125;</div><div class="line">fmt.Printf(<span class="string">"%s\n"</span>, outputBuf2.Bytes())</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">demo1</span><span class="params">()</span></span> &#123;</div><div class="line">useBufferIo := <span class="literal">false</span></div><div class="line">fmt.Println(<span class="string">"Run command `echo -n \"My first command from golang.\"`: "</span>)</div><div class="line">cmd0 := exec.Command(<span class="string">"echo"</span>, <span class="string">"-n"</span>, <span class="string">"My first command from golang."</span>)</div><div class="line"><span class="comment">//创建一个能获取此命令输出的管道</span></div><div class="line">stdout0, err := cmd0.StdoutPipe()</div><div class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">fmt.Printf(<span class="string">"Error: Can not obtain the stdout pipe for command No.0: %s\n"</span>, err)</div><div class="line"><span class="keyword">return</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span> err := cmd0.Start(); err != <span class="literal">nil</span> &#123;</div><div class="line">fmt.Printf(<span class="string">"Error: The command No.0 can not be startup: %s\n"</span>, err)</div><div class="line"><span class="keyword">return</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span> !useBufferIo &#123;</div><div class="line"><span class="keyword">var</span> outputBuf0 bytes.Buffer</div><div class="line"><span class="keyword">for</span> &#123;</div><div class="line">tempOutput := <span class="built_in">make</span>([]<span class="keyword">byte</span>, <span class="number">5</span>)</div><div class="line"><span class="comment">//Read把读出的数据存入调用方传递给他的字节切片</span></div><div class="line">n, err := stdout0.Read(tempOutput)</div><div class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line"><span class="keyword">if</span> err == io.EOF &#123;</div><div class="line"><span class="keyword">break</span></div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">fmt.Printf(<span class="string">"Error: Can not read data from the pipe: %s\n"</span>, err)</div><div class="line"><span class="keyword">return</span></div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span> n &gt; <span class="number">0</span> &#123;</div><div class="line">outputBuf0.Write(tempOutput[:n])</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">fmt.Printf(<span class="string">"%s\n"</span>, outputBuf0.String())</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">outputBuf0 := bufio.NewReader(stdout0)</div><div class="line">output0, _, err := outputBuf0.ReadLine()</div><div class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">fmt.Printf(<span class="string">"Error: Can not read data from the pipe: %s\n"</span>, err)</div><div class="line"><span class="keyword">return</span></div><div class="line">&#125;</div><div class="line">fmt.Printf(<span class="string">"%s\n"</span>, <span class="keyword">string</span>(output0))</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>上面我们讲的是匿名管道，与之相对的是命名管道。与匿名管道不同，任何进程都可以通过命名管道交换数据。实际上，命名管道以文件的形式存在于文件系统中，使用它的方法与使用文件类似，linux支持使用shell命令创建和使用命名管道，例如：</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">bogon:<span class="keyword">test</span> yang$ mkfifo -<span class="keyword">m</span> 644 myfifo2</div><div class="line">bogon:<span class="keyword">test</span> yang$ tee of_login &lt; myfifo2 &amp;</div><div class="line">[1] 10028</div><div class="line">bogon:<span class="keyword">test</span> yang$ vi tepipi.txt</div><div class="line">bogon:<span class="keyword">test</span> yang$ <span class="keyword">cat</span> tepipi.txt &gt;myfifo2</div><div class="line">[1]+  Done                    tee of_login &lt; myfifo2</div></pre></td></tr></table></figure><p>在上面的实例中，我们先使用命令mkfifo在当前目录创建了一个命名管道mififo2，然后又使用这个命名管道和命名tee把tepipe.txt文件中的内容写到了of_login文件中。</p><p>这里只是使用了命名管道搬运了数据，我们也可以在此基础上实现诸如数据的过滤或转换，以及管道的多路复用等功能。注意，命名管道默认是阻塞式的，更具体的说，只有在对这个命令管道的读操作和写操作都已准备就绪后，数据才会流转。它相对于匿名管道的优势就是通讯双方可以毫不相关。但命名管道也是单向的。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line"><span class="string">"fmt"</span></div><div class="line"><span class="string">"io"</span></div><div class="line"><span class="string">"os"</span></div><div class="line"><span class="string">"time"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">fileBasedPipe()</div><div class="line">inMemorySyncPipe()</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">fileBasedPipe</span><span class="params">()</span></span> &#123;</div><div class="line">reader, writer, err := os.Pipe()</div><div class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">fmt.Printf(<span class="string">"Error: Can not create the named pipe: %s\n"</span>, err)</div><div class="line">&#125;</div><div class="line"><span class="comment">//命名管道默认会在其中一端还未就绪时阻塞另一端的进程</span></div><div class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</div><div class="line">output := <span class="built_in">make</span>([]<span class="keyword">byte</span>, <span class="number">100</span>)</div><div class="line">n, err := reader.Read(output)</div><div class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">fmt.Printf(<span class="string">"Error: Can not read data from the named pipe: %s\n"</span>, err)</div><div class="line">&#125;</div><div class="line">fmt.Printf(<span class="string">"Read %d byte(s). [file-based pipe]\n"</span>, n)</div><div class="line">&#125;()</div><div class="line">input := <span class="built_in">make</span>([]<span class="keyword">byte</span>, <span class="number">26</span>)</div><div class="line"><span class="keyword">for</span> i := <span class="number">65</span>; i &lt;= <span class="number">90</span>; i++ &#123;</div><div class="line">input[i<span class="number">-65</span>] = <span class="keyword">byte</span>(i)</div><div class="line">&#125;</div><div class="line">n, err := writer.Write(input)</div><div class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">fmt.Printf(<span class="string">"Error: Can not write data to the named pipe: %s\n"</span>, err)</div><div class="line">&#125;</div><div class="line">fmt.Printf(<span class="string">"Written %d byte(s). [file-based pipe]\n"</span>, n)</div><div class="line">time.Sleep(<span class="number">200</span> * time.Millisecond)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">inMemorySyncPipe</span><span class="params">()</span></span> &#123;</div><div class="line"><span class="comment">//与上面的两个命名管道不同，这两个是被存于内存中的，有原子性操作保证的管道</span></div><div class="line">reader, writer := io.Pipe()</div><div class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</div><div class="line">output := <span class="built_in">make</span>([]<span class="keyword">byte</span>, <span class="number">100</span>)</div><div class="line">n, err := reader.Read(output)</div><div class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">fmt.Printf(<span class="string">"Error: Can not read data from the named pipe: %s\n"</span>, err)</div><div class="line">&#125;</div><div class="line">fmt.Printf(<span class="string">"Read %d byte(s). [in-memory pipe]\n"</span>, n)</div><div class="line">&#125;()</div><div class="line">input := <span class="built_in">make</span>([]<span class="keyword">byte</span>, <span class="number">26</span>)</div><div class="line"><span class="keyword">for</span> i := <span class="number">65</span>; i &lt;= <span class="number">90</span>; i++ &#123;</div><div class="line">input[i<span class="number">-65</span>] = <span class="keyword">byte</span>(i)</div><div class="line">&#125;</div><div class="line">n, err := writer.Write(input)</div><div class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">fmt.Printf(<span class="string">"Error: Can not write data to the named pipe: %s\n"</span>, err)</div><div class="line">&#125;</div><div class="line">fmt.Printf(<span class="string">"Written %d byte(s). [in-memory pipe]\n"</span>, n)</div><div class="line">time.Sleep(<span class="number">200</span> * time.Millisecond)</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="信号"><a href="#信号" class="headerlink" title="信号"></a>信号</h2><p>它是IPC中唯一一种异步的通讯方法。它的本质是利用软件来模拟硬件的中断机制。信号被用来通知某个进程有某个事件发生了。使用kill命令查看当前系统支持的信号。</p><p>linux支持的信号有62种，分别分为两大类，1到31号为标准信号，也叫不可靠信号，34到64为实时信号，也叫可靠信号。</p><p>对同一进程来说，每种标准信号只会被记录并处理一次，并且如果某一进程的标准信号种类有好多，其处理顺序也是完全不确定的。而实时信号正好相反，即同种类的多个信号都可以被记录，并且可以按照发送的顺序被处理。</p><p>进程响应信号的方式有3种：忽略，捕捉和执行默认操作 .</p><p>linux对每个标准信号都有默认的操作方式。对大多数标准信号，我们可以自定义当进程接收到他们之后进行怎样的处理。在程序中，这些作为信号响应的自定义操作往往是由函数来代表的。</p><p>go命令会对其中的一些以键盘输入为来源的标准信号作出相应。这是由于go命令使用了在标准库代码包os/signal 中的被用于处理信号的API。</p><p>下面我们看下os.Signal接口类型的声明：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">type</span> Signal <span class="keyword">interface</span> &#123;</div><div class="line">  String() <span class="keyword">string</span></div><div class="line">  Signal() <span class="comment">// to distinguish from other Stringers</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>从声明可知，其中的Signal()方法的声明并没有实际意义。它只是作为os.Signal接口类型的一个标识。</p><p>在标准库代码包syscall中，已经为不同的操作系统的所支持的每一个标准信号都声明了一个同名常量，其类型都为syscall.Signal——os.Signal接口类型的一个实现类型，同时也是一个int类型的别名类型。每个信号常量的整数值与他所代表的信号在操作系统中的编号一致。</p><p>代码包os/signal 中的Notify函数用来把操作系统发给当前进程的指定信号通知给该函数的调用方。声明如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">Notify</span><span class="params">(c <span class="keyword">chan</span>&lt;- os.Signal, sig ...os.Signal)</span></span></div></pre></td></tr></table></figure><p>signal处理程序在向接受通道发送值的时候，并不会因为通道已满而产生阻塞。</p><p>前面说过，大部分的标准信号我们都可以自定义其处理方法，不过有两种信号除外。SIGKILL和SIGSTOP。对他们的响应只执行系统默认操作。</p><p>对于其他信号，我们可以自行处理也可以恢复对他们的系统默认操作，这需要使用到os/signal包中的Stop函数。声明如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">Stop</span><span class="params">(c <span class="keyword">chan</span>&lt;- os.Signal)</span></span></div></pre></td></tr></table></figure><p>只需将Notify中的输入通道作为参数传入即可取消对这些信号的自行处理。</p><p>当然，我们也可以只对部分信号取消自定义处理，这时可以重新调用Notify函数，只需要第一个参数相同即可。</p><p>下面通过一个程序来实现以下功能：</p><p>1.执行一系列操作系统命令并获取演示进程的进程ID；</p><p>2.使用该进程值之上的API相对应的进程发送一个SIGINT信号，并输出演示进程已受到信号的凭证。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line"><span class="string">"bytes"</span></div><div class="line"><span class="string">"errors"</span></div><div class="line"><span class="string">"fmt"</span></div><div class="line"><span class="string">"io"</span></div><div class="line"><span class="string">"os"</span></div><div class="line"><span class="string">"os/exec"</span></div><div class="line"><span class="string">"os/signal"</span></div><div class="line"><span class="string">"runtime/debug"</span></div><div class="line"><span class="string">"strconv"</span></div><div class="line"><span class="string">"strings"</span></div><div class="line"><span class="string">"sync"</span></div><div class="line"><span class="string">"syscall"</span></div><div class="line"><span class="string">"time"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</div><div class="line">time.Sleep(<span class="number">5</span> * time.Second)</div><div class="line">sigSendingDemo()</div><div class="line">&#125;()</div><div class="line">sigHandleDemo()</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">sigHandleDemo</span><span class="params">()</span></span> &#123;</div><div class="line">sigRecv1 := <span class="built_in">make</span>(<span class="keyword">chan</span> os.Signal, <span class="number">1</span>)</div><div class="line">sigs1 := []os.Signal&#123;syscall.SIGINT, syscall.SIGQUIT&#125;</div><div class="line">fmt.Printf(<span class="string">"Set notification for %s... [sigRecv1]\n"</span>, sigs1)</div><div class="line">signal.Notify(sigRecv1, sigs1...)</div><div class="line">sigRecv2 := <span class="built_in">make</span>(<span class="keyword">chan</span> os.Signal, <span class="number">1</span>)</div><div class="line">sigs2 := []os.Signal&#123;syscall.SIGQUIT&#125;</div><div class="line">fmt.Printf(<span class="string">"Set notification for %s... [sigRecv2]\n"</span>, sigs2)</div><div class="line">signal.Notify(sigRecv2, sigs2...)</div><div class="line"></div><div class="line"><span class="keyword">var</span> wg sync.WaitGroup</div><div class="line">wg.Add(<span class="number">2</span>)</div><div class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</div><div class="line"><span class="comment">//在sigRecv通道被关闭后，for语句会立即被退出执行</span></div><div class="line"><span class="keyword">for</span> sig := <span class="keyword">range</span> sigRecv1 &#123;</div><div class="line">fmt.Printf(<span class="string">"Received a signal from sigRecv1: %s\n"</span>, sig)</div><div class="line">&#125;</div><div class="line">fmt.Printf(<span class="string">"End. [sigRecv1]\n"</span>)</div><div class="line">wg.Done()</div><div class="line">&#125;()</div><div class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</div><div class="line"><span class="keyword">for</span> sig := <span class="keyword">range</span> sigRecv2 &#123;</div><div class="line">fmt.Printf(<span class="string">"Received a signal from sigRecv2: %s\n"</span>, sig)</div><div class="line">&#125;</div><div class="line">fmt.Printf(<span class="string">"End. [sigRecv2]\n"</span>)</div><div class="line">wg.Done()</div><div class="line">&#125;()</div><div class="line"></div><div class="line">fmt.Println(<span class="string">"Wait for 3 seconds... "</span>)</div><div class="line">time.Sleep(<span class="number">3</span> * time.Second)</div><div class="line">fmt.Printf(<span class="string">"Stop notification..."</span>)</div><div class="line">signal.Stop(sigRecv1)</div><div class="line"><span class="built_in">close</span>(sigRecv1)</div><div class="line">fmt.Printf(<span class="string">"done. [sigRecv1]\n"</span>)</div><div class="line">wg.Wait()</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">sigSendingDemo</span><span class="params">()</span></span> &#123;</div><div class="line"><span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</div><div class="line"><span class="keyword">if</span> err := <span class="built_in">recover</span>(); err != <span class="literal">nil</span> &#123;</div><div class="line">fmt.Printf(<span class="string">"Fatal Error: %s\n"</span>, err)</div><div class="line">debug.PrintStack()</div><div class="line">&#125;</div><div class="line">&#125;()</div><div class="line"><span class="comment">// ps aux | grep "mysignal" | grep -v "grep" | grep -v "go run" | awk '&#123;print $2&#125;'</span></div><div class="line">cmds := []*exec.Cmd&#123;</div><div class="line">exec.Command(<span class="string">"ps"</span>, <span class="string">"aux"</span>),</div><div class="line">exec.Command(<span class="string">"grep"</span>, <span class="string">"mysignal"</span>),</div><div class="line">exec.Command(<span class="string">"grep"</span>, <span class="string">"-v"</span>, <span class="string">"grep"</span>),</div><div class="line">exec.Command(<span class="string">"grep"</span>, <span class="string">"-v"</span>, <span class="string">"go run"</span>),</div><div class="line">exec.Command(<span class="string">"awk"</span>, <span class="string">"&#123;print $2&#125;"</span>),</div><div class="line">&#125;</div><div class="line">output, err := runCmds(cmds)</div><div class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">fmt.Printf(<span class="string">"Command Execution Error: %s\n"</span>, err)</div><div class="line"><span class="keyword">return</span></div><div class="line">&#125;</div><div class="line">pids, err := getPids(output)</div><div class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">fmt.Printf(<span class="string">"PID Parsing Error: %s\n"</span>, err)</div><div class="line"><span class="keyword">return</span></div><div class="line">&#125;</div><div class="line">fmt.Printf(<span class="string">"Target PID(s):\n%v\n"</span>, pids)</div><div class="line"><span class="keyword">for</span> _, pid := <span class="keyword">range</span> pids &#123;</div><div class="line">proc, err := os.FindProcess(pid)</div><div class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">fmt.Printf(<span class="string">"Process Finding Error: %s\n"</span>, err)</div><div class="line"><span class="keyword">return</span></div><div class="line">&#125;</div><div class="line">sig := syscall.SIGQUIT</div><div class="line">fmt.Printf(<span class="string">"Send signal '%s' to the process (pid=%d)...\n"</span>, sig, pid)</div><div class="line">err = proc.Signal(sig)</div><div class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">fmt.Printf(<span class="string">"Signal Sending Error: %s\n"</span>, err)</div><div class="line"><span class="keyword">return</span></div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">getPids</span><span class="params">(strs []<span class="keyword">string</span>)</span> <span class="params">([]<span class="keyword">int</span>, error)</span></span> &#123;</div><div class="line">pids := <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="number">0</span>)</div><div class="line"><span class="keyword">for</span> _, str := <span class="keyword">range</span> strs &#123;</div><div class="line">pid, err := strconv.Atoi(strings.TrimSpace(str))</div><div class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</div><div class="line">&#125;</div><div class="line">pids = <span class="built_in">append</span>(pids, pid)</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> pids, <span class="literal">nil</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">runCmds</span><span class="params">(cmds []*exec.Cmd)</span> <span class="params">([]<span class="keyword">string</span>, error)</span></span> &#123;</div><div class="line"><span class="keyword">if</span> cmds == <span class="literal">nil</span> || <span class="built_in">len</span>(cmds) == <span class="number">0</span> &#123;</div><div class="line"><span class="keyword">return</span> <span class="literal">nil</span>, errors.New(<span class="string">"The cmd slice is invalid!"</span>)</div><div class="line">&#125;</div><div class="line">first := <span class="literal">true</span></div><div class="line"><span class="keyword">var</span> output []<span class="keyword">byte</span></div><div class="line"><span class="keyword">var</span> err error</div><div class="line"><span class="keyword">for</span> _, cmd := <span class="keyword">range</span> cmds &#123;</div><div class="line">fmt.Printf(<span class="string">"Run command: %v ...\n"</span>, getCmdPlaintext(cmd))</div><div class="line"><span class="keyword">if</span> !first &#123;</div><div class="line"><span class="keyword">var</span> stdinBuf bytes.Buffer</div><div class="line">stdinBuf.Write(output)</div><div class="line">cmd.Stdin = &amp;stdinBuf</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> stdoutBuf bytes.Buffer</div><div class="line">cmd.Stdout = &amp;stdoutBuf</div><div class="line"><span class="keyword">if</span> err = cmd.Start(); err != <span class="literal">nil</span> &#123;</div><div class="line"><span class="keyword">return</span> <span class="literal">nil</span>, getError(err, cmd)</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span> err = cmd.Wait(); err != <span class="literal">nil</span> &#123;</div><div class="line"><span class="keyword">return</span> <span class="literal">nil</span>, getError(err, cmd)</div><div class="line">&#125;</div><div class="line">output = stdoutBuf.Bytes()</div><div class="line"><span class="comment">//fmt.Printf("Output:\n%s\n", string(output))</span></div><div class="line"><span class="keyword">if</span> first &#123;</div><div class="line">first = <span class="literal">false</span></div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">lines := <span class="built_in">make</span>([]<span class="keyword">string</span>, <span class="number">0</span>)</div><div class="line"><span class="keyword">var</span> outputBuf bytes.Buffer</div><div class="line">outputBuf.Write(output)</div><div class="line"><span class="keyword">for</span> &#123;</div><div class="line">line, err := outputBuf.ReadBytes(<span class="string">'\n'</span>)</div><div class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line"><span class="keyword">if</span> err == io.EOF &#123;</div><div class="line"><span class="keyword">break</span></div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line"><span class="keyword">return</span> <span class="literal">nil</span>, getError(err, <span class="literal">nil</span>)</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">lines = <span class="built_in">append</span>(lines, <span class="keyword">string</span>(line))</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> lines, <span class="literal">nil</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">getCmdPlaintext</span><span class="params">(cmd *exec.Cmd)</span> <span class="title">string</span></span> &#123;</div><div class="line"><span class="keyword">var</span> buf bytes.Buffer</div><div class="line">buf.WriteString(cmd.Path)</div><div class="line"><span class="keyword">for</span> _, arg := <span class="keyword">range</span> cmd.Args[<span class="number">1</span>:] &#123;</div><div class="line">buf.WriteRune(<span class="string">' '</span>)</div><div class="line">buf.WriteString(arg)</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> buf.String()</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">getError</span><span class="params">(err error, cmd *exec.Cmd, extraInfo ...<span class="keyword">string</span>)</span> <span class="title">error</span></span> &#123;</div><div class="line"><span class="keyword">var</span> errMsg <span class="keyword">string</span></div><div class="line"><span class="keyword">if</span> cmd != <span class="literal">nil</span> &#123;</div><div class="line">errMsg = fmt.Sprintf(<span class="string">"%s  [%s %v]"</span>, err, (*cmd).Path, (*cmd).Args)</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">errMsg = fmt.Sprintf(<span class="string">"%s"</span>, err)</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span> <span class="built_in">len</span>(extraInfo) &gt; <span class="number">0</span> &#123;</div><div class="line">errMsg = fmt.Sprintf(<span class="string">"%s (%v)"</span>, errMsg, extraInfo)</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> errors.New(errMsg)</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>参考<a href="https://book.douban.com/subject/26244729/" target="_blank" rel="external">Go并发编程实战</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;并发其主要思想是使多个任务可以在同一时间执行以便能够更快的得到结果。并发编程的思想来自于多任务操作系统。&lt;/p&gt;
    
    </summary>
    
      <category term="Golang" scheme="https://yangchenglong11.github.io/categories/Golang/"/>
    
    
      <category term="Golang" scheme="https://yangchenglong11.github.io/tags/Golang/"/>
    
  </entry>
  
  <entry>
    <title>Linux中改变文件属性与权限</title>
    <link href="https://yangchenglong11.github.io/2016/11/26/Linux%E4%B8%AD%E6%94%B9%E5%8F%98%E6%96%87%E4%BB%B6%E5%B1%9E%E6%80%A7%E4%B8%8E%E6%9D%83%E9%99%90/"/>
    <id>https://yangchenglong11.github.io/2016/11/26/Linux中改变文件属性与权限/</id>
    <published>2016-11-26T13:52:46.000Z</published>
    <updated>2017-10-03T12:27:16.907Z</updated>
    
    <content type="html"><![CDATA[<p>这篇文章讲了在 Linux 中怎样改变文件的属性与权限。</p><a id="more"></a> <h3 id="chgrp"><a href="#chgrp" class="headerlink" title="chgrp"></a>chgrp</h3><p><strong>chgrp改变文件所属用户组</strong></p><p>chgrp即为change group的简写，如果要改变文件的用户组，要被改变的用户组必须要在/etc/group文件中存在才行，否则就会显示错误，可以进入这个目录查看文件内容，但建议使用cat命令，不要使用vi/vim，因为一旦不慎修改了此文件，系统文件出错后果是很严重的。</p><p>改变之前：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">yangs-MacBook-Air:code yang$ ls -al</div><div class="line">yangs-MacBook-Air:code yang$ -rw-r--r--   1 yang  staff    14 Jan 12 17:01 te1</div></pre></td></tr></table></figure><p>执行命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yangs-MacBook-Air:code yang$ chgrp everyone te1</div></pre></td></tr></table></figure><p>让我们查看一下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">yangs-MacBook-Air:code yang$ ls -al</div><div class="line">yangs-MacBook-Air:code yang$ -rw-r--r--   1 yang  everyone    14 Jan 12 17:04 te1</div></pre></td></tr></table></figure><p>可以看到已经被修改了。</p><p>当所改用户组未在文件中时：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">yangs-MacBook-Air:code yang$ chgrp eve te1</div><div class="line">chgrp: eve: illegal group name</div></pre></td></tr></table></figure><p>这个命令还有一个可选参数 -R,即进行递归(recursive)的持续更改，即连同子目录下的所有文件目录都更新成为这个用户组，常用在更改某一目录内所有的文件情况。</p><h3 id="chown"><a href="#chown" class="headerlink" title="chown"></a>chown</h3><p><strong>chown改变文件所有者</strong></p><p>chown即为 change owner 的简写，同样的，所改变的用户也必须是在/etc/passwd这个文件中有记录的用户名才可以。</p><p>chown 也可以直接修改用户组的名称，如果要连目录内所有子目录和文件都同时修改的话，直接加上-R即可。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">yangs-MacBook-Air:code yang$ chown bin te1</div><div class="line">// 下面这个是将 te1 的所有者与用户组都改为 root</div><div class="line">yangs-MacBook-Air:code yang$ chown root:root</div></pre></td></tr></table></figure><p>可能你会有疑问，上述两个命令有什么用呢？最常见的例子就是复制文件给你之外的其他人时，比如使用cp命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yangs-MacBook-Air:code yang$ cp 源文件 目标文件</div></pre></td></tr></table></figure><p>由于复制行为(cp)会复制执行者的属性与权限，那么对于其他人可能仍是无法修改此文件的。</p><h3 id="chmod"><a href="#chmod" class="headerlink" title="chmod"></a>chmod</h3><p><strong>chmod改变文件权限</strong></p><p>chmod 命令用来变更文件或目录的权限。</p><p>在UNIX系统家族里，文件或目录权限的控制分别以读取、写入、执行3种一般权限来区分，另有3种特殊权限可供运用。用户可以使用 chmod 指令去变更文件与目录的权限，设置方式采用文字或数字代号皆可。符号连接的权限无法变更，如果用户对符号连接修改权限，其改变会作用在被连接的原始文件。 </p><p>权限范围的表示法如下： </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">- u User，即文件或目录的拥有者；</div><div class="line">- g Group，即文件或目录的所属群组；</div><div class="line">- o Other，除了文件或目录拥有者或所属群组之外，其他用户皆属于这个范围；</div><div class="line">- a All，即全部的用户，包含拥有者，所属群组以及其他用户；</div><div class="line">- r 读取权限，数字代号为“4”; w 写入权限，数字代号为“2”；</div><div class="line">- x 执行或切换权限，数字代号为“1”； - 不具任何权限，数字代号为“0”；</div><div class="line">- s 特殊功能说明：变更文件或目录的权限。</div></pre></td></tr></table></figure><p>语法 chmod (选项) (参数) </p><p>选项 </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">- -c或——changes：效果类似“-v”参数，但仅回报更改的部分；</div><div class="line">- -f或--quiet或——silent：不显示错误信息；</div><div class="line">- -R或——recursive：递归处理，将指令目录下的所有文件及子目录一并处理；</div><div class="line">- -v或——verbose：显示指令执行过程；</div><div class="line">- --reference=&lt;参考文件或目录&gt;：把指定文件或目录的所属群组全部设成和参考文件或目录的所属群组相同；</div><div class="line">- &lt;权限范围&gt;+&lt;权限设置&gt;：开启权限范围的文件或目录的该选项权限设置；</div><div class="line">- &lt;权限范围&gt;-&lt;权限设置&gt;：关闭权限范围的文件或目录的该选项权限设置；</div><div class="line">- &lt;权限范围&gt;=&lt;权限设置&gt;：指定权限范围的文件或目录的该选项权限设置；</div></pre></td></tr></table></figure><p>参数 </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">- 权限模式：指定文件的权限模式； </div><div class="line">- 文件：要改变权限的文件。</div><div class="line">``` </div><div class="line"></div><div class="line">---</div><div class="line"></div><div class="line">知识扩展: Linux 用户分为：拥有者、组群(Group)、其他（other），Linux 系统中，预设的情況下，系统中所有的帐号与一般身份使用者，以及 root 的相关信 息， 都是记录在/etc/passwd文件中。每个人的密码则是记录在/etc/shadow文件下。 此外，所有的组群名称记录在/etc/group內。</div><div class="line"></div><div class="line">---</div><div class="line"></div><div class="line">例：rwx　rw-　r-- 　</div><div class="line"></div><div class="line">r 为读取属性　　  // 值＝4 </div><div class="line"></div><div class="line">w 为写入属性　　 // 值＝2 </div><div class="line"></div><div class="line">x 为执行属性　　  // 值＝1　</div><div class="line"></div><div class="line">```shell</div><div class="line">chmod u+x,g+w f01　　//为文件f01设置自己可以执行，组员可以写入的权限 </div><div class="line"></div><div class="line">chmod u=rwx,g=rw,o=r f01</div><div class="line"></div><div class="line">chmod 764 f01</div><div class="line"></div><div class="line">chmod a+x f01　　//对文件f01的u,g,o都设置可执行属性 文件的属主和属组属性设置 </div><div class="line"></div><div class="line">chown user:market f01　　//把文件f01给uesr，添加到market组 ll -d f1 查看目录f1的属性</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这篇文章讲了在 Linux 中怎样改变文件的属性与权限。&lt;/p&gt;
    
    </summary>
    
      <category term="Linux" scheme="https://yangchenglong11.github.io/categories/Linux/"/>
    
    
      <category term="Linux" scheme="https://yangchenglong11.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>说说itoa的使用</title>
    <link href="https://yangchenglong11.github.io/2016/11/13/%E8%AF%B4%E8%AF%B4itoa%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>https://yangchenglong11.github.io/2016/11/13/说说itoa的使用/</id>
    <published>2016-11-13T11:43:25.000Z</published>
    <updated>2017-10-13T11:35:15.768Z</updated>
    
    <content type="html"><![CDATA[<h1 id="iota"><a href="#iota" class="headerlink" title="iota"></a>iota</h1><p>iota是golang语言的常量计数器,只能在常量的表达式中使用。</p><a id="more"></a><p>iota在const关键字出现时将被重置为0(const内部的第一行之前)，const中每新增一行常量声明将使iota计数一次(iota可理解为const语句块中的行索引)。</p><p>使用iota能简化定义，在定义枚举时很有用。</p><p><strong>举例如下：</strong></p><p>1、iota只能在常量的表达式中使用。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">fmt.Println(<span class="literal">iota</span>)</div></pre></td></tr></table></figure><p>编译错误： undefined: iota</p><p>2、每次 const 出现时，都会让 iota 初始化为0.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> a = <span class="literal">iota</span> <span class="comment">// a=0 </span></div><div class="line"></div><div class="line"><span class="keyword">const</span> ( </div><div class="line">  b = <span class="literal">iota</span>     <span class="comment">//b=0 </span></div><div class="line">  c            <span class="comment">//c=1 </span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="keyword">const</span> (</div><div class="line"></div><div class="line"><span class="comment">// Set alarm consts</span></div><div class="line">ALARM_LEVEL = <span class="number">3</span></div><div class="line"></div><div class="line"><span class="comment">// Create constants using 'iota' and start from 1 (iota starts from zero)</span></div><div class="line">GET = <span class="literal">iota</span> + <span class="number">1</span>   <span class="comment">// 2</span></div><div class="line">SET              <span class="comment">// 3</span></div><div class="line">DEL              <span class="comment">// 4</span></div><div class="line">)</div></pre></td></tr></table></figure><p>3、自定义类型</p><p>自增长常量经常包含一个自定义枚举类型，允许你依靠编译器完成自增设置。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">type</span> Stereotype <span class="keyword">int</span></div><div class="line"></div><div class="line"><span class="keyword">const</span> ( </div><div class="line">    TypicalNoob Stereotype = <span class="literal">iota</span> <span class="comment">// 0 </span></div><div class="line">    TypicalHipster                <span class="comment">// 1 </span></div><div class="line">    TypicalUnixWizard             <span class="comment">// 2 </span></div><div class="line">    TypicalStartupFounder         <span class="comment">// 3 </span></div><div class="line">)</div></pre></td></tr></table></figure><p>4、可跳过的值</p><p>我们可以使用下划线跳过不想要的值。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">type</span> AudioOutput <span class="keyword">int</span></div><div class="line"></div><div class="line"><span class="keyword">const</span> ( </div><div class="line">    OutMute AudioOutput = <span class="literal">iota</span> <span class="comment">// 0 </span></div><div class="line">    OutMono                    <span class="comment">// 1 </span></div><div class="line">    OutStereo                  <span class="comment">// 2 </span></div><div class="line">    _ </div><div class="line">    _ </div><div class="line">    OutSurround                <span class="comment">// 5 </span></div><div class="line">)</div></pre></td></tr></table></figure><p>5、位掩码表达式</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">type</span> Allergen <span class="keyword">int</span></div><div class="line"></div><div class="line"><span class="keyword">const</span> ( </div><div class="line">    IgEggs_Allergen = <span class="number">1</span> &lt;&lt; <span class="literal">iota</span> <span class="comment">// 1 &lt;&lt; 0 which is 00000001 </span></div><div class="line">    IgChocolate                         <span class="comment">// 1 &lt;&lt; 1 which is 00000010 </span></div><div class="line">    IgNuts                              <span class="comment">// 1 &lt;&lt; 2 which is 00000100 </span></div><div class="line">    IgStrawberries                      <span class="comment">// 1 &lt;&lt; 3 which is 00001000 </span></div><div class="line">    IgShellfish                         <span class="comment">// 1 &lt;&lt; 4 which is 00010000 </span></div><div class="line">)</div></pre></td></tr></table></figure><p>这个工作是因为当你在一个 const 组中仅仅有一个标示符在一行的时候，它将使用增长的 iota 取得前面的表达式并且再运用它，。在 Go 语言的 spec 中， 这就是所谓的隐性重复最后一个非空的表达式列表。</p><p>如果你对鸡蛋，巧克力和海鲜过敏，把这些 bits 翻转到 “on” 的位置（从左到右映射 bits）。然后你将得到一个 bit 值 00010011，它对应十进制的 19。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">fmt.Println(IgEggs | IgChocolate | IgShellfish)</div><div class="line"><span class="comment">// output: </span></div><div class="line"><span class="comment">// 19</span></div></pre></td></tr></table></figure><p>6、定义数量级</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">type</span> ByteSize <span class="keyword">float64</span></div><div class="line"></div><div class="line"><span class="keyword">const</span> (</div><div class="line">    _           = <span class="literal">iota</span>                   <span class="comment">// ignore first value by assigning to blank identifier</span></div><div class="line">    KB ByteSize = <span class="number">1</span> &lt;&lt; (<span class="number">10</span> * <span class="literal">iota</span>) <span class="comment">// 1 &lt;&lt; (10*1)</span></div><div class="line">    MB                                   <span class="comment">// 1 &lt;&lt; (10*2)</span></div><div class="line">    GB                                   <span class="comment">// 1 &lt;&lt; (10*3)</span></div><div class="line">    TB                                   <span class="comment">// 1 &lt;&lt; (10*4)</span></div><div class="line">    PB                                   <span class="comment">// 1 &lt;&lt; (10*5)</span></div><div class="line">    EB                                   <span class="comment">// 1 &lt;&lt; (10*6)</span></div><div class="line">    ZB                                   <span class="comment">// 1 &lt;&lt; (10*7)</span></div><div class="line">    YB                                   <span class="comment">// 1 &lt;&lt; (10*8)</span></div><div class="line">)</div></pre></td></tr></table></figure><p>7、定义在一行的情况</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> (</div><div class="line">    Apple, Banana = <span class="literal">iota</span> + <span class="number">1</span>, <span class="literal">iota</span> + <span class="number">2</span></div><div class="line">    Cherimoya, Durian</div><div class="line">    Elderberry, Fig</div><div class="line">)</div><div class="line"></div><div class="line"><span class="comment">//iota 在下一行增长，而不是立即取得它的引用。</span></div><div class="line"><span class="comment">// Apple: 1 </span></div><div class="line"><span class="comment">// Banana: 2 </span></div><div class="line"><span class="comment">// Cherimoya: 2 </span></div><div class="line"><span class="comment">// Durian: 3 </span></div><div class="line"><span class="comment">// Elderberry: 3 </span></div><div class="line"><span class="comment">// Fig: 4</span></div></pre></td></tr></table></figure><p> 8、中间插队</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> ( </div><div class="line">    i = <span class="literal">iota</span> </div><div class="line">    j = <span class="number">3.14</span> </div><div class="line">    k = <span class="literal">iota</span> </div><div class="line">    l </div><div class="line">)</div></pre></td></tr></table></figure><p>那么打印出来的结果是 i=0,j=3.14,k=2,l=3</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;iota&quot;&gt;&lt;a href=&quot;#iota&quot; class=&quot;headerlink&quot; title=&quot;iota&quot;&gt;&lt;/a&gt;iota&lt;/h1&gt;&lt;p&gt;iota是golang语言的常量计数器,只能在常量的表达式中使用。&lt;/p&gt;
    
    </summary>
    
      <category term="Golang" scheme="https://yangchenglong11.github.io/categories/Golang/"/>
    
    
      <category term="Golang" scheme="https://yangchenglong11.github.io/tags/Golang/"/>
    
  </entry>
  
</feed>
