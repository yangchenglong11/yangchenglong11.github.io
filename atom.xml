<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>yangcl&#39;s</title>
  
  <subtitle>悟已往之不谏，知来者之可追。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://yangchenglong11.github.io/"/>
  <updated>2017-09-24T06:01:13.000Z</updated>
  <id>https://yangchenglong11.github.io/</id>
  
  <author>
    <name>Yang Chenglong</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Web 后端和 GO</title>
    <link href="https://yangchenglong11.github.io/2016/11/16/Web-%E5%90%8E%E7%AB%AF%E5%92%8CGO/"/>
    <id>https://yangchenglong11.github.io/2016/11/16/Web-后端和GO/</id>
    <published>2016-11-16T14:10:10.000Z</published>
    <updated>2017-09-24T06:01:13.000Z</updated>
    
    <content type="html"><![CDATA[<p>用最简单的话解释就是数据的处理，而前端是数据的呈现。<br><a id="more"></a> </p><p>根据正在处理的应用程序的大小和范围，后端开发人员要做的事情有很大的不同。以我的工作范围来说，实现业务逻辑，数据的创建和检索以及处理前端请求等。</p><p>在Web开发世界中，大多数后端开发人员从事于构建他们正在工作的应用程序背后的实际逻辑。</p><p>通常，前端开发人员构建用户界面，而后端开发人员编写代码，使其工作。</p><p>例如，前端开发人员在应用程序中创建一个界面，上面有一个按钮，按下按钮来获取客户的数据。</p><p>后端开发人员写可使得按钮工作的代码，通过指出从数据库中提取哪些数据并将其传回到前端（并最终显示在那里）。</p><p>后端开发人员也可能会大量参与系统架构，决定如何组织系统的逻辑，以便能够正常维护和运行。</p><p>他可能会参与构建框架或系统架构，以便于更容易编写程序。后端开发人员比前端开发人员花费更多的时间在实现算法和解决问题上。</p><p>这并不是说前端开发人员不解决难题，但是通常来说更难的功能实现，实际的业务逻辑都会再后端做。</p><h3 id="学后端需要学什么"><a href="#学后端需要学什么" class="headerlink" title="学后端需要学什么"></a>学后端需要学什么</h3><ul><li>后端开发语言<br>如：Golang，python，java，php，c#…..能够使用一门或多门开发语言来构造应用</li><li>数据库<br>掌握基本的增删改查，知道常见的数据库的优化以及运维，能够分析各种数据库的优缺点，知道什么时候用哪个数据库合适。</li><li>Linux使用</li><li>网络编程<br>熟悉掌握 http tcp/ip 协议</li><li>算法与数据结构</li><li>大数据</li><li>机器学习<br>……..<br>所以,路还是很长的….</li></ul><h3 id="Golang"><a href="#Golang" class="headerlink" title="Golang"></a>Golang</h3><p>我觉得学习一门语言最重要的就是做到三点,第一看基础知识,第二学习看代码,第三学习写代码.</p><p>  首先是基础语法<br>  有句话叫“基础不牢，地动山摇”。所以基础知识对以后的学习是很重要的，不只是语言方面，像上面说的数据库，网络之类的也是如此。重要，但不代表说我没有彻底掌握之前就停滞不前，就和它死磕到底，这并不是明智的做法。</p><p>  同时，也要注意，不要只看语法，也要有练习。golang官网就比较好，它有语法的文字描述，同时在旁边就有根据该语法给出的实例程序，加深理解。<br>  大家都已经学或正在学c++，其他语言就基础层面来说，简单的使用来说不会有太大差别。所以要学习其他语言，不必想c++这样花上将近一年的时间去学，把语法看下，大概有个印象就差不多了。不必要求全部记得，实际码代码时又不是考试，忘了可以回去查阅相关资料。</p><p>  接下来就是练习<br>  语法看完了，就像你们现在，c++学的差不多了，却不知道拿它能做什么。觉得语法好像是懂了，但怎么运用呢？<br>  我们要学会站在巨人的肩膀上，网上开源代码那么多，自己不会写，可以找一些大神写的自己感兴趣的源码clone到本地，仔细阅读分析他对语法是怎么运用的。</p><p>  当然，你down到本地的代码大多数不会只是讲解语法，因为这些开源出去的代码都是完成了某一功能的。简单的一些可能是利用这个语言实现了该语言所没有的数据结构，有的可能是一个网站的源码。<br>  这个阶段也是你提升最快的阶段，通过阅读源码，你可以学习到许多其他方面的知识，积累了经验。</p><p>  然后就是写了<br>  读书破万卷，下笔如有神。看了这么多源码，你也手痒了吧！来做一个项目练练手。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;用最简单的话解释就是数据的处理，而前端是数据的呈现。&lt;br&gt;
    
    </summary>
    
      <category term="后台" scheme="https://yangchenglong11.github.io/categories/%E5%90%8E%E5%8F%B0/"/>
    
    
      <category term="GO" scheme="https://yangchenglong11.github.io/tags/GO/"/>
    
      <category term="后台" scheme="https://yangchenglong11.github.io/tags/%E5%90%8E%E5%8F%B0/"/>
    
  </entry>
  
  <entry>
    <title>Docker是什么</title>
    <link href="https://yangchenglong11.github.io/2016/11/15/Docker%E6%98%AF%E4%BB%80%E4%B9%88/"/>
    <id>https://yangchenglong11.github.io/2016/11/15/Docker是什么/</id>
    <published>2016-11-15T04:10:10.000Z</published>
    <updated>2017-09-24T06:00:39.000Z</updated>
    
    <content type="html"><![CDATA[<p>简单说它是一个开源的容器引擎，可以帮助开发者高效的构建应用。<br><a id="more"></a> </p><p>我们先看一下正常情况，我们是怎样构建一个简单应用的呢？首先它要有一个基础的平台，也就是操作系统来让它运行，比如 win，linux 等等。然后我们就可以写代码来实现它。在这个过程中，我们可能会用到数据库，框架等等。为了在代码中使用这些，我们会根据需要进行相关的配置，或者下载所需的依赖。但这个过程有时并不是想象中的那么简单，甚至有些时候仅仅是配置环境就让一些开发者望而却步。等我们所有的工作都完成后，将它部署到服务器上提供服务，我们的应用就开发完了，接着就是无休止的运维了。</p><p>为了更好的理解 Docker 是什么？我们把上面构建应用的过程比作运输货物，我们把上面提到的操作系统看作是进行运输的交通工具，这里我们就把大鲸鱼当作交通工具吧，把交付的应用程序看成是各种货物，我们要将各种各样形状、尺寸不同的货物放到大鲸鱼上，我们需要为每件货物考虑怎么安放（就是应用程序配套的环境），还得考虑货物和货物是否能叠起来（应用程序依赖的环境是否会冲突）。这可不是一份简单的差事，有时候因为安排不当甚至会导致这一次运输的失败。但后来出现了集装箱，我们把每件货物都放到集装箱里，这样我们的就可以用同样地方式安放、堆叠集装了，省事省力。</p><p>上面提到的集装箱就是 Docker 中的“容器”，而 Docker 就是管理这些集装箱的一整套机制。集装箱好像只是做了一层封装，没有什么很神奇的地方。但我们继续想象下场景，集装箱出现之后，世界上绝大多数的货物运输都可以放到这个神奇的箱子里，然后在公路、铁路、海洋等所有运输场景下，这个箱子都不用变化形态直接可以承运，而且中间的中转工作，都可以通过大型机械搞定，效率大大提升，从此生产力飙升。因为集装箱规范了运输的标准，于是相应的船舶、卡车、列车以及自动化中转设备才能按照规格，被制造出来，然后使联运以及自动化成为可能，才可以极大的提高效率，提升自动化水平。集装箱本身是一个产品，而这个产品无非就是标准化的具体体现，现实世界中的事实显而易见，就是这么简单。</p><p>按照这个思路，Docker 其实跟集装箱一样，或者说它想跟集装箱一样，成为穿着马甲的“标准化”。这样开发工程师就可以把它们开发出来的 bug 们放到“集装箱”里，然后运维人员就可以使用标准化的操作工具去运维这些可爱的 bug 们。于是实现了“海陆联运”，就好像运维工程师根本不需要了解其运维的软件架构而开发工程师也并不需要了解其软件运行的操作系统一样…… 总的来说，Docker 的目的是实现自动化运维，自动化运维的大前提是标准化，而 Docker 就是实现标准化的工具。</p><p>然后我们具体看看它能给开发和运维带来哪些福利。</p><p>它可以让我们更快速的交付和部署应用。使用 Docker，开发人员可以使用镜像来快速构建一套标准的开发环境；开发完成之后，测试和运维人员可以直接使用相同环境来部署代码。Docker 可以快速创建和删除容器，实现快速迭代，大量节约开发、测试、部署的时间。并且，各个步骤都有明确的配置和操作，整个过程全程可见，使团队更容易理解应用的创建和工作过程。</p><p>它可以实现更高效的资源利用。Docker 容器的运行不需要额外的虚拟化管理程序支持，它是内核级的虚拟化，可以实现更高的性能，同时对资源的额外需求很低。</p><p>它能帮我们更轻松的迁移和扩展。Docker容器几乎可以在任意的平台上运行，包括物理机、虚拟机、公有云、私有云、个人电脑、服务器等。 这种兼容性让用户可以在不同平台之间轻松地迁移应用。同时 Docker 创造性的使用了类似 git 管理代码的方式对镜像进行管理，也方便我们进行获取和管理 Docker 镜像。</p><p>它可以帮助我们更简单进行更新管理。使用 Dockerfile，只需要小小的配置修改，就可以替代以往大量的更新工作。并且所有修改都以增量的方式进行分发和更新，从而实现自动化并且高效的容器管理。Dockerfile 就是你的文档，并且用来产生镜像。要改变 Docker 镜像中的环境，先改 Dockerfile，用它产生镜像就行了，保证文档和环境一致。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;简单说它是一个开源的容器引擎，可以帮助开发者高效的构建应用。&lt;br&gt;
    
    </summary>
    
      <category term="Docker" scheme="https://yangchenglong11.github.io/categories/Docker/"/>
    
    
      <category term="Docker" scheme="https://yangchenglong11.github.io/tags/Docker/"/>
    
  </entry>
  
</feed>
